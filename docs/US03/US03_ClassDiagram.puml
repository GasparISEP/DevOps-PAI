@startuml
'https://plantuml.com/class-diagram

class US03addCourseToProgrammeController {
    - programmeList: ProgrammeList
    - courseRepository: CourseRepository
    + getAllProgrammes(): List<Programme>
    + getAllCourses(): List<Course>
    + addCourseToProgramme(programme: Programme, course: Course): boolean
}
class Programme {
    - _name: String
    - _acronym: String
    - _quantityOfEcts: int
    - _quantityOfSemesters: int
    - _degreeType: DegreeType
    - _department: Department
    - _programmeDirector: Teacher
    - _courseList: List<Course>
    - _programmeCourseListFactory: ProgrammeCourseListFactory
    - _studyPlan: StudyPlan
    + addCourseToAProgramme(course: Course)
}
class ProgrammeCourseListFactory {
    + createCourseList(): List<Course>
}

interface ProgrammeCourseListFactoryImpl {
    + createCourseList(): List<Course>
}

class CourseRepository {
    -_courseRepository:ArrayList<Course>
    +CourseRepository()
    +registerCourse (courseName: String, acronym: String, quantityCreditsECTS: double, durationCourseInSemester: int)
    +isCourseRegistered (course: Course)
}

class ProgrammeList {
     -_programmeList: List<Programme>
     +registerProgramme(String : name, String : acronym, int : quantityOfEcts, int quantityOfSemesters, int degreeType: DegreeType; Department : department, Teacher programmeDirector)
     +changeProgrammeDirector(Programme programme, Teacher newDirector)
     +getAllProgrammes()
     +getCourseList(programme: Programme)
}

class Course {
    -_name: String
    -_acronym: String
    -_quantityCreditsEcts: double
    -_durationCourseInSemester: int
    +Course(name: String, acronym: String, quantityCreditsECTS: double, durationCourseInSemester: int)
    +getQuantityCreditsEcts()
    +getDurationInSemester()
    +getName()
    +getAcronym()
}



class ArrayList {
}



US03addCourseToProgrammeController "1" --> "uses 1" Programme
US03addCourseToProgrammeController "1" --> "uses 1" CourseRepository
US03addCourseToProgrammeController "1" --> "uses 1" ProgrammeList
Programme "1" --> "uses 1" ProgrammeCourseListFactory
ProgrammeCourseListFactory ..|> "implements" ProgrammeCourseListFactoryImpl
ProgrammeCourseListFactory "1" --> "creates 1" ArrayList
Programme "1" o-- "contains *" Course

@enduml
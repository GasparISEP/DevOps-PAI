@startuml
'https://plantuml.com/class-diagram


class US03addCourseToProgrammeController {
    - programmeList: ProgrammeList
    - courseRepository: CourseRepository
    - studyPlanRepository: StudyPlanRepository
    + getAllProgrammes(): List<Programme>
    + getAllCourses(): List<Course>
    + getAllStudyPlans(): List<StudyPlan>
    + addCourseToProgramme(programme: Programme, course: Course): boolean
}

class StudyPlanRepositoryImpl {
    - _studyPlanRepository
    + getAllStudyPlans()
}


class CourseRepositoryImpl {
    - _courseFactory: CourseFactory
    -_courseRepository:ArrayList<Course>
    +registerCourse (courseName: String, acronym: String, quantityCreditsECTS: double, durationCourseInSemester: int)
    +isCourseRegistered (course: Course)
    +getAllCourses()
}

interface IRepository {
}

interface ICourseInStudyPlanFactory {
}

class CourseInStudyPlanFactoryImpl {
 + newCourseInStudyPlan();
}


interface IProgrammeRepository {
}

interface IStudyPlanRepository {
}

interface ICourseRepository {
}

class ProgrammeRepositoryImpl {
     - _programmeFactory: ProgrammeFactory
     - _programmeRepo: List<Programme>
     - _programmeRepositoryListFactory: ProgrammeRepositoryListFactory
     +registerProgramme(String : name, String : acronym, int : quantityOfEcts, int quantityOfSemesters, int degreeType: DegreeType; Department : department, Teacher programmeDirector)
     +changeProgrammeDirector(Programme programme, Teacher newDirector)
     +getAllProgrammes()
     +getCourseList(programme: Programme)
     +getProgrammeByName(String name)
     +getProgrammeByAcronym(String acronym)
     +getAllProgrammeNames()

}

package "CourseInStudyPlan Aggregate" {
    class "<<root>>\nCourseInStudyPlan" {
        +CourseInStudyPlan(semester: int, curricularYear: int, course: Course, programme: Programme)
        +equals(ObjectToCompare: Object): boolean
        +getCourse(): Course
        +getSemester(): Semester
        +getCurricularYear(): CurricularYear
    }
    class Semester <<ValueObject>> {
        -_semester: int
        +isSemesterValid(int semester): boolean
        +getSemester()
    }

    class CurricularYear <<ValueObject>> {
            -_curricularYear: int
            +CurricularYear(int curricularYear)
            +isCurricularYearPositive(int curricularYear): boolean
            +getCurricularYear(): int
    }

    class CourseInStudyPlanID <<ValueObject>> {}

    class CourseID <<ValueObject>> {}

    class StudyPlanID <<ValueObject>> {}
}




US03addCourseToProgrammeController "1" -down--> "*" IStudyPlanRepository: uses
US03addCourseToProgrammeController "1" -down--> "*" IProgrammeRepository: uses
US03addCourseToProgrammeController "1" -down--> "*" ICourseRepository: uses

ProgrammeRepositoryImpl -up..|> IProgrammeRepository: implements
CourseRepositoryImpl -up..|> ICourseRepository : implements
StudyPlanRepositoryImpl -up..|> IStudyPlanRepository: implements

IProgrammeRepository -down--|> IRepository: extends
ICourseRepository -down--|> IRepository: extends
IStudyPlanRepository -down--|> IRepository: extends

StudyPlanRepositoryImpl "1" -down-> "1" ICourseInStudyPlanFactory: uses
CourseInStudyPlanFactoryImpl -right..|> ICourseInStudyPlanFactory: implements
ICourseInStudyPlanFactory "1" -right-> "1..*" "CourseInStudyPlan Aggregate": creates

"<<root>>\nCourseInStudyPlan" --> CourseID: refers to
"<<root>>\nCourseInStudyPlan" --> StudyPlanID: refers to
"<<root>>\nCourseInStudyPlan" <-- CourseInStudyPlanID: has
"<<root>>\nCourseInStudyPlan" --> CurricularYear: has
"<<root>>\nCourseInStudyPlan" --> Semester: has



@enduml
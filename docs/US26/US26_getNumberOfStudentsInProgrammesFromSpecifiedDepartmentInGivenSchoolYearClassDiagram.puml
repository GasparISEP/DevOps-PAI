@startuml

title US26_getNumberOfStudentsInProgrammesFromSpecifiedDepartmentInGivenSchoolYear.puml
/'left to right direction'/

class US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController {
    +US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController( ProgrammeEditionEnrollmentRepo PEERepo,SchoolYearRepository schoolYearRepository,DepartmentRepository departmentRepository
    +countStudentsInProgrammeFromDepartmentInSchoolYear(department: Department, schoolYear: SchoolYear): int
}

class Department {
    -_name: String
    -_acronym: String
    +Department(acronym: String, name: String)
    +Department(acronym: String,name: String, teacherDirector: Teacher)
    +hasSameAcronym(department: Department): boolean
    +hasSameName(department: Department): boolean
    +changeDirector(furtherDirector: Teacher): boolean
    + equals(obj: Object): boolean
}

class DepartmentRepository {
    +DepartmentRepository()
    +registerDepartment(acronym: String, name: String): boolean
    +getDepartmentsList(): List<Department>
    +departmentExists(department: Department): boolean
}

class ProgrammeEditionEnrollmentRepo {
    +ProgrammeEditionEnrollmentRepo()
    +enrollStudentInAProgrammeEdition (student: Student, programmeEdition: ProgrammeEdition, localDate: LocalDate): Optional<ProgrammeEditionEnrollment>
    +isStudentEnrolledInThisProgrammeEdition(student: Student, programmeEdition: ProgrammeEdition): boolean
    +countStudentsInProgrammesFromDepartmentInSchoolYear(department: Department, schoolYear: SchoolYear): int
    +getTheNumberOfStudentsEnrolledInAProgrammeEdition(programmeEdition: ProgrammeEdition): int
}

class ProgrammeEditionEnrollment {
    _enrollmentDate: LocalDate
    +ProgrammeEditionEnrollment(student: Student, programmeEdition: ProgrammeEdition, _enrollmentDate: LocalDate)
    +isEnrollmentAssociatedToDepartmentAndSchoolYear(department: Department, schoolYear: SchoolYear): boolean
    +getStudentUniqueNumber(): int
    +equals(obj: Object): boolean
    +findProgrammeEditionInEnrollment(): ProgrammeEdition
    +findStudentInProgrammeEdition(): Student
}

class SchoolYearRepository {
    +SchoolYearRepository()
    +addSchoolYear(description: String, startDate: String, endDate: String): boolean
    +schoolYearExists(schoolYear: SchoolYear): boolean
    +getCurrentSchoolYear(): SchoolYear
    +getAllSchoolYears(): List<SchoolYear>
}

class SchoolYear {
    -_description: String
    -_startDate: LocalDate
    -_endDate: LocalDate
    +SchoolYear(description: String, startDate: String, endDate: String)
    +isSameSchoolYear(newSchoolYear: SchoolYear): boolean
    +getEndDate(): LocalDate
    +getStartDate(): LocalDate
    +equals(o: Object): boolean
}

class ProgrammeEdition {
    +ProgrammeEdition(programme: Programme, schoolYear: SchoolYear)
    +equals(other: Object): boolean
    +findProgrammeInProgrammeEdition(): Programme
    +findSchoolYearInProgrammeEdition(): SchoolYear
    +isEditionAssociatedToDepartmentAndSchoolYear(department: Department, schoolYear: SchoolYear): boolean
}

class Programme {
    -_name: String
    -_acronym: String
    -_quantityOfEcts: int
    -_quantityOfSemesters: int
    +Programme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType, department: Department, programmeDirector: Teacher)
    +equals(o: Object): boolean
    +addCourseToAProgramme(course: Course): boolean
    +newProgrammeDirector(teacherDirector: Teacher)
    +enrolStudentInProgramme(student: Student, acessMethod: AcessMethod, amr: AcessMethodRepository): boolean
    +isStudentEnrolled(student: Student): boolean
    +isInDepartment (department: Department): boolean
    +getCourseList(): List<Course>
    +getQuantityOfSemester(): int
    +getQuantityOfEcts(): int
    +getStudyPlan(): StudyPlan
    +calculateNumberOfYears(quantityOfSemesters: int): int
}

Class Student {
    -_uniqueNumber: int
    -_name: String
    -_NIF: String
    -phone: String
    -email: String
    +Student(uniqueNumber: int, name: String, NIF: String,phone: String, email: String, address: Address)
    +isStudentRepeated(students: List<Students>): boolean
    +hasSameUniqueNumber(student: Student): boolean
    +getUniqueNumber(): int
}



Department "*\n _departmentsList " <-- " 1  " DepartmentRepository
US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController "1" ..> "        1\n_departmentRepository " DepartmentRepository
US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController "1" ..> "                      _schoolYearRepository 1  " SchoolYearRepository
US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController "1" ..> "                    1\n_PEERepo"  ProgrammeEditionEnrollmentRepo
ProgrammeEditionEnrollmentRepo "1" --> "_programmeEditionEnrollmentList  * " ProgrammeEditionEnrollment
SchoolYearRepository "1" --> "_schoolYearList\n                       *" SchoolYear
ProgrammeEdition "           *\n_programme" <-- "1" Programme
ProgrammeEdition "_schoolYear\n1..*" <-- "1" SchoolYear
Programme"*\n_department"-->"1" Department
ProgrammeEdition"1\n_programmeEdition"<--"*" ProgrammeEditionEnrollment
ProgrammeEditionEnrollment"*\n_student "<--"1 " Student
@enduml

@startuml

title US26_getNumberOfStudentsInProgrammesFromSpecifiedDepartmentInGivenSchoolYear.puml
top to bottom direction
skinparam ranksep 60
skinparam nodesep 70
skinparam classBackgroundColor #E1F5FE
skinparam linetype ortho

' ========== CONTROLLER LAYER ==========
package Controller #F5EEF8{
class US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController {
    +US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController( IProgrammeEditionEnrolmentService PEEService,ISchoolYearService schoolYearService,IDepartmentService departmentService, IProgrammeService programmeService)
    +countStudentsInProgrammeFromDepartmentInSchoolYear(departmentID: DepartmentID, schoolYearID: SchoolYearID): int
}
}

' ========== SERVICE LAYER ==========

package DepartmentServices {
interface IDepartmentService <<Interface>> {
+departmentExists(DepartmentID department) :boolean
+getDepartmentIDs() : set<DepartmentID>
}

class DepartmentServiceImpl {
+departmentExists(DepartmentID department) :boolean
+getDepartmentIDs() : set<DepartmentID>
}
}

package SchoolYearServices {
interface ISchoolYearService <<Interface>> {
+schoolYearExistsByID(schoolYearID: SchoolYear): boolean
+getAllSchoolYearIDs(): List<SchoolYearID>
}

class SchoolYearServiceImpl {
+schoolYearExistsByID(schoolYearID: SchoolYear): boolean
+getAllSchoolYearIDs(): List<SchoolYearID>
}
}


package ProgrammeEditionEnrolmentServices {
interface IProgrammeEditionEnrolmentService <<Interface>> {
+countStudentsInProgrammeFromDepartmentInSchoolYear(schoolYearID: SchoolYearID, programmeIDs: List<ProgrammeID>): boolean
}

class ProgrammeEditionEnrolmentServiceImpl {
+countStudentsInProgrammeFromDepartmentInSchoolYear(schoolYearID: SchoolYearID, programmeIDs: List<ProgrammeID>): boolean
}
}

package ProgrammeServices {
interface IProgrammeService <<Interface>> {
+findProgrammeByDepartment(DepartmentID department): List<ProgrammeID>
}

class ProgrammeServiceImpl {
+findProgrammeByDepartment(DepartmentID department): List<ProgrammeID>
}
}

' ========== REPOSITORY LAYER ==========


interface IDepartmentRepositorySpringData <<Interface>> {
+existsByID(DepartmentIDDataModel departmentIDDataModel): boolean
+findAll(): List<DepartmentDataModel>
}

interface IProgrammeRepositorySpringData <<Interface>> {
+findAll(): List<ProgrammeDataModel>
}

interface ISchoolYearRepositorySpringData <<Interface>> {
+existsByID(SchoolYearIDDataModel schoolYearIDDataModel): boolean
+findAll(): List<SchoolYearDataModel>
}

interface IProgrammeEditionEnrolmentRepositorySpringData <<Interface>> {
+findAll(): List<ProgrammeEditionEnrolmentDataModel>

}

package DepartmentRepository {
interface IDepartmentRepository <<Interface>> {
    +departmentExists(DepartmentID department) :boolean
    +containsOfIdentity(DepartmentID department) :boolean
    +getDepartmentIDs(): Set<DepartmentIDs>
}

class DepartmentRepositorySpringDataImpl {
    +departmentExists(DepartmentID department) :boolean
    +containsOfIdentity(DepartmentID department) :boolean
    +getDepartmentIDs(): Set<DepartmentIDs>
}
}

package ProgrammeRepository {
interface IProgrammeRepository <<Interface>> {
    +findProgrammeByDepartment(DepartmentID department): List<ProgrammeID>
}

class ProgrammeRepositorySpringDataImpl {
     +findProgrammeByDepartment(DepartmentID department): List<ProgrammeID>
}
}

package ProgrammeEditionEnrolmentRepository {
interface IProgrammeEditionEnrolmentRepository <<Interface>> {
     +countStudentsInProgrammesFromDepartmentInSchoolYear(schoolYearID: SchoolYearID, List<ProgrammeID> ProgrammeIDs): int
}
class ProgrammeEditionEnrolmentRepositorySpringDataImpl {
    +countStudentsInProgrammesFromDepartmentInSchoolYear(schoolYearID: SchoolYearID, List<ProgrammeID> ProgrammeIDs): int
}
}

package SchoolYearRepository {
interface ISchoolYearRepository <<Interface>> {
    +containsOfIdentity(schoolYearID: SchoolYear): boolean
    +findAll(): Iterable<SchoolYear>
}

class SchoolYearRepositorySpringDataImpl {
    +containsOfIdentity(schoolYearID: SchoolYear): boolean
    +findAll(): Iterable<SchoolYear>
}
}

'Aggregates'

package "JPA Programme Aggregate" #58AFDD {
    class ProgrammeDataModel {
    -_programmeID: ProgrammeIDDataModel
    -_name: String
    -_acronym: String
    -_quantSemesters: int
    -_quantEcts: int
    -_degreeTypeID: DegreeTypeIDDataModel
    -_departmentID: DepartmentIDDataModel
    -_programmeDirectorID: TeacherIDDataModel
    +isInDepartment ( departmentID: DepartmentID): boolean
    +identity (): ProgrammeID
    }
}

package "Programme Aggregate" #LightBlue{
    class Programme <<Root>> <<Entity>> {
    -_nameWithNumbersAndSpecialChars: NameWithNumbersAndSpecialChars
    -_quantSemesters: QuantSemesters
    -_quantECTS: QuantEcts
    -_acronym: Acronym
    -_degreeTypeID: DegreeTypeID
    +isInDepartment ( departmentID: DepartmentID): boolean
    +identity (): ProgrammeID
    }
}

package "JPA Department Aggregate" #58AFDD {
    class DepartmentDataModel {
    -id: DepartmentIDDataModel
    -name: String
    -acronym: String
    -directorId: TeacherIDDataModel
    +getId(): DepartmentIDDataModel
    }
}
package "Department Aggregate" #LightBlue {
    class Department <<Root>> <<Entity>> {
    -_name: Name
     +getDepartmentID(): DepartmentID
    }
}


class DepartmentIDDataModel {
    -departmentID: String
    +DepartmentIDDataModel(String departmentID): DepartmentIDDataModel
    }


package "DepartmentMapper" {

interface IDepartmentMapper <<Interface>> {
+toDataModel(): DepartmentDataModel
+toDomain(): Department
}

class DepartmentMapperImpl {
+toDataModel(): DepartmentDataModel
+toDomain(): Department
}
}

package "DepartmentIDMapper" {

interface IDepartmentIDMapper <<Interface>> {
+toDataModel(DepartmentID departmentID): DepartmentIDDataModel
+toDomain(): DepartmentID
}

class DepartmentIDMapperImpl {
+toDataModel(DepartmentID departmentID): DepartmentIDDataModel
+toDomain(): DepartmentID
}
}

package "DepartmentFactory" {
interface IDepartmentFactory <<interface>>{
+newDepartment(DepartmentAcronym acronym, Name name): Department
+newDepartment(DepartmentAcronym acronym, Name name, TeacherID directorID): Department
}
class DepartmentFactoryImpl {
+newDepartment(DepartmentAcronym acronym, Name name): Department
+newDepartment(DepartmentAcronym acronym, Name name, TeacherID directorID): Department
}
}


package "SchoolYearFactory" {
interface ISchoolYearFactory <<interface>>{
+createSchoolYear(UUID uuid, Description description, Date startDate, Date endDate): SchoolYear
}
class SchoolYearFactoryImpl {
+createSchoolYear(UUID uuid, Description description, Date startDate, Date endDate): SchoolYear
}
}

class SchoolYearIDDataModel {
    -id: String
    +SchoolYearIDDataModel(String id): SchoolYearIDDataModel
    }


package "SchoolYearIDMapper" {

interface ISchoolYearIDMapper <<Interface>> {
+toDataModel(): SchoolYearIDDataModel
+toDomain(): SchoolYearID
}

class SchoolYearIDMapperImpl {
+toDataModel(): SchoolYearIDDataModel
+toDomain(): SchoolYearID
}
}


package "SchoolYearMapper" {

interface ISchoolYearMapper <<Interface>> {
+toDataModel(): SchoolYearDataModel
+toDomain(): SchoolYear
}

class SchoolYearMapperImpl {
+toDataModel(): SchoolYearDataModel
+toDomain(): SchoolYear
}
}

package "ProgrammeMapper" {

interface IProgrammeMapper <<Interface>> {
+toDataModel(): ProgrammeDataModel
+toDomain(ProgrammeDataModel programmeDataModel): Programme
}

class ProgrammeMapperImpl {
+toDataModel(): ProgrammeDataModel
+toDomain(ProgrammeDataModel programmeDataModel): Programme
}
}

package "ProgrammeEditionEnrolmentMapper" {

interface IProgrammeEditionEnrolmentMapper <<Interface>> {
+toDataModel(): ProgrammeEditionEnrolmentDataModel
+toDomain(ProgrammeEditionEnrolmentDataModel): Optional <ProgrammeEditionEnrolment>
}

class ProgrammeEditionEnrolmentMapperImpl {
+toDataModel(): ProgrammeEditionEnrolmentDataModel
+toDomain(ProgrammeEditionEnrolmentDataModel): Optional <ProgrammeEditionEnrolment>
}
}

package "ProgrammeFactory" {
interface IProgrammeFactory <<interface>>{
+reregisterProgramme(NameWithNumbersAndSpecialChars name, Acronym acronym, QuantEcts quantityOfEcts, QuantSemesters quantityOfSemesters, DegreeTypeID degreeTypeID, DepartmentID departmentID, TeacherID programmeDirectorID, ProgrammeID programmeID): Programme
}
class ProgrammeFactoryImpl {
+reregisterProgramme(NameWithNumbersAndSpecialChars name, Acronym acronym, QuantEcts quantityOfEcts, QuantSemesters quantityOfSemesters, DegreeTypeID degreeTypeID, DepartmentID departmentID, TeacherID programmeDirectorID, ProgrammeID programmeID): Programme
}
}


package "ProgrammeEditionEnrolmentFactory" {
interface IProgrammeEditionEnrolmentFactory <<interface>> {
+createWithEnrolmentDate(StudentID studentID, ProgrammeEditionID programmeEditionID, Date enrolmentDate, EnrolmentStatus isActive): ProgrammeEditionEnrolment
}
class ProgrammeEditionEnrolmentFactoryImpl {
+createWithEnrolmentDate(StudentID studentID, ProgrammeEditionID programmeEditionID, Date enrolmentDate, EnrolmentStatus isActive): ProgrammeEditionEnrolment
}
}

class ProgrammeID <<Value Object>> {
     +equals ()
}
class DepartmentID <<Value Object>> {
     +getAcronym (): DepartmentAcronym
}
class SchoolYearID <<Value Object>> {
     +equals()
     +toString ()
}
class ProgrammeEditionID <<Value Object>> {
     +isSameProgrammeEdition ()
}


package "JPA ProgrammeEditionEnrolment Aggregate" #58AFDD {
    class ProgrammeEditionEnrolmentDataModel {
        -_id: ProgrammeEditionEnrolmentIDDataModel
        -_enrolmentDate: LocalDate
      +isEnrolmentAssociatedToProgrammeAndSchoolYear(schoolYearID: SchoolYearID, programmeIDs: List<ProgrammeID>): boolean
      +findStudentInProgrammeEdition(): StudentID
    }
}

package "ProgrammeEditionEnrolment Aggregate" #LightBlue {
    class ProgrammeEditionEnrolment <<Root>> <<Entity>> {
       -_enrolmentDate: LocalDate
      +isEnrolmentAssociatedToProgrammeAndSchoolYear(schoolYearID: SchoolYearID, programmeIDs: List<ProgrammeID>): boolean
      +findStudentInProgrammeEdition(): StudentID
    }
}

class ProgrammeEditionEnrolmentID <<Value Object>> {
}
class ProgrammeEditionID <<Value Object>> {
}
class StudentID <<Value Object>> {
}

 package "SchoolYear Aggregate" #Lightblue{
     class SchoolYear <<Root>> <<Entity>>  {
        -_startDate: Date
        -_endDate: Date
        -_description: Description
        +identity(): SchoolYearID
    }
 }

 package "JPA SchoolYear Aggregate" #58AFDD {
     class SchoolYearDataModel  {
        -id: SchoolYearIDDataModel
        -description: String
        -startDate: LocalDate
        -endDate: LocalDate
        +identity(): SchoolYearID
    }
 }


DepartmentRepositorySpringDataImpl--> IDepartmentRepositorySpringData
SchoolYearRepositorySpringDataImpl--> ISchoolYearRepositorySpringData
ProgrammeRepositorySpringDataImpl--> IProgrammeRepositorySpringData
ProgrammeEditionEnrolmentRepositorySpringDataImpl -->IProgrammeEditionEnrolmentRepositorySpringData

IProgrammeFactory <|.. ProgrammeFactoryImpl
ProgrammeFactoryImpl --> Programme
ProgrammeMapperImpl --> IProgrammeFactory


IProgrammeEditionEnrolmentFactory <|.. ProgrammeEditionEnrolmentFactoryImpl
ProgrammeEditionEnrolmentFactoryImpl --> ProgrammeEditionEnrolment
ProgrammeEditionEnrolmentMapperImpl -right-> IProgrammeEditionEnrolmentFactory

ProgrammeEditionEnrolment "1" --> "1" ProgrammeEditionEnrolmentID
ProgrammeEditionEnrolment "1" --> "1" ProgrammeEditionID
ProgrammeEditionEnrolment "1" --> "1" StudentID


DepartmentServiceImpl --> IDepartmentMapper
IDepartmentMapper <|.. DepartmentMapperImpl
DepartmentRepositorySpringDataImpl --> DepartmentMapperImpl
DepartmentRepositorySpringDataImpl --> IDepartmentIDMapper
IDepartmentIDMapper <|.. DepartmentIDMapperImpl
DepartmentIDMapperImpl --> DepartmentIDDataModel
DepartmentIDMapperImpl --> DepartmentID
DepartmentDataModel --> DepartmentIDDataModel
DepartmentMapperImpl ...>  Department
DepartmentMapperImpl ..> DepartmentDataModel
IDepartmentFactory <|.. DepartmentFactoryImpl
DepartmentFactoryImpl --> Department
DepartmentMapperImpl --> IDepartmentFactory

SchoolYearServiceImpl --> ISchoolYearMapper
ISchoolYearMapper <|.. SchoolYearMapperImpl
SchoolYearRepositorySpringDataImpl --> SchoolYearMapperImpl
SchoolYearMapperImpl ..> SchoolYear
SchoolYearMapperImpl ..> SchoolYearDataModel
SchoolYearRepositorySpringDataImpl --> ISchoolYearIDMapper
ISchoolYearIDMapper <|.. SchoolYearIDMapperImpl
SchoolYearIDMapperImpl --> SchoolYearIDDataModel
SchoolYearIDMapperImpl --> SchoolYearID
SchoolYearDataModel --> SchoolYearIDDataModel
ISchoolYearFactory <|.. SchoolYearFactoryImpl
SchoolYearFactoryImpl --> SchoolYear
SchoolYearMapperImpl --> ISchoolYearFactory


IProgrammeMapper <|.. ProgrammeMapperImpl
ProgrammeRepositorySpringDataImpl --> ProgrammeMapperImpl
ProgrammeMapperImpl ..> Programme
ProgrammeMapperImpl ..> ProgrammeDataModel

ProgrammeEditionEnrolmentServiceImpl --> IProgrammeEditionEnrolmentMapper
IProgrammeEditionEnrolmentMapper <|.. ProgrammeEditionEnrolmentMapperImpl
ProgrammeEditionEnrolmentRepositorySpringDataImpl --> ProgrammeEditionEnrolmentMapperImpl
ProgrammeEditionEnrolmentMapperImpl ..> ProgrammeEditionEnrolment
ProgrammeEditionEnrolmentMapperImpl ..> ProgrammeEditionEnrolmentDataModel


ProgrammeEditionEnrolmentRepositorySpringDataImpl "1" --> "1..*" ProgrammeEditionEnrolmentDataModel
ProgrammeEditionEnrolment "1" --> "1" ProgrammeEditionID
ProgrammeEditionID "1" --> "1" ProgrammeID
ProgrammeEditionID "1" --> "1" SchoolYearID
SchoolYearRepositorySpringDataImpl "1" --> "1..*" SchoolYearDataModel
SchoolYear "1" --> "1 _schoolYearID" SchoolYearID
Department "1" --> "1 _departmentID" DepartmentID
DepartmentRepositorySpringDataImpl "1" --> "1..*" DepartmentDataModel
ProgrammeRepositorySpringDataImpl "1" --> "1..*" ProgrammeDataModel
Programme "1" --> "1 _departmentID" DepartmentID
Programme "1" -u-> "1 _programmeID" ProgrammeID
US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController .left.> IDepartmentService
US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController ..> IProgrammeEditionEnrolmentService
ProgrammeEditionEnrolmentServiceImpl ..> "1 _peeRepo" "IProgrammeEditionEnrolmentRepository"
US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController ..> IProgrammeService
ProgrammeServiceImpl ..> "1 _pRepo" "IProgrammeRepository"
US26_CountStudentsInProgrammesFromDepartmentInSchoolYearController ..> ISchoolYearService
IDepartmentRepository <|.. DepartmentRepositorySpringDataImpl
IProgrammeRepository <|.. ProgrammeRepositorySpringDataImpl
IProgrammeEditionEnrolmentRepository <|.. ProgrammeEditionEnrolmentRepositorySpringDataImpl
ISchoolYearRepository <|.. SchoolYearRepositorySpringDataImpl
IProgrammeEditionEnrolmentService <|.. ProgrammeEditionEnrolmentServiceImpl

IProgrammeService <|.. ProgrammeServiceImpl

IDepartmentService <|.. DepartmentServiceImpl
DepartmentServiceImpl -left-> "1 _departmentRepo" IDepartmentRepository
ISchoolYearService <|.. SchoolYearServiceImpl
SchoolYearServiceImpl ---> "1 _schoolYearRepo" ISchoolYearRepository

note as n1 #lightgrey
   In this simplified class diagram, value objects (with the exception of IDs)
   are represented as class attributes within the Aggregate Roots
end note
@enduml

@startuml
title Register a Programme, including Study Plan (Backend - Granularity 4)
skinparam sequenceLifeLineBackgroundColor lightblue
skinparam sequenceMessageAlign center
autonumber

participant ":ProgrammeRestController" as RestController <<controller>> #82CFFD
participant ":ProgrammeService" as ProgrammeService <<service>> #F6CBA5
participant ":ProgrammeFactory" as ProgrammeFactory <<factory>>
participant "PIDVO1:ProgrammeID" as ProgrammeID <<component>>
participant "p1:Programme" as Programme <<component>>
participant ":ProgrammeRepositorySpringDataImpl" as ProgrammeRepository <<repository>> #F6F1E7
participant ":StudyPlanService" as StudyPlanService <<service>> #F6CBA5
participant ":StudyPlanRepositorySpringDataImpl" as StudyPlanRepository <<repository>> #F6F1E7
participant ":StudyPlanFactory" as StudyPlanFactory <<factory>>
participant "studyPlan1:StudyPlan" as StudyPlan <<component>>
participant ":DegreeTypeSpringDataImpl" as DegreeTypeRepository <<repository>> #F6F1E7

-> RestController: **(GET) getAllDegreeTypes**()
activate RestController
ref over RestController
  \t\t\t    **Get Degree Type List**
end ref
<-- RestController: degreeTypesList
deactivate RestController
|||
-> RestController: **(GET) getAllDepartments**()
activate RestController
ref over RestController
  \t\t\t    **Get Department List**
end ref
<-- RestController: departmentsList
deactivate RestController
|||
-> RestController: **(GET) getAllTeachers**()
activate RestController
ref over RestController
  \t\t\t    **Get Teacher List**
end ref
<-- RestController: teachersList
deactivate RestController
|||
-> RestController: **(POST) registerProgrammeWithStudyPlan**\n(ProgrammeStudyPlanDTO)
activate RestController
note left of RestController
  Receive as JSON format
  Converted to
  programmeStudyPlanDTO
end note
|||
ref over RestController
    \t\t\t    **Input DTO Transformation Process**:
    \t    programmeStudyPlanDTO is
    \t\t      converted into programmeVOsDTO
end ref
|||
RestController -> ProgrammeService ++: registerProgramme(ProgrammeVOsDTO)

ProgrammeService -> ProgrammeFactory ++: registerProgramme(nameVO, acronymVO, \nquantityOfEctsVO, quantityOfSemestersVO, \ndegreeTypeIDVO, departmentIDVO, teacherIDVO)

ProgrammeFactory -> ProgrammeID **: newProgrammeID(nameVO, acronymVO)
activate ProgrammeID
ProgrammeID --> ProgrammeFactory --: \t PIDVO1
|||
ProgrammeFactory -> Programme **: newProgramme(nameVO, acronymVO, \nquantityOfEctsVO, quantityOfSemestersVO, \ndegreeTypeIDVO, departmentIDVO, teacherIDVO, PIDVO1)
activate Programme

Programme --> ProgrammeFactory --: p1
ProgrammeFactory --> ProgrammeService --: p1

ProgrammeService -> ProgrammeRepository++ :containsOfIdentity(PIDVO1)
ProgrammeRepository -> : existsById(PIDVO1)
ProgrammeRepository <-- : False
ProgrammeRepository --> ProgrammeService-- : False
|||
ProgrammeService -> ProgrammeRepository ++: saveProgramme(p1)

ref over ProgrammeRepository
       \t\t\t\t   **Save programme in Database**:
    \t \t \t Convert domain object to
    \t\t\t\t      DataModel and persist using JPA\t
end ref

ProgrammeRepository --> ProgrammeService --: p1
|||
ProgrammeService --> RestController --: p1
ref over RestController
  \t\t\t**Convert Programme to DTO**

end ref
RestController -> StudyPlanService: registerStudyPlan(programmeName, programmeAcronym, startDate, quantityOfSemesters, degreeTypeId)
activate StudyPlanService
StudyPlanService -> DegreeTypeRepository: ofIdentity(degreeTypeId)
activate DegreeTypeRepository
DegreeTypeRepository -> : findById(degreeTypeIdDM)
DegreeTypeRepository <-- : degreeTypeIdDM
DegreeTypeRepository --> StudyPlanService: degreeType
deactivate DegreeTypeRepository
|||

StudyPlanService -> StudyPlanFactory: createStudyPlan(programmeID, startDate,\ndurationInYears, quantityOfEcts)
activate StudyPlanFactory
StudyPlanFactory -> StudyPlan ++: createStudyPlan(programmeID, startDate,\ndurationInYears, quantityOfEcts)
StudyPlan --> StudyPlanFactory --: studyPlan1
StudyPlanFactory --> StudyPlanService: studyPlan1
deactivate StudyPlanFactory
|||
StudyPlanService -> StudyPlanRepository: save(studyPlan)
activate StudyPlanRepository
ref over StudyPlanRepository
       \t\t\t\t **Save Study Plan in Database**:
    \t \t \t Convert domain object to
    \t\t\t\t     DataModel and persist using JPA\t
end ref
StudyPlanRepository -> : save(studyPlanDM)
StudyPlanRepository <-- : True
StudyPlanRepository --> StudyPlanService: studyPlan
deactivate StudyPlanRepository
|||
ref over StudyPlanService
  \t\t    **Convert Study Plan to DTO**

end ref
StudyPlanService --> RestController: studyPlanResponseDTO1
deactivate StudyPlanService
|||
ref over RestController
  \t\t\t    **Merge Both DTOs Data Into Single DTO**

end ref
<-- RestController: 201 Created \n+ \nprogrammeStudyPlanResponseDTO1\t
deactivate RestController
note left RestController
  Send as
  ProgrammeStudyPlanResponseDTO,
  Converted to JSON
end note
@enduml
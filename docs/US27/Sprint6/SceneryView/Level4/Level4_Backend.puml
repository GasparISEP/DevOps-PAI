@startuml
title Register a Programme, including Study Plan (Backend - Granularity 4)
skinparam sequenceLifeLineBackgroundColor lightblue
skinparam sequenceMessageAlign center
autonumber

participant ":Router" as Router <<component>> #ADD8E6
participant ":DegreeTypeRestController" as DegreeTypeRestController <<controller>> #82CFFD
participant ":DepartmentRestController" as DepartmentRestController <<controller>> #82CFFD
participant ":TeacherRestController" as TeacherRestController <<controller>> #82CFFD
participant ":ProgrammeRestController" as RestController <<controller>> #82CFFD
participant ":ProgrammeService" as ProgrammeService <<service>> #F6CBA5
participant ":StudyPlanAssembler" as StudyPlanAssembler <<mapper>> #E1D5E7
participant "studyPlanCommand:RegisterStudyPlanCommand" as Command <<component>> #FFE599
participant ":StudyPlanService" as StudyPlanService <<service>> #F6CBA5
participant ":StudyPlanRepositorySpringDataImpl" as StudyPlanRepository <<repository>> #F6F1E7
participant ":Programme" as Programme <<component>> #FFE599
participant ":DegreeType" as DegreeType <<component>> #FFE599
participant ":StudyPlanFactory" as StudyPlanFactory <<factory>> #C9DAF8
participant "studyPlan1:StudyPlan" as StudyPlan <<component>> #FFE599
participant ":ProgrammeRepositorySpringDataImpl" as ProgrammeRepository <<repository>> #F6F1E7
participant ":DegreeTypeSpringDataImpl" as DegreeTypeRepository <<repository>> #F6F1E7

-> Router++: **(GET) /degreetypes**
Router -> DegreeTypeRestController: **getAllDegreeTypes**()
activate DegreeTypeRestController
ref over DegreeTypeRestController
  \t\t\t    **Get Degree Type List**
end ref
Router <-- DegreeTypeRestController--: degreeTypesDTOList
<-- Router--: degreeTypesDTOList
|||
-> Router++: **(GET) /departments**
Router -> DepartmentRestController: **getAllDepartments**()
activate DepartmentRestController
ref over DepartmentRestController
  \t\t\t    **Get Department List**
end ref
Router <-- DepartmentRestController: departmentsDTOList
deactivate DepartmentRestController
<- Router--: departmentsDTOList
|||
-> Router++: **(GET) /teachers**
Router -> TeacherRestController: **getAllTeachers**()
activate TeacherRestController
ref over TeacherRestController
  \t\t\t    **Get Teacher List**
end ref
Router <-- TeacherRestController: teachersDTOList
deactivate TeacherRestController
<- Router--: teachersDTOList
|||

/'------------------------------------------
 Register Programme, including Study Plan --'/

-> Router++: (POST) /programmes
note left of Router
  Receive as JSON format
  Converted to
  programmeRequestDTO
end note
Router -> RestController: **registerProgramme**(programmeRequestDTO)
activate RestController
|||
ref over RestController
    \t\t\t    **Input DTO Transformation Process**:
    \t    programmeStudyPlanDTO is
    \t\t      converted into programmeVOsDTO
end ref
|||
RestController -> ProgrammeService ++: **registerProgramme**(ProgrammeVOsDTO)
|||
ref over ProgrammeService
  \t\t\t **RegisterProgramme**\t

end ref

|||
ref over ProgrammeService
  \t\t\t**Convert Programme to DTO**

end ref
ProgrammeService --> RestController --: programmeResponseDTO1
Router <-- RestController --: 201 Created \n+ \nprogrammeResponseDTO1
<-- Router--: 201 Created \n+ \nprogrammeResponseDTO1
/'------------------------------------------
 -------------- Study Plan ----------------'/
|||
-> Router++: **(POST) /programmes/{id}/studyplans**
Router -> RestController ++: **registerStudyPlan** (programmeAcronym, startDate)
RestController -> StudyPlanAssembler ++: **toCommand**(programmeAcronym, startDate)
StudyPlanAssembler -> Command **: createRegisterStudyPlanCommand(programmeId, startDateVO)
activate Command
Command --> StudyPlanAssembler --: studyPlanCommand
StudyPlanAssembler --> RestController --: studyPlanCommand

RestController -> StudyPlanService : **registerStudyPlan**(studyPlanCommand)
activate StudyPlanService
StudyPlanService -> ProgrammeRepository ++: **ofIdentity**(programmeID)
ProgrammeRepository -> : **findById**(programmeIDDM)
ProgrammeRepository <-- : programmeDM
ProgrammeRepository --> StudyPlanService --: programme

StudyPlanService -> DegreeTypeRepository ++: **ofIdentity**(degreeTypeId)
DegreeTypeRepository -> : **findById**(degreeTypeIdDM)
DegreeTypeRepository <-- : degreeTypeDM
DegreeTypeRepository --> StudyPlanService --: degreeType
StudyPlanService -> Programme ++: **programme.getQuantSemesters**()
Programme --> StudyPlanService --: quantityOfSemesters
StudyPlanService -> DegreeType ++: **degreeType.getMaxEcts()**
DegreeType --> StudyPlanService --: maxEcts
|||

StudyPlanService -> StudyPlanFactory: createStudyPlan(programmeID, startDate, quantityOfSemesters, maxEcts)
activate StudyPlanFactory
StudyPlanFactory -> StudyPlan ++: createStudyPlan(programmeID, startDate,\ndurationInYears, maxEcts)
StudyPlan --> StudyPlanFactory --: studyPlan1
StudyPlanFactory --> StudyPlanService: studyPlan1
deactivate StudyPlanFactory
|||
StudyPlanService -> StudyPlanRepository: save(studyPlan)
activate StudyPlanRepository
|||
ref over StudyPlanRepository
       \t\t\t\t **Save Study Plan in Database**:
    \t \t \t Convert domain object to
    \t\t\t\t     DataModel and persist using JPA\t

end ref

StudyPlanRepository --> StudyPlanService: studyPlan
deactivate StudyPlanRepository
|||
ref over StudyPlanService
  \t\t    **Convert Study Plan to DTO**

end ref
StudyPlanService --> RestController: studyPlanDTO1
deactivate StudyPlanService
|||
ref over RestController
  \t\t\t    **Convert DTO to ResponseDTO**\t

end ref
Router <-- RestController: 201 Created \n+ \nstudyPlanResponseDTO1\t
deactivate RestController
<-- Router--: 201 Created \n+ \nstudyPlanResponseDTO1\t
note left Router
  Send as
  ProgrammeStudyPlanResponseDTO,
  Converted to JSON
end note
@enduml
@startuml
!pragma layout smetana

class US27_RegisterAProgrammeInTheSystemIncludingStudyPlan {
    -_programmeRepository: ProgrammeRepository
    +US27_RegisterAProgrammeInTheSystemIncludingTheStudyPlan(ProgrammeRepository programmeRepository)
    +registerProgrammeInTheSystemIncludingStudyPlan(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType, department: Department, programmeDirector: Teacher,
    programmeCourseListFactory: ProgrammeCourseListFactory, courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory): boolean
    +addCourseToStudyPlan(semester: int, curricularYear: int, course: Course, programme: Programme): boolean
}

class "List<Programme>" {}
class "List<CourseInStudyPlan>" {}
class "List<StudyPlan>" {}

class DepartmentID <<ValueObject>> {}
class Acronym <<ValueObject>> {
    -Acronym: String
}
class Name <<ValueObject>> {
    -Name: String
}

class ProgrammeID <<ValueObject>> {}

class quantityOfEcts <<ValueObject>> {
    -quantityOfEcts: int
    +isQuantityOfEctsInvalid(int quantityOfEcts)
    +getquantityOfEcts()
}

class QuantityOfSemesters <<ValueObject>> {
    -quantityOfSemesters: int
    + isQuantityOfSemestersInvalid(int quantityOfSemesters)
    +getQuantityOfSemester()
}

class DurationInYears <<ValueObject>> {
    -_durationInYears: int
    +DurationInYears (int quantSemester)
    +isQuantSemesterValid (int quantSemester): boolean
    +calculateSemestersInYears(int quantSemester): int
    +getDurationInYears(): int
}

package "Programme Aggregate" {
    class "<<root>>\nProgramme" {
         + equals(o: Object): boolean
         + isEquals(programme: Programme): boolean
         + isInDepartment(department: Department): boolean
         + calculateNumberOfYears(quantityOfSemesters: int): int
         + hasThisProgrammeName(name: String): boolean
    }



}
class ProgrammeRepository {
     -_programmeFactory: ProgrammeFactory
     -_programmeRepository: List<Programme>
     -_programmeRepositoryListFactory: ProgrammeRepositoryListFactory
     +ProgrammeRepository(programmeFactory: ProgrammeFactory)
     +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, \ndegreeType: DegreeType; department : Department,programmeDirector: Teacher): boolean
}

interface IProgrammeRepository {
}

class DegreeTypeID <<ValueObject>> {}

class TeacherID <<ValueObject>> {}

class CourseID <<ValueObject>> {}

class StudyPlanID <<ValueObject>> {}

package "StudyPlan Aggregate" {
    class "<<root>>\nStudyPlan" {
        -_initialDate: String
        -_endDate: String
        + addEndDate(String EndDate)
    }
}

class Semester <<ValueObject>> {
    -_semester: int
    +isSemesterValid(int semester): boolean
    +getSemester()
}

class CurricularYear <<ValueObject>> {
        -_curricularYear: int
        +CurricularYear(int curricularYear)
        +isCurricularYearPositive(int curricularYear): boolean
        +getCurricularYear(): int
}

class CourseInStudyPlanID <<ValueObject>> {}

package "CourseInStudyPlan Aggregate" {
    class "<<root>>\nCourseInStudyPlan" {
        +CourseInStudyPlan(semester: int, curricularYear: int, course: Course, programme: Programme)
        +equals(ObjectToCompare: Object): boolean
        +getCourse(): Course
        +getSemester(): int
        +getCurricularYear(): int
        +getProgramme(): Programme
    }


}
interface ICourseInStudyPlanRepository {
}

class CourseInStudyPlanRepository {
}

interface ICourseInStudyPlanFactory{
    +newCourseInStudyPlan(int semester, int curricularYear, \nCourse course, StudyPlan studyPlan): CourseInStudyPlan
}

class CourseInStudyPlanFactoryImpl{
    +newCourseInStudyPlan(int semester, int curricularYear, \nCourse course, StudyPlan studyPlan): CourseInStudyPlan
    }

interface IStudyPlanRepository {
}

class StudyPlanRepository {
}

interface IStudyPlanRepositoryListFactory {
    +newList(): List<CourseInStudyPlan>
}

class StudyPlanRepositoryListFactoryImpl {
    +newList(): List<CourseInStudyPlan>
}

class StudyPlanFactoryImpl {
    +newStudyPlan(String initialDate): StudyPlan
}

interface IStudyPlanFactory {
    +newStudyPlan(String initialDate): StudyPlan
}

interface IProgrammeRepositoryListFactory {
    +newProgrammeArrayList(): ArrayList<Programme>
    +copyProgrammeArrayList(): List<Programme>
}

class ProgrammeRepositoryListFactoryImpl {
    +newProgrammeArrayList: ArrayList<Programme>
}

interface IProgrammeFactory {
    +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, \ndegreeType: DegreeType, department: Department, programmeDirector: Teacher)
}

class ProgrammeFactoryImpl {
    +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, \ndegreeType: DegreeType, department: Department, programmeDirector: Teacher)
}

class CourseInStudyPlanRepositoryListFactoryImpl {}

interface ICourseInStudyPlanRepositoryListFactory {}


US27_RegisterAProgrammeInTheSystemIncludingStudyPlan ..> IProgrammeRepository
US27_RegisterAProgrammeInTheSystemIncludingStudyPlan ..> ICourseInStudyPlanRepository
US27_RegisterAProgrammeInTheSystemIncludingStudyPlan ..> IStudyPlanRepository

IStudyPlanRepository <|.. StudyPlanRepository
IStudyPlanRepository ..> IStudyPlanRepositoryListFactory
IStudyPlanRepositoryListFactory <|.. StudyPlanRepositoryListFactoryImpl
IStudyPlanRepositoryListFactory ..> "List<StudyPlan>" : "<<creates>>"
IStudyPlanRepository --> "List<StudyPlan>"
IStudyPlanRepository ..> IStudyPlanFactory
IStudyPlanFactory <|.. StudyPlanFactoryImpl
IStudyPlanFactory ..> "<<root>>\nStudyPlan" : "<<creates>>"
"List<StudyPlan>" --> "<<root>>\nStudyPlan"
"<<root>>\nStudyPlan" "*" --> "1" ProgrammeID : refers to

ICourseInStudyPlanRepository <|.. CourseInStudyPlanRepository
ICourseInStudyPlanRepository ..> ICourseInStudyPlanRepositoryListFactory
ICourseInStudyPlanRepositoryListFactory <|.. CourseInStudyPlanRepositoryListFactoryImpl
ICourseInStudyPlanRepositoryListFactory ..> "List<CourseInStudyPlan>" : "<<creates>>"
ICourseInStudyPlanRepository --> "List<CourseInStudyPlan>"
ICourseInStudyPlanRepository ..> ICourseInStudyPlanFactory
ICourseInStudyPlanFactory <|.. CourseInStudyPlanFactoryImpl
ICourseInStudyPlanFactory ..> "<<root>>\nCourseInStudyPlan" : "<<creates>>"
"List<CourseInStudyPlan>" --> "<<root>>\nCourseInStudyPlan"
"<<root>>\nCourseInStudyPlan" --> CourseID: refers to
"<<root>>\nCourseInStudyPlan" --> StudyPlanID: refers to
"<<root>>\nCourseInStudyPlan" <-- CourseInStudyPlanID: has


IProgrammeRepository <|.. ProgrammeRepository
IProgrammeRepository ..> IProgrammeRepositoryListFactory
IProgrammeRepositoryListFactory <|.. ProgrammeRepositoryListFactoryImpl
IProgrammeRepositoryListFactory ..> "List<Programme>" : "<<creates>>"
IProgrammeRepository --> "List<Programme>"
IProgrammeRepository ..> IProgrammeFactory
IProgrammeFactory <|.. ProgrammeFactoryImpl
IProgrammeFactory ..> "<<root>>\nProgramme" : "<<creates>>"
"List<Programme>" --> "<<root>>\nProgramme"
"<<root>>\nProgramme" "*" --> "1" TeacherID : "is directed"
"<<root>>\nProgramme" "*" --> "1" DepartmentID : "belongs to"
"<<root>>\nProgramme" "*" --> "1" DegreeTypeID : "has"
"<<root>>\nProgramme" "*" --> "1" quantityOfSemesters : "has"
"<<root>>\nProgramme" "*" --> "1" quantityOfEcts : "has"
"<<root>>\nProgramme" "*" --> "1" Acronym : "has"
"<<root>>\nProgramme" "*" --> "1" Name : "has"
"<<root>>\nProgramme" "*" <-- "1" ProgrammeID : "has"

"<<root>>\nCourseInStudyPlan" "*" --> "1" Semester : "has"
"<<root>>\nCourseInStudyPlan" "*" --> "1" CurricularYear : "has"

"<<root>>\nStudyPlan" "*" <-- "1" StudyPlanID: "has"
"<<root>>\nStudyPlan" "*" <-- "1" DurationInYears: "has"


@enduml
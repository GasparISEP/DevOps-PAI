@startuml

skinparam linetype ortho

class US27_RegisterAProgrammeInTheSystemIncludingStudyPlan {
    -_programmeRepository: ProgrammeRepository
    +US27_RegisterAProgrammeInTheSystemIncludingTheStudyPlan(ProgrammeRepository programmeRepository)
    +registerProgrammeInTheSystemIncludingStudyPlan(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType, department: Department, programmeDirector: Teacher,
    programmeCourseListFactory: ProgrammeCourseListFactory, courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory): boolean
    +addCourseToStudyPlan(semester: int, curricularYear: int, course: Course, programme: Programme): boolean
}

class "List<Programme>" {}
class "List<CourseInStudyPlan>" {}
class "List<StudyPlan>" {}

class DepartmentID <<ValueObject>> {}
class Acronym <<ValueObject>> {
    -Acronym: String
    +Acronym(String acronym)
    +isAcronymInvalid(String acronym)
}
class NameWithNumbersAndSpecialChars <<ValueObject>> {
    -NameWithNumbersAndSpecialChars: String
    +NameWithNumbersAndSpecialChars(String nameWithNumbersAndSpecialChars)
    +isNameInvalid (String name): boolean
    +equals(Object o): boolean
    +getnameWithNumbersAndSpecialChars(): String
}

class ProgrammeID <<ValueObject>> {
    -_progID: String
    +ProgrammeID()
    +getProgrID(): String
    +equals(Object o): boolean
}

class quantEcts <<ValueObject>> {
    -quantityOfEcts: int
    +QuantEcts(int quantityOfEcts)
    +isQuantEctsInvalid(int quantityOfEcts)
    +getQuantEcts()
}

class QuantSemesters <<ValueObject>> {
    -_quantSemesters: int
    +isQuantityOfSemestersValid(int quantityOfSemesters)
    +getQuantityOfSemesters()
}

class DurationInYears <<ValueObject>> {
    -_durationInYears: int
    +DurationInYears (int quantSemester)
    +isQuantSemesterValid (int quantSemester): boolean
    +calculateSemestersInYears(int quantSemester): int
    +getDurationInYears(): int
}

package "Programme Aggregate" {
    class "<<root>>\nProgramme" {
         + Programme(NameWithNumbersAndSpecialChars name, Acronym acronym, QuantEcts quantityOfEcts, \nQuantSemesters quantityOfSemesters, DegreeType_ID degreeTypeID, DepartmentID departmentID, \nTeacherID programmeDirectorID)
         + equals(Object o): boolean
         + isEquals (ProgrammeID programmeID): boolean
         + newProgrammeDirector(TeacherID teacherDirectorID)
         + isInDepartment(departmentID: DepartmentID): boolean
         + getProgrammeID(): ProgrammeID
         + getQuantEcts(): QuantEcts
         + getQuantSemesters(): QuantSemesters
         + hasThisProgrammeName(NameWithNumbersAndSpecialChars name): boolean
         + getAcronym(): Acronym
         + getProgrammeName(): NameWithNumbersAndSpecialChars
         + getDegreeTypeID(): DegreeType_ID
         + getDepartmentID(): DepartmentID
         + getProgrammeDirectorID(): TeacherID
    }



}
class ProgrammeRepository {
     -_programmeFactory: ProgrammeFactory
     -_programmeRepository: List<Programme>
     -_programmeRepositoryListFactory: ProgrammeRepositoryListFactory
     +ProgrammeRepository(programmeFactory: ProgrammeFactory)
     +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, \ndegreeType: DegreeType; department : Department,programmeDirector: Teacher): boolean
}

interface IProgrammeRepository {
    +registerProgramme(): boolean
    +changeProgrammeDirector(): boolean
    +getAllProgrammes(): List<Programme>
    +getProgrammeByName(NameWithNumbersAndSpecialChars name): Optional<Programme>
    +getProgrammeByAcronym(Acronym acronym): Programme
    +getAllProgrammeNames(): List<NameWithNumbersAndSpecialChars>
}

class DegreeType_ID <<ValueObject>> {}

class TeacherID <<ValueObject>> {}

class CourseID <<ValueObject>> {}

class StudyPlanID <<ValueObject>> {
    -_studyPlanID: UUID
    +getStudyPlanId(): UUID
    +equals(Object o): boolean
    +hashCode(): int
    +toString(): String
}

package "StudyPlan Aggregate" {
    class "<<root>>\nStudyPlan" {
        +StudyPlan(ProgrammeID programmeID, Date implementationDate, \nDurationInYears durationInYears)
        +addEndDate(String EndDate)

    }
}

class Date <<ValueObject>> {
        -localDate: LocalDate
        +Date(String date)
        +Date(LocalDate localDate)
        +getLocalDate(): LocalDate
        +now(): Date
        +isBefore(Date other): boolean
        +isAfter(Date other): boolean
        +equals(Object o): boolean
        +hashCode(): int

}

class Semester <<ValueObject>> {
    -_semester: int
    +Semester(int semester)
    +isSemesterValid(int semester): boolean
    +getSemester(): int
    +equals(Object o): boolean
    +hashCode(): int
}

class CurricularYear <<ValueObject>> {
        -_curricularYear: int
        +CurricularYear(int curricularYear)
        +isCurricularYearPositive(int curricularYear): boolean
        +getCurricularYear(): int
}

class CourseInStudyPlanID <<ValueObject>> {
    -_courseInStudyPlanID: UUID
    +CourseInStudyPlanID()
    +getCourseInStudyPlanId(): UUID
    +equals(Object o): boolean
    +hashCode(): int
    +toString(): String
}

package "CourseInStudyPlan Aggregate" {
    class "<<root>>\nCourseInStudyPlan" {
        +CourseInStudyPlan(semester: int, curricularYear: int, course: Course, programme: Programme)
        +equals(ObjectToCompare: Object): boolean
        +getCourse(): Course
        +getSemester(): int
        +getCurricularYear(): int
        +getProgramme(): Programme
    }


}
interface ICourseInStudyPlanRepository {
    +newArrayList(): List<CourseInStudyPlan>
}

class CourseInStudyPlanRepository {
    -_courseInStudyPlanFactory: ICourseInStudyPlanFactory
    -_coursesInStudyPlanList: List<CourseInStudyPlan>
    +CourseInStudyPlanRepository(ICourseInStudyPlanFactory iCourseInStudyPlanFactory, ICourseInStudyPlanListFactory iCourseInStudyPlanListFactory)
    +createCourseInStudyPlan(Semester semester, CurricularYear curricularYear, CourseID courseID, StudyPlanID studyPlanID): boolean
    +getAllCourseInStudyPlanList(): List<CourseInStudyPlan>
    +findByCourseInStudyPlanID(CourseInStudyPlanID courseInStudyPlanID): Optional<CourseInStudyPlan>
}

interface ICourseInStudyPlanFactory{
    +newCourseInStudyPlan_2(Semester semester, CurricularYear curricularYear, \nCourseID courseID, StudyPlanID studyPlanID): CourseInStudyPlan
}

class CourseInStudyPlanFactoryImpl{
    +newCourseInStudyPlan_2(Semester semester, CurricularYear curricularYear, \nCourseID courseID, StudyPlanID studyPlanID): CourseInStudyPlan
    }

interface IStudyPlanRepository {
    +newArrayList(): List<StudyPlan>
}

class StudyPlanRepository {
    -_studyPlanFactory: IStudyPlanFactory
    -_studyplanList: List<StudyPlan>
    +StudyPlanRepository_2(IStudyPlanFactory_2 iStudyPlanFactory_2, IStudyPlanListFactory_2 iStudyPlanListFactory_2)
    +createStudyPlan(ProgrammeID programmeID, Date implementationDate, DurationInYears durationInYears)
    +getAllStudyPlans(): List<StudyPlan>
    +findByStudyPlanID(StudyPlanID studyPlanID): Optional<StudyPlan>
}

interface IStudyPlanListFactory {
    +newList(): List<CourseInStudyPlan>
}

class StudyPlanListFactoryImpl {
    +newArrayList(): List<StudyPlan>
}

class StudyPlanFactoryImpl {
    +newStudyPlan(String initialDate): StudyPlan
}

interface IStudyPlanFactory {
    +newStudyPlan(String initialDate): StudyPlan
}

interface IProgrammeRepositoryListFactory {
    +copyProgrammeArrayList(List<Programme> list): List<Programme>
    +newProgrammeArrayList(): ArrayList<Programme>
}

class ProgrammeRepositoryListFactoryImpl {
    +copyProgrammeArrayList(List<Programme> list): List<Programme>
    +newProgrammeArrayList(): ArrayList<Programme>
}

interface IProgrammeFactory {
    registerProgramme (NameWithNumbersAndSpecialChars name, Acronym acronym, QuantEcts quantityOfEcts, \nQuantSemesters quantityOfSemesters, DegreeType_ID degreeTypeID, Department department, TeacherID programmeDirectorID)
}

class ProgrammeFactoryImpl {
    registerProgramme (NameWithNumbersAndSpecialChars name, Acronym acronym, QuantEcts quantityOfEcts, \nQuantSemesters quantityOfSemesters, DegreeType_ID degreeTypeID, Department department, TeacherID programmeDirectorID)
}

class CourseInStudyPlanListFactoryImpl {
    +newArrayList(): List<CourseInStudyPlan>
}

interface ICourseInStudyPlanRepositoryListFactory {
    +newArrayList(): List<CourseInStudyPlan>
}


US27_RegisterAProgrammeInTheSystemIncludingStudyPlan "1" ..> "1" IProgrammeRepository
US27_RegisterAProgrammeInTheSystemIncludingStudyPlan "1" ..> "1" ICourseInStudyPlanRepository
US27_RegisterAProgrammeInTheSystemIncludingStudyPlan "1" ..> "1" IStudyPlanRepository

IStudyPlanRepository <|.. StudyPlanRepository
IStudyPlanRepository ..> IStudyPlanListFactory
IStudyPlanListFactory <|.. StudyPlanListFactoryImpl
IStudyPlanListFactory ..> "List<StudyPlan>" : "<<creates>>"
IStudyPlanRepository --> "List<StudyPlan>"
IStudyPlanRepository ..> IStudyPlanFactory
IStudyPlanFactory <|.. StudyPlanFactoryImpl
IStudyPlanFactory ..> "<<root>>\nStudyPlan" : "<<creates>>"
"List<StudyPlan>" --> "<<root>>\nStudyPlan"
"<<root>>\nStudyPlan" "*" --> "1" ProgrammeID : refers to

ICourseInStudyPlanRepository <|.. CourseInStudyPlanRepository
ICourseInStudyPlanRepository ..> ICourseInStudyPlanRepositoryListFactory
ICourseInStudyPlanRepositoryListFactory <|.. CourseInStudyPlanListFactoryImpl
ICourseInStudyPlanRepositoryListFactory ..> "List<CourseInStudyPlan>" : "<<creates>>"
ICourseInStudyPlanRepository --> "List<CourseInStudyPlan>"
ICourseInStudyPlanRepository ..> ICourseInStudyPlanFactory
ICourseInStudyPlanFactory <|.. CourseInStudyPlanFactoryImpl
ICourseInStudyPlanFactory ..> "<<root>>\nCourseInStudyPlan" : "<<creates>>"
"List<CourseInStudyPlan>" --> "<<root>>\nCourseInStudyPlan"
"<<root>>\nCourseInStudyPlan" --> CourseID: refers to
"<<root>>\nCourseInStudyPlan" --> StudyPlanID: refers to
"<<root>>\nCourseInStudyPlan" --> CourseInStudyPlanID: has


IProgrammeRepository <|.. ProgrammeRepository
IProgrammeRepository ..> IProgrammeRepositoryListFactory
IProgrammeRepositoryListFactory <|.. ProgrammeRepositoryListFactoryImpl
IProgrammeRepositoryListFactory ..> "List<Programme>" : "<<creates>>"
IProgrammeRepository --> "List<Programme>"
IProgrammeRepository ..> IProgrammeFactory
IProgrammeFactory <|.. ProgrammeFactoryImpl
IProgrammeFactory ..> "<<root>>\nProgramme" : "<<creates>>"
"List<Programme>" --> "<<root>>\nProgramme"
"<<root>>\nProgramme" "*" --> "1" TeacherID : "is directed"
"<<root>>\nProgramme" "*" --> "1" DepartmentID : "belongs to"
"<<root>>\nProgramme" "*" --> "1" DegreeType_ID : "has"
"<<root>>\nProgramme" "*" --> "1" QuantSemesters : "has"
"<<root>>\nProgramme" "*" --> "1" quantEcts : "has"
"<<root>>\nProgramme" "*" --> "1" Acronym : "has"
"<<root>>\nProgramme" "*" --> "1" NameWithNumbersAndSpecialChars : "has"
"<<root>>\nProgramme" "*" --> "1" ProgrammeID : "has"

"<<root>>\nCourseInStudyPlan" "*" --> "1" Semester : "has"
"<<root>>\nCourseInStudyPlan" "*" --> "1" CurricularYear : "has"

"<<root>>\nStudyPlan" "*" --> "1" StudyPlanID: "has"
"<<root>>\nStudyPlan" "*" --> "1" DurationInYears: "has"

"<<root>>\nStudyPlan" "*" --> "1" Date: "Is Implemented at"
"<<root>>\nStudyPlan" "*" --> "0.1" Date: "Ends at"
@enduml
@startuml
!pragma layout smetana

class US27_RegisterAProgrammeInTheSystemIncludingStudyPlan {
    -_programmeRepository: ProgrammeRepository
    +US27_RegisterAProgrammeInTheSystemIncludingTheStudyPlan(ProgrammeRepository programmeRepository)
    +registerProgrammeInTheSystemIncludingStudyPlan(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType, department: Department, programmeDirector: Teacher,
    programmeCourseListFactory: ProgrammeCourseListFactory, courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory): boolean
    +addCourseToStudyPlan(semester: int, curricularYear: int, course: Course, programme: Programme): boolean
}
class Department {
    -_acronym:String
    -_name:String
    -_director:Teacher
    +Department(departmentAcronym: String, departmentName: String)
    +Department(departmentAcronym: String, departmentName: String,director: Teacher)
    +validateName(name: String): void
    +validateAcronym(departmentAcronym: String): void
    +changeDirector(furtherDirector: Teacher): boolean
    +equals(obj: Object): boolean
    +getName(): String
    +getAcronym(): String

}

class Programme {
     -_name: string
     -_acronym: string
     -_quantityOfEcts: int
     -_quantityOfSemesters: int
     -_degreeType: DegreeType
     -_department: Department
     -_programmeDirector: Teacher
     -_courseList: List<Course>
     -_programmeCourseListFactory: ProgrammeCourseListFactory
     -_studyPlan: StudyPlan

     +Programme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType, department: Department, programmeDirector: Teacher, programmeCourseListFactory: ProgrammeCourseListFactory, courseInStudyPlanFactory: CourseInStudyPlanFactory,
     studyPlanListFactory: StudyPlanListFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory)
     + isNameInvalid(name: String): boolean
     + isAcronymInvalid(acronym: String): boolean
     + isQuantityOfEctsInvalid(quantityOfEcts: int)
     + isQuantityOfSemestersInvalid(quantityOfSemesters: int)
     + equals(o: Object): boolean
     + isEquals(programme: Programme): boolean
     + addCourseToAProgramme(course: Course): boolean
     + newProgrammeDirector(teacherDirector: Teacher): void
     + isInDepartment(department: Department): boolean
     + getCourseList(): List<Course>
     + getQuantityOfSemester(): int
     + getQuantityOfEcts(): int
     + getStudyPlan(): StudyPlan
     + calculateNumberOfYears(quantityOfSemesters: int): int
     + hasThisProgrammeName(name: String): boolean
     + getAcronym(): boolean
     + getProgrammeName(): String
     + getDegreeType(): DegreeType
     + getDepartment(): Department
     + getProgrammeDirector(): Teacher
     + getProgrammeCourseListFactory(): ProgrammeCourseListFactory
 }

class ProgrammeRepository {
     -_programmeFactory: ProgrammeFactory
     -_programmeRepository: List<Programme>
     -_programmeRepositoryListFactory: ProgrammeRepositoryListFactory
     +ProgrammeRepository(programmeFactory: ProgrammeFactory)
     +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType; department : Department,programmeDirector: Teacher, programmeCourseListFactory: ProgrammeCourseListFactory,
     courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory): boolean
     +changeProgrammeDirector(programme: Programme,newDirector: Teacher): boolean
     +getAllProgrammes(): List<Programme>
     +getCourseList(programme: Programme): List<Course>
     +getProgrammeByName(name: String): Optional<Programme>
     +getProgrammeByAcronym(acronym: String): Programme
     +getAllProgrammeNames(): List<String>
}

class DegreeType {
    -_name: String
    -_maxEcts: int
    + DegreeType(name: String, maxEcts: int)
    + nameIsInvalid(name: String): boolean
    + maxEctsIsInvalid(maxEcts: int): boolean
    + equals(objectToCompare: Object): boolean
    + get_Name(): String
    + get_maxEcts(): int
}

class Teacher {
     -_acronym:String
     -_name:String
     -_email:String
     -_nif:String
     -_phoneNumber:String
     -_academicBackground:String
     -_address: Address
     -_addressFactory: AddressFactory
     -_department: Department
     -_teacherCareerProgressionList: List<TeacherCareerProgression>
     -_teacherCareerProgressionFactory: TeacherCareerProgressionFactory
     +Teacher(acronym: String, name: String, email: String, nif: String, phoneNumber: String, academicBackground: String, street: String, postalCode: String, location: String,
     country: String, addressFactory: AddressFactory, date: String, category: TeacherCategory, workingPercentage: int, department: Department, teacherCareerProgressionFactory: TeacherCareerProgressionFactory)
     +validateAcronym(teacherAcronym: String): void
     +validateName(name: String): void
     +validateEmail(email: String): void
     +validateNif(nif: String): void
     +validatePhoneNumber(phoneNumber: String): void
     +validateAcademicBackground(academicBackground: String): void
     +hasSameAcronym(teacher: Teacher): boolean
     +hasSameNif(teacher: Teacher): boolean
     +isInDepartment(department: Department): boolean
     +hasThisNIF(NIF: String): boolean
     +updateWorkingPercentageInTeacherCareerProgression(date: String, workingPercentage: int): boolean
     +updateTeacherCategoryInTeacherCareer(date: String, teacherCategory: TeacherCategory): boolean
     +getLastTeacherCareerProgression(): TeacherCareerProgression
}

class Course {
    -_name: String
    -_acronym: String
    -_quantityCreditsEcts: double
    -_durationCourseInSemester: int

    +Course(name: String, acronym: String, quantityCreditsECTS: double, durationCourseInSemester: int)
    +isValidName(courseName: String): boolean
    +isValidAcronym(courseAcronym: String) boolean
    +isValidQuantityCreditsEcts(quantityCreditsEcts: double): boolean
    +isValidDurationCourseInSemester(durationCourseInSemester: int): boolean
    +hasMoreThanOneDecimalPlace(value: double): boolean
    +equals(objectToCompare: Object): boolean
    +getQuantityCreditsEcts(): double
    +getDurationInSemester(): int
    +getName(): String
    +getAcronym(): String
}


class StudyPlan {
    -_courseInStudyPlanFactory: CourseInStudyPlanFactory
    -_courseFactory: CourseFactory
    -_studyPlanListFactory: List<CourseInStudyPlan>
    + StudyPlan(courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory, courseFactory: CourseFactory)
    + addCourseToStudyPlan(semester: int, curricularYear: int, course: Course, programme: Programme): boolean
    + isCourseOrProgrammeInvalid(course: Course, programme: Programme): boolean
    + isCourseInStudyPlan(course: Course): boolean
    + addAnnualCourse(semester: int, curricularYear: int, course: Course, programme: Programme): boolean
    + isEctsLimitExceeded(curricularYear: int, semester: int, courseInStudyPlan: CourseInStudyPlan): boolean
}

class CourseInStudyPlan {
    -_course: Course
    -_semester: int
    -_curricularYear: int
    -_programme: Programme
    +CourseInStudyPlan(semester: int, curricularYear: int, course: Course, programme: Programme)

    +equals(ObjectToCompare: Object): boolean
    +getCourse(): Course
    +getSemester(): int
    +getCurricularYear(): int
    +getProgramme(): Programme
    +isSemesterInvalid(semester: int): boolean
    +isCurricularYearInvalid(curricularYear: int, numberOfYears: int): boolean
}

class ProgrammeCourseListFactoryImpl {
    +createCourseList(): List<Course>
}

interface ProgrammeCourseListFactory {
    +createCourseList(): List<Course>
}

interface CourseInStudyPlanFactory{
    +newCourseInStudyPlan(semester: int, curricularYear: int,
    course: Course, programme: Programme): CourseInStudyPlan
}

class CourseInStudyPlanFactoryImpl{
    +newCourseInStudyPlan(semester: int, curricularYear: int,
    course: Course, programme: Programme): CourseInStudyPlan
}

interface StudyPlanListFactory {
    +newList(): List<CourseInStudyPlan>
}

class StudyPlanListFactoryImpl {
    +newList(): List<CourseInStudyPlan>
}

class StudyPlanFactoryImpl {
    +newStudyPlan(courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory,
    courseFactory: CourseFactory): StudyPlan
}

interface StudyPlanFactory {
    +newStudyPlan(courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory,
    courseFactory: CourseFactory): StudyPlan
}

interface ProgrammeRepositoryListFactory {
    +newProgrammeArrayList(): ArrayList<Programme>
    +copyProgrammeArrayList(): List<Programme>
}

class ProgrammeRepositoryListFactoryImpl {
    +newProgrammeArrayList: ArrayList<Programme>
}

interface ProgrammeFactory {
    +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType, department: Department, programmeDirector: Teacher, programmeCourseListFactory: ProgrammeCourseListFactory,
    courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory)
}

class ProgrammeFactoryImpl {
    +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType, department: Department, programmeDirector: Teacher, programmeCourseListFactory: ProgrammeCourseListFactory,
    courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory)
}

US27_RegisterAProgrammeInTheSystemIncludingStudyPlan ..> ProgrammeRepository
ProgrammeRepository ..> ProgrammeRepositoryListFactory
ProgrammeRepositoryListFactory <|.. ProgrammeRepositoryListFactoryImpl
ProgrammeRepository --> Programme

Programme --> DegreeType
Programme --> Department
Programme --> Teacher

Programme ..> ProgrammeCourseListFactory
ProgrammeCourseListFactory <|.. ProgrammeCourseListFactoryImpl


Programme ..> StudyPlanFactory
StudyPlanFactoryImpl ..|> StudyPlanFactory
StudyPlanFactory ..> StudyPlan : "<<creates>>"
Programme --> StudyPlan

StudyPlan ..> CourseInStudyPlanFactory
CourseInStudyPlanFactory <|.. CourseInStudyPlanFactoryImpl
CourseInStudyPlanFactory ..> CourseInStudyPlan : "<<creates>>"
StudyPlan --> CourseInStudyPlan

Course <-- CourseInStudyPlan
StudyPlan ..> Course
Programme --> Course

StudyPlan ..> StudyPlanListFactory
StudyPlanListFactory <|.. StudyPlanListFactoryImpl

ProgrammeRepository ..> ProgrammeFactory
ProgrammeFactory <|.. ProgrammeFactoryImpl
ProgrammeFactory ..> Programme : "<<creates>>"

@enduml
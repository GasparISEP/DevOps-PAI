@startuml
title: US19: As an ASC, I want to create a course edition\n(Class Diagram - Full View)\nSprint 6

' ========== SETTINGS ==========
skinparam classBackgroundColor #E1F5FE
skinparam titleFontSize 18
skinparam linetype ortho
skinparam LegendBackgroundColor white
skinparam LegendBorderColor white
skinparam classFontSize 14
skinparam shadowing true
skinparam rectangle {
  RoundCorner 20
}
skinparam classBorderColor Black
left to right direction

package "REST Controller Layer" #F5EEF8 {
  class CourseEditionRestController {
    +createCourseEdition(dto:\n CourseEditionDTO): ResponseEntity
    +getAllDegreeTypes(): List<DegreeTypeDTO>
    +getProgrammesByDegreeTypeID(id)
    +getCoursesInStudyPlanByProgrammeID(id)
    +getProgrammeEditionsByProgrammeID(id)
  }
}

package "Service Layer" {
  interface "<<interface>>\nICreateCourseEditionService" as ICreateCourseEditionService
  class CreateCourseEditionServiceImpl {
    +createAndSaveCourseEdition(courseInStudyPlanID: CourseInStudyPlanID,\n programmeEditionID: ProgrammeEditionID): CourseEdition
    +getAllDegreeTypes(): List<DegreeType>
    +getProgrammesByDegreeTypeID(id: DegreeTypeID):\n List<Programme>
    +getStudyPlansByProgrammeID(programmeID: ProgrammeID):\n List<StudyPlan>
    +getLatestStudyPlanIDByProgrammeID(programmeID: ProgrammeID):\n StudyPlanID
    +getCoursesByStudyPlanId(studyPlanID: StudyPlanID):\n List<CourseInStudyPlan>
    +getProgrammeEditionsByProgrammeID(programmeID: ProgrammeID):\n List<ProgrammeEdition>
  }
}

package "Assembler / DTO" {
  interface "<<interface>>\nICourseEditionAssembler" as ICourseEditionAssembler
  class CourseEditionAssemblerImpl {
    +toDomain(dto: CourseEditionDTO): CourseEdition
    +toDTO(domain: CourseEdition): CourseEditionDTO
  }

  class CourseEditionRequestDTO {
    - programmeName : String
    - programmeAcronym : String
    - schoolYearID : UUID
    - courseAcronym : String
    - courseName : String
    - studyPlanImplementationDate : LocalDate
  }

  class CourseEditionResponseDTO {
    - courseEditionID : String
    - programmeName : String
    - programmeAcronym : String
    - schoolYearID : UUID
    - courseAcronym : String
    - courseName : String
    - studyPlanImplementationDate : LocalDate
  }
}

package "Commands" {
class CreateCourseEditionCommand {
    - programmeName : String
    - programmeAcronym : String
    - schoolYearID : UUID
    - courseAcronym : String
    - courseName : String
    - studyPlanImplementationDate : LocalDate
}
}

package "Domain Layer" {
  class CourseEdition {
    -identity: CourseEditionID
    -programmeEditionID: ProgrammeEditionID
    -courseInStudyPlanID: CourseInStudyPlanID
  }

  class CourseEditionID
  class ProgrammeEditionID
  class CourseInStudyPlanID
}

package "Factory Layer" {
  interface "<<interface>>\nICourseEditionFactory" as ICourseEditionFactory
  class CourseEditionFactoryImpl {
    +createCourseEditionToDomain(courseInStudyPlanID,\n programmeEditionID): CourseEdition
  }
}

package "Mapper Layer" {
  interface "<<interface>>\nICourseEditionMapper" as ICourseEditionMapper
  class CourseEditionMapperImpl {
    +toDataModel(domain: CourseEdition): CourseEditionDataModel
    +toDomain(data: CourseEditionDataModel): CourseEdition
  }

  interface "<<interface>>\nICourseEditionIDMapper" as ICourseEditionIDMapper
  interface "<<interface>>\nIProgrammeEditionIDMapper" as IProgrammeEditionIDMapper
  interface "<<interface>>\nICourseInStudyPlanIDMapper" as ICourseInStudyPlanIDMapper

  class CourseEditionIDMapperImpl
  class ProgrammeEditionIDMapperImpl
  class CourseInStudyPlanIDMapperImpl
}

package "Persistence Layer" {
  class CourseEditionDataModel
  class CourseEditionIDDataModel
}

package "Repository Interfaces" {
  interface "<<interface>>\nICourseEditionRepository" as ICourseEditionRepository

  interface "<<interface>>\nIDegreeTypeRepository" as IDegreeTypeRepository

  interface "<<interface>>\nIProgrammeRepository" as IProgrammeRepository


  interface "<<interface>>\nIStudyPlanRepository" as IStudyPlanRepository

  interface "<<interface>>\nICourseInStudyPlanRepository" as ICourseInStudyPlanRepository

  interface "<<interface>>\nIProgrammeEditionRepository" as IProgrammeEditionRepository

  interface "<<interface>>\nICourseEditionRepositorySpringData" as ICourseEditionRepositorySpringData
  }

  package "Repository Implementations"{


  class CourseEditionRepositoryImpl {
    +containsOfIdentity(id: CourseEditionID): boolean
    +save(courseEdition: CourseEdition): CourseEdition
  }

  class DegreeTypeRepositoryImpl {
    +getAllDegreeTypes(): List<DegreeType>
  }

  class ProgrammeRepositoryImpl {
    +findAll(): List<Programme>
  }

  class StudyPlanRepositoryImpl {
    +findAll(): List<StudyPlan>
  }

  class CourseInStudyPlanRepositoryImpl {
    +findAll(): List<CourseInStudyPlan>
  }

  class ProgrammeEditionRepositoryImpl {
    +getProgrammeEditionsByProgrammeID(programmeID:\n ProgrammeID): List<ProgrammeEdition>
  }

  class CourseEditionRepositorySpringDataImpl {
    +save(data: CourseEditionDataModel): CourseEditionDataModel
  }
}

' Relationships
CourseEditionRestController --> ICreateCourseEditionService
ICreateCourseEditionService <|.. CreateCourseEditionServiceImpl

CourseEditionRestController --> ICourseEditionAssembler
ICourseEditionAssembler <|.. CourseEditionAssemblerImpl

CreateCourseEditionServiceImpl --> ICourseEditionFactory
ICourseEditionFactory <|.. CourseEditionFactoryImpl

CourseEditionRepositorySpringDataImpl --> ICourseEditionMapper
ICourseEditionMapper <|.. CourseEditionMapperImpl

CreateCourseEditionServiceImpl --> ICourseEditionRepository
ICourseEditionRepository <|.. CourseEditionRepositoryImpl
ICourseEditionRepository <|.. CourseEditionRepositorySpringDataImpl

CreateCourseEditionServiceImpl --> IDegreeTypeRepository
IDegreeTypeRepository <|.. DegreeTypeRepositoryImpl

CreateCourseEditionServiceImpl --> IProgrammeRepository
IProgrammeRepository <|.. ProgrammeRepositoryImpl

CreateCourseEditionServiceImpl --> ICourseInStudyPlanRepository
ICourseInStudyPlanRepository <|.. CourseInStudyPlanRepositoryImpl

CreateCourseEditionServiceImpl --> IProgrammeEditionRepository
IProgrammeEditionRepository <|.. ProgrammeEditionRepositoryImpl

CreateCourseEditionServiceImpl --> IStudyPlanRepository
IStudyPlanRepository <|.. StudyPlanRepositoryImpl

CourseEditionMapperImpl --> ICourseEditionIDMapper
CourseEditionMapperImpl --> IProgrammeEditionIDMapper
CourseEditionMapperImpl --> ICourseInStudyPlanIDMapper

ICourseInStudyPlanIDMapper <|.. CourseInStudyPlanIDMapperImpl
IProgrammeEditionIDMapper <|.. ProgrammeEditionIDMapperImpl

ICourseEditionIDMapper <|.. CourseEditionIDMapperImpl


CourseEditionMapperImpl --> CourseEditionDataModel
CourseEditionMapperImpl --> CourseEdition

CourseEdition --> CourseEditionID
CourseEdition --> ProgrammeEditionID
CourseEdition --> CourseInStudyPlanID
CourseEditionDataModel --> CourseEditionIDDataModel

CourseEditionRepositorySpringDataImpl --> CourseEditionDataModel

ICourseEditionRepositorySpringData <|.. CourseEditionRepositorySpringDataImpl

CourseEditionRestController --> CourseEditionRequestDTO
CourseEditionRestController --> CourseEditionResponseDTO
CourseEditionAssemblerImpl --> CourseEditionRequestDTO
CourseEditionAssemblerImpl --> CourseEditionResponseDTO

ICourseEditionAssembler -> CreateCourseEditionCommand
CourseEditionRestController ..> CreateCourseEditionCommand

@enduml

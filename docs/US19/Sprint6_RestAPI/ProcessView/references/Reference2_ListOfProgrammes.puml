@startuml
title Detailed Flow: Retrieve Programmes by Degree Type ID \n(GET /programmes/{degreeTypeID})
skinparam sequence {
    LifeLineBorderColor Grey
    LifeLineBackgroundColor HoneyDew
}
skinparam defaultTextAlignment center
skinparam shadowing true
participant "<<component>>\n:Router" as Router #E1F5FE
participant "<<component>>\n:ProgrammeRestController\n(REST Controller)" as Controller #E1F5FE
participant "<<component>>\n:IProgrammeService\n(Service)" as Service #E1F5FE
participant "<<component>>\n:IProgrammeRepository\n(Repository)" as Repository #E1F5FE
participant "<<component>>\n:IProgrammeAssembler\n(Assembler)" as Assembler #E1F5FE
database "Database" as DB #E1F5FE

-> Router: GET /programmes/{degreeTypeID}
activate Router

Router -> Controller: getProgrammesByDegreeTypeID(degreeTypeID)
activate Controller

Controller -> Service: getProgrammeIDDTOsByDegreeTypeID(degreeTypeID)
activate Service

Service -> Repository: findAll()
activate Repository

Repository -> DB: SELECT * FROM programmes
activate DB
DB --> Repository: List<ProgrammeDataModel>
deactivate DB

Repository --> Service: List<Programme>
deactivate Repository

loop for each Programme
    alt if hasThisDegreeTypeID(id)
        Service -> Assembler: toDTO(programme.getProgrammeID())
        activate Assembler
        Assembler --> Service: ProgrammeIDDTO
        deactivate Assembler
    end
end

Service --> Controller: List<ProgrammeIDDTO>
deactivate Service

Controller --> Router: 200 OK + List<ProgrammeIDDTO> (JSON)
deactivate Controller

<-- Router: Response
deactivate Router

@enduml

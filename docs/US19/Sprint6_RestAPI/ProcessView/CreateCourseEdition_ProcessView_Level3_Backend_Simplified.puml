@startuml
title US19: Create a Course Edition\n(Process View - Level 3: Core Backend Flow)

autonumber

skinparam {
  ActivityPadding 2
  ActivityMargin 2
  BoxPadding 2
}
skinparam sequence {
    LifeLineBorderColor Grey
    LifeLineBackgroundColor HoneyDew
}
skinparam defaultTextAlignment center
skinparam shadowing true

participant "<<component>>\n:Router" as Router #E1F5FE
participant "<<component>>\n:CourseEditionRestController\n(REST Controller)" as Controller #E1F5FE
participant "<<component>>\n:ICourseEditionAssembler\n(Assembler)" as Assembler #E1F5FE
participant "<<component>>\n:ICreateCourseEditionService\n(Service)" as Service #E1F5FE
participant "<<component>>\n:ICourseEditionFactory\n(Factory)" as Factory #E1F5FE
participant "<<component>>\n:ICourseEditionRepository\n(Repository)" as Repository #E1F5FE
participant "<<component>>\n:ICourseEditionServiceAssembler\n(Assembler)" as SAssembler #E1F5FE
database "Database" as DB #E1F5FE

== Step 1: HTTP POST Request ==

-> Router: POST /courseeditions\nwith CourseEditionRequestDTO (JSON)
activate Router

Router -> Controller: createCourseEdition(requestDTO)
activate Controller

note over Controller #EEEEEE
Spring converts JSON into
CourseEditionRequestDTO
Controller calls assembler.toCommand()
to convert to CreateCourseEditionCommand
end note

Controller -> Assembler: toCommand(requestDTO)
activate Assembler
Assembler --> Controller: CreateCourseEditionCommand
deactivate Assembler


== Step 2: Call Service ==

Controller -> Service: createCourseEditionAndReturnDTO\n(courseInStudyPlanID, programmeEditionID)
activate Service


Service -> Factory: createCourseEditionToDomain\n(courseInStudyPlanID, programmeEditionID)
activate Factory

Factory --> Service: CourseEdition (domain object)
deactivate Factory

Service -> Repository: containsOfIdentity(courseEdition.identity())
activate Repository
Repository --> Service: false (not exists)
deactivate Repository

Service -> Repository: save(courseEdition)
activate Repository

Repository -> DB: INSERT course_edition data
activate DB
DB --> Repository: success
deactivate DB

Repository --> Service: saved CourseEdition
deactivate Repository

Service --> Controller: CourseEdition
deactivate Service

== Step 3: Assemble Response DTO ==

alt if CourseEdition is not null
    Controller -> SAssembler: toResponseDTO(courseEdition)
    activate SAssembler
    SAssembler --> Controller: CourseEditionResponseDTO
    deactivate SAssembler

    Controller --> Router: 201 Created + CourseEditionResponseDTO (JSON)

end

deactivate Controller

<-- Router: Response
deactivate Router

@enduml

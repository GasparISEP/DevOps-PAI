@startuml
title US19: As an ASC, I want to create a Course Edition\n(Scenario View - Level 4: Detailed Backend Flow)

autonumber

skinparam {
  ActivityPadding 2
  ActivityMargin 2
  BoxPadding 2
}
skinparam sequence {
    LifeLineBorderColor Grey
    LifeLineBackgroundColor HoneyDew
}
skinparam defaultTextAlignment center
skinparam shadowing true

participant "<<component>>\n:Router" as Router #E1F5FE
participant "<<component>>\n:CourseEditionRestController\n(REST Controller)" as Controller #E1F5FE
participant "<<component>>\n:ICourseEditionAssembler\n(Assembler)" as Assembler #E1F5FE
participant "<<component>>\n:ICreateCourseEditionService\n(Service)" as Service #E1F5FE
participant "<<component>>\n:ICourseEditionFactory\n(Factory)" as Factory #E1F5FE
participant "<<component>>\n:CourseEditionRepositoryImpl\n(Repository Custom)" as RepositoryImpl #E1F5FE
participant "<<component>>\n:CourseEditionMapper\n(Mapper)" as Mapper #E1F5FE
participant "<<component>>\n:ICourseEditionRepositorySpringData\n(Spring Data Repository)" as RepositorySpringData #E1F5FE
database "Database" as DB #E1F5FE
participant "<<component>>\n:ICourseEditionServiceAssembler\n(Response Assembler)" as SAssembler #E1F5FE

== Step 1: HTTP POST Request ==

-> Router: POST /courseeditions (JSON)
activate Router
note over Router #EEEEEE
Spring converts JSON into
CourseEditionRequestDTO
end note
Router -> Controller: createCourseEdition(requestDTO)
activate Controller

note over Controller #EEEEEE
Controller calls assembler.toCommand()
to convert to CreateCourseEditionCommand
end note

Controller -> Assembler: toCommand(requestDTO)
activate Assembler
Assembler --> Controller: CreateCourseEditionCommand
deactivate Assembler


== Step 2: Call Service ==

Controller -> Service: createCourseEditionAndReturnDTO(courseInStudyPlanID, programmeEditionID)
activate Service

Service -> Factory: createCourseEditionToDomain(courseInStudyPlanID, programmeEditionID)
activate Factory

Factory --> Service: CourseEdition (domain object)
deactivate Factory

Service -> RepositoryImpl: containsOfIdentity(courseEdition.identity())
activate RepositoryImpl
RepositoryImpl --> Service: false (not exists)
deactivate RepositoryImpl

Service -> RepositoryImpl: save(courseEdition)
activate RepositoryImpl

RepositoryImpl -> Mapper: toDataModel(courseEdition)
activate Mapper
Mapper --> RepositoryImpl: courseEditionDataModel
deactivate Mapper

RepositoryImpl -> RepositorySpringData: save(courseEditionDataModel)
activate RepositorySpringData
RepositorySpringData -> DB: INSERT INTO course_edition
activate DB
DB --> RepositorySpringData: success + saved dataModel
deactivate DB
RepositorySpringData --> RepositoryImpl: courseEditionDataModel saved
deactivate RepositorySpringData

RepositoryImpl -> Mapper: toDomain(courseEditionDataModel)
activate Mapper
Mapper --> RepositoryImpl: courseEdition saved
deactivate Mapper

RepositoryImpl --> Service: courseEdition saved
deactivate RepositoryImpl


== Step 3: Assemble Response DTO ==

alt if CourseEdition is not null
    Service -> SAssembler: toResponseDTO(courseEdition)
    activate SAssembler
    SAssembler --> Service: CourseEditionResponseDTO
    deactivate SAssembler
    Service --> Controller: CourseEditionResponseDTO
    deactivate Service
    Controller --> Router: 201 Created + CourseEditionResponseDTO (JSON)
end

deactivate Controller

<-- Router: Response
deactivate Router

@enduml

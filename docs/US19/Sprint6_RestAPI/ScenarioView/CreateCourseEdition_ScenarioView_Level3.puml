@startuml
title: US19: As an ASC, I want to create a course edition\n(Scenario View - Level 3 (Backend focus))\n(createCourseEdition functionality (POST) only)


' ========== SETTINGS ==========
skinparam classBackgroundColor #E1F5FE
skinparam titleFontSize 18
skinparam linetype ortho
skinparam LegendBackgroundColor white
skinparam LegendBorderColor white
skinparam classFontSize 14
skinparam shadowing true
skinparam rectangle {
  RoundCorner 20
}
skinparam classBorderColor Black
left to right direction

package "REST Controller Layer" #F5EEF8 {
  class CourseEditionRestController {
    +createCourseEdition(dto:\n CourseEditionDTO): ResponseEntity
  }
}

package "Service Layer" {
  interface "<<interface>>\nICreateCourseEditionService" as ICreateCourseEditionService
  class CreateCourseEditionServiceImpl {
    +createAndSaveCourseEdition\n(courseInStudyPlanID: CourseInStudyPlanID,\n programmeEditionID: ProgrammeEditionID):\n CourseEdition
  }
}

package "Assembler / DTO" {
  interface "<<interface>>\nICourseEditionAssembler" as ICourseEditionAssembler
  class CourseEditionAssemblerImpl {
    +toCommand(dto:\n CourseEditionRequestDTO): CourseEdition
    +toResponseDTO(domain:\n CourseEdition): CourseEditionDTO
  }

  class CourseEditionRequestDTO {
    - programmeName : String
    - programmeAcronym : String
    - schoolYearID : UUID
    - courseAcronym : String
    - courseName : String
    - studyPlanImplementationDate : LocalDate
  }

  class CourseEditionResponseDTO {
    - courseEditionID : String
    - programmeName : String
    - programmeAcronym : String
    - schoolYearID : UUID
    - courseAcronym : String
    - courseName : String
    - studyPlanImplementationDate : LocalDate
  }
}

package "Commands" {
class CreateCourseEditionCommand {
    - programmeName : String
    - programmeAcronym : String
    - schoolYearID : UUID
    - courseAcronym : String
    - courseName : String
    - studyPlanImplementationDate : LocalDate
}
}

package "Domain Layer" {
  class CourseEdition {
    -identity: CourseEditionID
    -programmeEditionID: ProgrammeEditionID
    -courseInStudyPlanID: CourseInStudyPlanID
  }
}

package "Factory Layer" {
  interface "<<interface>>\nICourseEditionFactory" as ICourseEditionFactory
  class CourseEditionFactoryImpl {
    +createCourseEditionToDomain\n(courseInStudyPlanID: CourseInStudyPlanID,\n programmeEditionID:ProgrammeEditionID):\n CourseEdition
  }
}

package "Mapper Layer" {
  interface "<<interface>>\nICourseEditionMapper" as ICourseEditionMapper
  class CourseEditionMapperImpl {
    +toDataModel(domain:\n CourseEdition): CourseEditionDataModel
    +toDomain(data:\n CourseEditionDataModel): CourseEdition
  }

  interface "<<interface>>\nICourseEditionIDMapper" as ICourseEditionIDMapper
  interface "<<interface>>\nIProgrammeEditionIDMapper" as IProgrammeEditionIDMapper
  interface "<<interface>>\nICourseInStudyPlanIDMapper" as ICourseInStudyPlanIDMapper

  class CourseEditionIDMapperImpl
  class ProgrammeEditionIDMapperImpl
  class CourseInStudyPlanIDMapperImpl
}

package "Persistence Layer" {
  class CourseEditionDataModel
  class CourseEditionIDDataModel
}

package "Repository Interfaces" {
  interface "<<interface>>\nICourseEditionRepository" as ICourseEditionRepository

'  interface "<<interface>>\nIDegreeTypeRepository" as IDegreeTypeRepository

'  interface "<<interface>>\nIProgrammeRepository" as IProgrammeRepository


 ' interface "<<interface>>\nIStudyPlanRepository" as IStudyPlanRepository

'  interface "<<interface>>\nICourseInStudyPlanRepository" as ICourseInStudyPlanRepository

'  interface "<<interface>>\nIProgrammeEditionRepository" as IProgrammeEditionRepository

  interface "<<interface>>\nICourseEditionRepositorySpringData" as ICourseEditionRepositorySpringData
  }

  package "Repository Implementations"{


  class CourseEditionRepositoryImpl {
    +containsOfIdentity(id:\n CourseEditionID): boolean
    +save(courseEdition:\n CourseEdition): CourseEdition
  }



  class CourseEditionRepositorySpringDataImpl {
    +save(data: CourseEditionDataModel):\n CourseEditionDataModel
  }
}

note top of CourseEditionRestController
This diagram shows only the essential components involved
in the creation (POST) of a CourseEdition.
It excludes the components used for auxiliary GET requests,
as this is a focused ("zoomed-in") view on the creation action.
end note

' Relationships
CourseEditionRestController --> ICreateCourseEditionService
ICreateCourseEditionService <|.. CreateCourseEditionServiceImpl

CourseEditionRestController --> ICourseEditionAssembler
ICourseEditionAssembler <|.. CourseEditionAssemblerImpl

CreateCourseEditionServiceImpl --> ICourseEditionFactory
ICourseEditionFactory <|.. CourseEditionFactoryImpl

CourseEditionRepositorySpringDataImpl --> ICourseEditionMapper
ICourseEditionMapper <|.. CourseEditionMapperImpl

CreateCourseEditionServiceImpl --> ICourseEditionRepository
ICourseEditionRepository <|.. CourseEditionRepositoryImpl
ICourseEditionRepository <|.. CourseEditionRepositorySpringDataImpl

'CreateCourseEditionServiceImpl --> IDegreeTypeRepository

'CreateCourseEditionServiceImpl --> IProgrammeRepository

'CreateCourseEditionServiceImpl --> ICourseInStudyPlanRepository

'CreateCourseEditionServiceImpl --> IProgrammeEditionRepository

'CreateCourseEditionServiceImpl --> IStudyPlanRepository

CourseEditionMapperImpl ..> IProgrammeEditionIDMapper
CourseEditionMapperImpl ..> ICourseInStudyPlanIDMapper

ICourseInStudyPlanIDMapper <|.. CourseInStudyPlanIDMapperImpl
IProgrammeEditionIDMapper <|.. ProgrammeEditionIDMapperImpl

ICourseEditionIDMapper <|.. CourseEditionIDMapperImpl


CourseEditionMapperImpl --> CourseEditionDataModel
CourseEditionMapperImpl --> CourseEdition
CourseEditionRepositoryImpl --> CourseEdition
CourseEditionRepositorySpringDataImpl --> CourseEdition


CourseEditionDataModel --> CourseEditionIDDataModel

CourseEditionMapperImpl ..> ICourseEditionIDMapper

ICourseEditionRepositorySpringData <|.. CourseEditionRepositorySpringDataImpl

'CourseEditionRestController --> CourseEditionRequestDTO
'CourseEditionRestController --> CourseEditionResponseDTO
CourseEditionAssemblerImpl --> CourseEditionRequestDTO
CourseEditionAssemblerImpl --> CourseEditionResponseDTO

ICourseEditionAssembler -> CreateCourseEditionCommand
CourseEditionRestController ..> CreateCourseEditionCommand

@enduml

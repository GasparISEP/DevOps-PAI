@startuml
!pragma layout smetana

class US12_ChangeProgrammeDirectorInSystem {
    -_programmeList: List<Programme>
    +US_iWantToChangeProgrammeDirectorOfProgrammeController(programmeList : ProgrammeList)
    +changeProgrammeDirector(programme : Programme, teacher : Teacher)
}

class Programme {
     - name: string
     - acronym: string
     - quantityOfEcts: int
     - quantityOfSemesters: int
     - degreeType: DegreeType
     - department: Department
     - programmeDirector: Teacher
     -_courseList: List <Course>
     -_programmeCourseListFactory: ProgrammeCourseListFactory
     -StudyPlan: _studyPlan

     + equals()
     +isEquals(programme: Programme)
     + addCourseToProgramme (course: Course)
     + newProgrammeDirector(teacherDirector: Teacher)
     +isStudentEnrolled(student: Student)
     +isInDepartment(department: Department)
     +getCourseList()
     +getQuantityOfSemester()
     +getQuantityOfEcts()
     +getAcronym()
     +getProgrammeName()
     +getDegreeType()
     +getDepartment()
     +getProgrammeDirector()
     +getPprogrammeCourseListFactory()
     +calculateNumberOfYears(quantityOfSemesters : int)
     +hasThisProgrammeName(String : name)
 }

class ProgrammeRepository {
     -_programmeFactory: ProgrammeFactoryImpl
     -_programmeList: List<Programme>
     -_programmeListArrayListFactory: ProgrammeRepositoryListImpl
     +registerProgramme(name : String, acronym : String, quantityOfEcts : int, quantityOfSemesters : int, degreeType : DegreeType, department : Department, programmeDirector : Teacher, programmeCourseListFactory : ProgrammeCourseListFactory,
     courseInStudyPlanFactory : CourseInStudyPlanFactory, studyPlanArrayListFactory : StudyPlanArrayListFactory, studyPlanFactory : StudyPlanFactory, courseFactory : CourseFactory)
     +changeProgrammeDirector(Programme programme, Teacher newDirector)
     +getAllProgrammes()
     +getCourseList(programme: Programme)
     +getProgrammeByName(String : name)
     +getProgrammeByAcronym(String : acronym)
     +getAllProgrammeNames()
}

class Teacher {
     -_acronym:String
     -_name:String
     -_email:String
     -_nif:String
     -_phoneNumber:String
     -_academicBackground:String
     -_address
     -_addressFactory
     -_department
     -_teacherCareerProgressionList
     -_teacherCareerProgressionFactory
     +Teacher(acronym: String, name: String, email: String, nif: String, phoneNumber: String,
     academicBackground: String, street: String, postalCode: String, location: String, country: String,
     date: String, category: TeacherCategory, workingPercentage: int, department: Department)
     +hasSameAcronym(teacher: Teacher)
     +hasSameNif(teacher: Teacher)
     +isInDepartment(department: Department)
     +hasThisNIF(NIF: String)
     +updateWorkingPercentageInTeacherCareerProgression(date: String, workingPercentage: int)
     +updateTeacherCategoryInTeacherCarrerProgression(date: String, teacherCategory: TeacherCategory)
}

class ProgrammeFactoryImpl {
    +registerProgramme(name : String, acronym : String, quantityOfEcts : int, quantityOfSemesters : int, degreeType : DegreeType, department : Department, programmeDirector : Teacher, programmeCourseListFactory : ProgrammeCourseListFactory,
    courseInStudyPlanFactory : CourseInStudyPlanFactory, studyPlanArrayListFactory : StudyPlanArrayListFactory, studyPlanFactory : StudyPlanFactory, courseFactory : CourseFactory)
    }

class ProgrammeRepositoryListImpl{
    +newProgrammeArrayList()
    +copyProgrammeArrayList(List<Programme> list)
    }

interface ProgrammeRepositoryList {
    +newProgrammeArrayList()
    +copyProgrammeArrayList(List<Programme> list)
    }

interface ProgrammeFactory {
    +registerProgramme(String, acronym : String, quantityOfEcts : int, quantityOfSemesters : int, degreeType : DegreeType, department : Department, programmeDirector : Teacher, programmeCourseListFactory : ProgrammeCourseListFactory,
                           courseInStudyPlanFactory : CourseInStudyPlanFactory, studyPlanArrayListFactory : StudyPlanArrayListFactory, studyPlanFactory : StudyPlanFactory, courseFactory : CourseFactory)
    }

class List<Programme> {
}

Programme "1..*" --> "1" Teacher : has a Programme Director
ProgrammeRepository "1" ..>  "1" Programme
ProgrammeRepository ..> ProgrammeRepositoryList
ProgrammeRepository ..> ProgrammeFactory
ProgrammeFactory "1" <|.. "1" ProgrammeFactoryImpl
ProgrammeRepositoryList "1" <|.. "1" ProgrammeRepositoryListImpl
ProgrammeRepository --> "1" List
US12_ChangeProgrammeDirectorInSystem "1  " ..> "1  " ProgrammeRepository
List --> Programme
ProgrammeRepositoryList ..> List : <<creates>>
ProgrammeFactory ..> Programme : <<creates>>



@enduml

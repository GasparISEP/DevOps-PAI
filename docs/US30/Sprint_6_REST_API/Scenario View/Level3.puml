@startuml
title US30 As an ASC, I want to add a course to a programme using a Web UI. \n (Class Diagram)
!pragma layout smetana
skinparam ranksep 60
skinparam nodesep 60
skinparam linetype ortho

' ======= CONTROLLER =======

class US30_AddCourseToProgrammeRESTController {
      + US30_AddCourseToProgrammeController (service : IAddCourseToProgrammeService)
      + addCourseToProgramme(addCourseToProgrammeRequestDTO: AddCourseToProgrammeRequestDTO): \nAddCourseToProgrammeResponseDTO
}

' ======= SERVICE =======

interface IAddCourseToAProgrammeServiceImpl {
    + addCourseToProgramme(semester: Semester,\n curricularYear: CurricularYear,\n courseID: CourseID,\n studyPlanID: StudyPlanID,\n durationOfCourse: DurationOfCourse,\n quantityOfCreditsEcts: QuantityOfCreditsEcts): \n CourseInStudyPlan
}

class AddCourseToAProgrammeServiceImpl {
    + CourseInStudyPlanServiceImpl (factory: ICourseInStudyPlanFactory,\n repository: ICourseInStudyPlanRepository,\n assembler: ICourseInStudyPlanAssembler)
    + createCourseInStudyPlan(semester: Semester,\n curricularYear: CurricularYear,\n courseID: CourseID,\n studyPlanID: StudyPlanID,\n durationOfCourse: DurationOfCourse,\n quantityOfCreditsEcts: QuantityOfCreditsEcts): boolean
    + createCourseInStudyPlan(command: CourseInStudyPlanCommand): boolean
}

' ======= ASSEMBLER =======

class CourseInStudyPlanAssemblerImpl {
    + toCommand(request: CourseInStudyPlanRequestDTO): CourseInStudyPlanCommand
    + toDTO(courseInStudyPlanServiceDTO: CourseInStudyPlanServiceDTO): CourseInStudyPlanResponseDTO
}

interface ICourseInStudyPlanAssembler {
    + toCommand(request: CourseInStudyPlanRequestDTO): CourseInStudyPlanCommand
        + toDTO(courseInStudyPlanServiceDTO: CourseInStudyPlanServiceDTO): CourseInStudyPlanResponseDTO
}

class CourseInStudyPlanBusinessAssemblerImpl {
    + toDTO(courseInStudyPlan: CourseInStudyPlan): CourseInStudyPlanServiceDTO
}

interface ICourseInStudyPlanBusinessAssembler {
    + toDTO(courseInStudyPlan: CourseInStudyPlan): CourseInStudyPlanServiceDTO
}

class CourseInStudyPlanRequestDTO {
    - semester: String
    - curricularYear: String
    - courseID: String
    - studyPlanID: String
    - durationOfCourse: String
    - quantityOfCreditsEcts: int
}

class CourseInStudyPlanResponseDTO {
    - courseInStudyPlanID: UUID
    - semester: String
    - curricularYear: String
    - courseID: String
    - studyPlanID: String
    - durationOfCourse: String
    - quantityOfCreditsEcts: int
}

class CourseInStudyPlanCommand {
    - semester: Semester
    - curricularYear: CurricularYear
    - courseAcronym: Acronym
    - courseName: Name
    - programmeAcronym: Acronym
    - programmeName: NameWithNumbersAndSpecialChars
    - studyPlanDate: Date
    - duration: DurationCourseInCurricularYear
    - credits: CourseQuantityCreditsEcts
}

' ======= MAPPER =======

class CourseInStudyPlanMapperImpl {
    + toDomain(courseInStudyPlanDataModel: CourseInStudyPlanDataModel): CourseInStudyPlan
    + toDataModel(courseInStudyPlan: CourseInStudyPlan): CourseInStudyPlanDataModel
}

interface ICourseInStudyPlanMapper {
    + toDomain(courseInStudyPlanDataModel: CourseInStudyPlanDataModel): CourseInStudyPlan
    + toDataModel(courseInStudyPlan: CourseInStudyPlan): CourseInStudyPlanDataModel
}

interface ICourseInStudyPlanIDMapper {
    + toDomain(courseInStudyPlanIDDataModel: CourseInStudyPlanIDDataModel): CourseInStudyPlanID
    + toDataModel(courseInStudyPlanID: CourseInStudyPlanID): CourseInStudyPlanIDDataModel
}

class CourseInStudyPlanIDMapperImpl {
    + toDomain(courseInStudyPlanIDDataModel: CourseInStudyPlanIDDataModel): CourseInStudyPlanID
    + toDataModel(courseInStudyPlanID: CourseInStudyPlanID): CourseInStudyPlanIDDataModel
}

' ======= REPOSITORY =======

interface ICourseInStudyPlanRepository {
      + existsByCourseIDAndStudyPlanID(courseID: CourseID, studyPlanID: StudyPlanID): boolean
}

class CourseInStudyPlanRepositorySpringDataImpl  {
   + save(courseInStudyPlan: CourseInStudyPlan): CourseInStudyPlan
   + existsByCourseIDAndStudyPlanID(courseID: CourseID, studyPlanID: StudyPlanID): boolean
}

interface ICourseInStudyPlanRepositorySpringData {
      + existsByCourseIDAndStudyPlanID(courseID: CourseID, studyPlanID: StudyPlanID): boolean
}

' ======= FACTORY =======

interface ICourseInStudyPlanFactory	{
  + newCourseInStudyPlan(semester: Semester,\n curricularYear: CurricularYear,\n courseID: CourseID,\n studyPlanID: StudyPlanID,\n durationOfCourse: DurationCourseInCurricularYear,\n quantityOfCreditsEcts: CourseQuantityOfCreditsEcts): CourseInStudyPlan
  + newCourseInStudyPlan(command: CourseInStudyPlanCommand): CourseInStudyPlan
}

class CourseInStudyPlanFactoryImpl {
  + createCourseInStudyPlan(semester: Semester,\n curricularYear: CurricularYear,\n courseID: CourseID,\n studyPlanID: StudyPlanID,\n durationOfCourse: DurationOfCourse,\n quantityOfCreditsEcts: QuantityOfCreditsEcts): CourseInStudyPlan
}

' ======= AGGREGATE =======

package "CourseInStudyPlan Aggregate"  {
    Entity CourseInStudyPlan <<Root>> <<Entity>> {
      + CourseInStudyPlan(id: CourseInStudyPlanID, semester: Semester,\n curricularYear: CurricularYear,\n courseID: CourseID,\n studyPlanID: StudyPlanID,\n durationOfCourse: DurationOfCourse,\n quantityOfCreditsEcts: QuantityOfCreditsEcts)
      + getSemester(): Semester
      + getCurricularYear(): CurricularYear
      + getCourseID(): CourseID
      + getStudyPlanID(): StudyPlanID
      + getDurationOfCourse(): DurationOfCourse
      + getQuantityOfCreditsEcts(): QuantityOfCreditsEcts
      + identity(): CourseInStudyPlanID
    }
}

' ======= VALUE OBJECTS =======

class CourseInStudyPlanID {
      - _id: UUID
      + CourseInStudyPlanID()
      + getValue(): UUID
      + equals(Object obj): boolean
      + hashCode(): int
    }

class Semester {
      + Semester(semester: String)
      + getSemester(): String
    }

class CurricularYear {
      + CurricularYear(curricularYear: String)
      + getCurricularYear(): String
    }

class CourseID {
      + CourseID(courseID: String)
      + getCourseID(): String
    }

class StudyPlanID {
      + StudyPlanID(studyPlanID: String)
      + getStudyPlanID(): String
    }

class DurationOfCourse {
      + DurationOfCourse(durationOfCourse: String)
      + getDurationOfCourse(): String
    }

class QuantityOfCreditsEcts {
      + QuantityOfCreditsEcts(quantityOfCreditsEcts: int)
      + getQuantityOfCreditsEcts(): int
    }

class CourseInStudyPlanID {
       - _id: UUID
       + CourseInStudyPlanID()
       + getValue(): UUID
       + equals(Object obj): boolean
       + hashCode(): int
    }

' ======= DATAMODEL =======

    class CourseInStudyPlanDataModel {
       - semester: String
       - curricularYear: String
       - courseID: String
       - studyPlanID: String
       - durationOfCourse: String
       - quantityOfCreditsEcts: int
       + CourseInStudyPlanDataModel()
       + CourseInStudyPlanDataModel(id: CourseInStudyPlanIDDataModel, semester: String,\n curricularYear: String,\n courseID: String,\n studyPlanID: String,\n durationOfCourse: String,\n quantityOfCreditsEcts: int)
       + getId(): CourseInStudyPlanIDDataModel
       + getSemester(): Semester
       + getCurricularYear(): CurricularYear
       + getCourseID(): CourseID
       + getStudyPlanID(): StudyPlanID
       + getDurationOfCourse(): DurationOfCourse
       + getQuantityOfCreditsEcts(): QuantityOfCreditsEcts
    }

class CourseInStudyPlanIDDataModel {
    - id: String
    + CourseInStudyPlanIDDataModel()
    + getValue(): String
}

' ======= NAVIGABILITY =======

' ======= CourseInStudyPlanAggregate =======
CourseInStudyPlan -down-> CourseInStudyPlanID
CourseInStudyPlan -down-> Semester
CourseInStudyPlan -down-> CurricularYear
CourseInStudyPlan -down-> CourseID
CourseInStudyPlan -down-> StudyPlanID
CourseInStudyPlan -down-> DurationOfCourse
CourseInStudyPlan -down-> QuantityOfCreditsEcts

' ======= US30_AddCourseToProgrammeRESTController =======

US30_AddCourseToProgrammeRESTController -down-> IAddCourseToAProgrammeServiceImpl
US30_AddCourseToProgrammeRESTController -down-> ICourseInStudyPlanAssembler


' ======= Assembler =======
CourseInStudyPlanAssemblerImpl ...|> ICourseInStudyPlanAssembler
ICourseInStudyPlanAssembler ..> CourseInStudyPlanRequestDTO
ICourseInStudyPlanAssembler .left.> CourseInStudyPlanResponseDTO
CourseInStudyPlanAssemblerImpl --> CourseInStudyPlanCommand
CourseInStudyPlanBusinessAssemblerImpl ..|> ICourseInStudyPlanBusinessAssembler

' ======= Factory =======
CourseInStudyPlanFactoryImpl .down.> ICourseInStudyPlanFactory
AddCourseToAProgrammeServiceImpl .up.> ICourseInStudyPlanFactory
ICourseInStudyPlanFactory ..> CourseInStudyPlan

' ======= Service =======
AddCourseToAProgrammeServiceImpl ...|> IAddCourseToAProgrammeServiceImpl
IAddCourseToAProgrammeServiceImpl -down-> ICourseInStudyPlanRepository
AddCourseToAProgrammeServiceImpl -down-> ICourseInStudyPlanBusinessAssembler
' ======= Mapper =======
CourseInStudyPlanMapperImpl ..> ICourseInStudyPlanMapper
ICourseInStudyPlanMapper ..> CourseInStudyPlan
ICourseInStudyPlanMapper ..> CourseInStudyPlanDataModel
CourseInStudyPlanIDMapperImpl ..> ICourseInStudyPlanIDMapper
ICourseInStudyPlanIDMapper ..> CourseInStudyPlanID

' ======= DataModel =======
CourseInStudyPlanDataModel --> CourseInStudyPlanIDDataModel

' ======= Repository =======
ICourseInStudyPlanRepository .down.|> CourseInStudyPlanRepositorySpringDataImpl
CourseInStudyPlanRepositorySpringDataImpl .down.|> ICourseInStudyPlanRepositorySpringData


@enduml
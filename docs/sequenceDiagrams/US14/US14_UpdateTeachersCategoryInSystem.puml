@startuml
actor HRC
participant ":Test" as TE #lightgrey
participant ":Controller" as CTL #lightgreen
participant "tcr1:TeacherCategoryRepo" as TCR #lightblue
participant "tc2:TeacherCategory" as TC2
participant "tr1:TeacherRepo" as TR #orange
participant "t1:Teacher" as T #lightyellow
participant "tcp1:TeacherCareerProgression" as TCP #lightpink
participant "tcp2:TeacherCareerProgression" as TCP2 #lightpink


HRC -> TE: I want to update Teacher (date, teacherNIF, teacherCategoryName)
activate TE
TE -> CTL : updateTeacherCategory(date, teacherNIF, teacherCategoryName)
activate CTL
CTL -> TR: getTeacherByNIF(teacherNIF)
activate TR
activate T
|||
ref over TR, T
    Loop t[i] in tr1
    hasThisNIF()
end ref
T --> TR: True
deactivate T
TR --> CTL: t1
deactivate TR
|||
CTL -> TCR: getTeacherCategoryByName(teacherCategoryName)
activate TCR
|||
activate TC2
ref over TCR, TC2
    Loop tc[i] in tcr1
    hasThisNIF()
end ref
TC2 --> TCR: True
deactivate TC2
TCR --> CTL: tc2
deactivate TCR
|||
CTL -> T: updateTeacherCategoryInTeacherCareer(date, tc2)
activate T
T -> T: getLast() from tcpList
T --> T: tcp1
|||
T -> TCP : getWorkingPercentage() from tcp1
activate TCP
TCP --> T : wp1
deactivate TCP
|||
T -> TCP: getCategory() from tcp1
activate TCP
TCP --> T: tc1
deactivate TCP
|||
T -> T: Validate if tc2 is different than tc1
|||
T -> TCP2** : createTeacherCarrerProgression(date, tc2, wp1)
activate TCP2
TCP2 -> TCP2 : validateDate(date)
TCP2 --> T
deactivate TCP2
|||
ref over T, TCP2
    check if tcp2 has a date later than tcp1
end ref
|||
T -> T : add(tcp2)
T --> CTL : success!
deactivate T
CTL --> TE : success!
deactivate CTL
TE --> HRC : success!
deactivate TE
@enduml
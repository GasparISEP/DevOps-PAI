@startuml
actor ASC as Admin

participant ":UI" as UI #lightblue
participant ":ControllerUS27" as C #lightblue
participant ":ProgrammeList" as PL #lightblue




create ":UI" as UI #lightblue

Admin -> UI : I Want to register a Programme in the System,\n including a Study Plan.
activate UI
UI --> Admin : Name? Acronym? quantityOfEcts? quantityOfSemesters?  DegreeType? \n Department? Programme Director?
Admin -> UI : Name! Acronym! quantityOfEcts! quantityOfSemesters!  DegreeType! \n Department! Programme Director!
create ":ControllerUS27" as C #lightblue
UI -> C : registerProgrammeInTheSystemIncludingStudyPlan(Name, Acronym, quantityOfEcts, quantityOfSemesters, \n DegreeType,  Department, Programme Director)
activate C
create ":ProgrammeList" as PL #lightblue
C -> PL : registerProgramme(name, acronym, quantityOfEcts, quantityOfSemesters, degreeType, department, programmeDirector)
activate PL
create ":P1:Programme" as P

PL -> P : Programme(name, acronym, quantityOfEcts, quantityOfSemesters, \n degreeType, department, programmeDirector)
activate P
P -> P : isNameInvalid()
P -> P : isAcronymInvalid()
P -> P : isQuantityOfEctsInvalid()
P -> P : isQuantityOfSemestersInvalid()

create ":SP1:StudyPlan" as SP
P -> SP  : StudyPlan()
activate SP
SP --> P : List<CourseInStudyPlan> SP1
deactivate SP
P --> PL : P1
deactivate P

PL -> PL : contains(P1)
PL -> PL : add(P1)

PL --> C : True
deactivate PL
C --> UI : True
deactivate C
UI --> Admin : Success!
deactivate UI

ref over Admin
Courses are added to Programme in a List


end ref

Admin -> UI : I want to add a Course to StudyPlan
activate UI
UI --> Admin : semester? curricularYear? course? programme?
Admin -> UI : semester! curricularYear! course! P1!
UI -> C : addCourseToStudyPlan(semester, curricularYear, course, P1)
activate C
C -> SP : P1.getStudyPlan().addCourseToStudyPlan(semester, curricularYear, course, P1)
activate SP
SP -> SP : isCourseOrProgrammeInvalid(course, p1)
SP -> SP : isCourseInStudyPlan(course, p1)

create ":CSP1:CourseInStudyPlan" as CSP

SP -> CSP : CourseInStudyPlan(semester, curricularYear, course, P1)
activate CSP
CSP -> CSP : isSemesterInvalid
CSP -> CSP : IsCurricularYearInvalid

CSP --> SP : CSP1
deactivate CSP

SP -> SP : IsECTSLimitExceeded(semester, curricularYear, CSP1)
SP -> SP : addCourseToStudyPlan(CSP1)

SP --> C : True
deactivate SP
C --> UI : True
deactivate C

UI --> Admin : Success

deactivate UI


@enduml
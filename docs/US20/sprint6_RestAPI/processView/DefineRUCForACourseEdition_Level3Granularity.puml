@startuml
title US20 \n As a Programme Director, I want to define the RUC for a course edition \n (Process View - Level 3 Granularity - Backend)

skinparam titleFontName "Verdana"
skinparam defaultFontName "Verdana"
skinparam defaultTextAlignment center
skinparam shadowing true
skinparam actorBackgroundColor #lightblue
skinparam participantBackgroundColor #lightblue/white

autonumber

participant ":US20_DefineRucForCourseEditionRestController" as Controller
participant ":ICourseEditionService" as CourseService
participant ":ICourseEditionRepository" as CourseRepo
participant ":CourseEditionMapper" as CourseMapper
participant ":CourseEdition" as CourseEdition
participant ":ICourseEditionRepositorySpringData" as SpringCourseRepo
participant ":ITeacherRepository" as TeacherRepo
participant ":ITeacherRepositorySpringData" as TeacherRepoSpringData
'--- Find Teachers ---
-> Controller : getAllTeachers()
activate Controller #E1F5FE

note over Controller #EEEEEE
Receives HTTP request: GET /teachers

Spring Boot automatically converts
incoming JSON into DTOs
end note

ref over Controller
       <b>Get List of Teachers</b>
end ref

<-- Controller : List<TeacherDTO>

deactivate Controller


' --- Find Course Editions ---
-> Controller : getAllCourseEditions()
activate Controller  #E1F5FE

note over Controller #EEEEEE
Receives HTTP request: GET /courseEditions

Spring Boot automatically converts
incoming JSON into DTOs
end note

ref over Controller
       <b>Get List of Course Editions</b>
end ref

<-- Controller : List<CourseEditionDTO>

deactivate Controller


'--- Assign RUC to Course Edition ---
-> Controller : defineRucForCourseEdition(defineRucRequestDTO)
activate Controller #E1F5FE

note over Controller #EEEEEE
Receives HTTP request: PATCH /courseeditions/{courseEditionId}/ruc

Spring Boot automatically converts
incoming JSON into DTOs
end note

Controller -> CourseService: assignRucToCourseEdition(teacherId, courseEditionId)


ref over Controller
       <b>Convert defineRucDTO to Domain</b>
end ref

activate CourseService #E1F5FE

CourseService -> TeacherRepo: containsOfIdentity(teacherID)
activate TeacherRepo #E1F5FE
TeacherRepo -> TeacherRepoSpringData: containsOfIdentity(teacherID)
activate TeacherRepoSpringData #E1F5FE
TeacherRepoSpringData --> TeacherRepo: true
deactivate TeacherRepoSpringData
TeacherRepo --> CourseService: true
deactivate TeacherRepo

CourseService -> CourseRepo : ofIdentity(courseEditionID)
activate CourseRepo #E1F5FE
CourseRepo -> SpringCourseRepo : findById()
activate SpringCourseRepo #E1F5FE

SpringCourseRepo --> CourseRepo : CourseEditionDataModel
deactivate SpringCourseRepo
CourseRepo -> CourseMapper : toDomain()
activate CourseMapper #E1F5FE
CourseMapper --> CourseRepo : CourseEdition
deactivate CourseMapper
CourseRepo --> CourseService : CourseEdition
deactivate CourseRepo


CourseService -> CourseEdition : setRuc(teacherID)
activate CourseEdition #E1F5FE
CourseEdition --> CourseService : true
deactivate CourseEdition


CourseService -> CourseRepo : save(CourseEdition)
activate CourseRepo #E1F5FE

CourseRepo -> CourseMapper : toDataModel()
activate CourseMapper #E1F5FE
CourseMapper --> CourseRepo : CourseEditionDataModel
deactivate CourseMapper
CourseRepo -> SpringCourseRepo : save(CourseEditionDataModel)
activate SpringCourseRepo #E1F5FE
SpringCourseRepo --> CourseRepo : CourseEditionDataModel
deactivate SpringCourseRepo
CourseRepo -> CourseMapper : toDomain()
activate CourseMapper #E1F5FE
CourseMapper --> CourseRepo : CourseEdition
deactivate CourseMapper
CourseRepo --> CourseService : CourseEdition

deactivate CourseRepo

CourseService --> Controller : true
deactivate CourseService
<-- Controller:  (200 OK) RUC successfully updated
deactivate Controller

@enduml
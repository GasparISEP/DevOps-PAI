@startuml US21

skinparam ParticipantBackgroundColor #application
skinparam SequenceLifeLineBackgroundColor #application
skinparam RefBorderColor #application

actor ASC #ffd966
participant UI as ":UI" #fff2cc
participant ProgrammeEditionRestController as ":ProgrammeEditionRestController<<Component>>" #d0e0e3
participant ":ProgrammeEditionService" as ProgrammeEditionService #d9ead3
participant ":ProgrammeEditionEnrolmentService" as ProgrammeEditionEnrolmentService #d9ead3
participant ":ProgrammeEditionSpringData" as ProgrammeEditionSpringData #fce5cd
participant ":ProgrammeEditionEnrolmentSpringData" as SpringData #fce5cd
participant ":ProgrammeEditionEnrolmentMapper" #ead1dc
participant ":ProgrammeEditionEnrolmentFactory" #d9d2e9
participant "programmeEditionList1"
autonumber
title US21: As an ASC, I want to get the number of students enrolled in a programme edition\n(Process View - Level 4 Granularity)



autonumber
skinparam defaultTextAlignment center
skinparam shadowing true
skinparam sequence {
    ActorBorderColor black
    ParticipantBorderColor black
    LifeLineBorderColor black
    LifeLineBackgroundColor #ffffff
}

ASC -> UI ++ : I want to get the number of students enrolled in a programme edition!
UI -> ProgrammeEditionRestController ++: GET/programmeeditions
ProgrammeEditionRestController -> ProgrammeEditionService ++: findAll()
ProgrammeEditionService -> ProgrammeEditionSpringData: findAll()
activate ProgrammeEditionSpringData
ProgrammeEditionSpringData --> ProgrammeEditionService --: Iterable<programmeEditionList1>
ProgrammeEditionService --> ProgrammeEditionRestController --: Iterable<programmeEditionList1>
ProgrammeEditionRestController --> UI --: Iterable<programmeEditionList1>
UI --> ASC -- : Which Programme Edition?
ASC -> UI ++ : programmeEdition1
UI -> ProgrammeEditionRestController ++ : GET/programmeeditions/{programmeeditionID}/students

ProgrammeEditionRestController -> ":ProgrammeEditionEnrolmentService" ++: totalStudentsInProgrammeEdition(programmeEdition1ID)
":ProgrammeEditionEnrolmentService" -> SpringData ++: getAllProgrammeEditionsEnrolmentByProgrammeEditionID(programmeEdition1ID)
SpringData -> ":ProgrammeEditionIDMapper" ++: toDataModel(programmeEdition1ID)
":ProgrammeEditionIDMapper" --> SpringData --: programmeEdition1IdDataModel
SpringData -> SpringData : findAllBy_id_ProgrammeEditionIdDataModel(programmeEdition1IdDataModel)

loop for each ProgrammeEditionEnrolmentDataModel
    SpringData -> ":ProgrammeEditionEnrolmentMapper" ++: toDomain(programmeEditionEnrolmentDataModel)
    ":ProgrammeEditionEnrolmentMapper" -> ":ProgrammeEditionEnrolmentFactory"++: newProgrammeEditionEnrolment(StudentID studentId, ProgrammeEditionID programmeEditionId)
    create "pEE1:ProgrammeEditionEnrolment" as ProgrammeEditionEnrolment1
    ":ProgrammeEditionEnrolmentFactory" -> ProgrammeEditionEnrolment1: <create>
    ":ProgrammeEditionEnrolmentFactory" --> ":ProgrammeEditionEnrolmentMapper": Optional<pEE1>
    ":ProgrammeEditionEnrolmentMapper" --> SpringData --: Optional<pEE1>
    SpringData -> SpringData: add to List<ProgrammeEditionEnrolment>
end

SpringData --> ":ProgrammeEditionEnrolmentService" --: List<ProgrammeEditionEnrolment>
ref over ":ProgrammeEditionEnrolmentService"
    Count total programmeEditionEnrolments
    1. Get list size
    2. Return total
end ref

":ProgrammeEditionEnrolmentService" --> ProgrammeEditionRestController --: int
ProgrammeEditionRestController --> UI --: int
UI --> ASC --: Total of Students Enrolled in the specified ProgrammeEdition

@enduml  make the participants/actors have diferent colours
@startuml DomainModel_US21_Compact

title Domain Model - US21: Get the Number of Students Enrolled in a Programme Edition
scale 0.8
skinparam linetype ortho
skinparam class {
  BackgroundColor<<Interface>> LightYellow
  BackgroundColor<<Value Object>> #FFF3E0
  BackgroundColor<<Entity>> #FFE0B2
  BackgroundColor<<Root>> #FFCC80
  BackgroundColor #E3F2FD
  ArrowColor Black
  BorderColor Black
}

' ============================
' CONTROLLER
' ============================
class ProgrammeEditionRestController <<RESTController>> {
  - _programmeEditionService: IProgrammeEditionService
  - _programmeEditionControllerAssembler: IProgrammeEditionControllerAssembler
  + ProgrammeEditionRestController(programmeEditionService, programmeEditionControllerAssembler)
  + getTheNumberOfStudents(programmeAcronym: String, schoolYearId: String): int
  + getAllProgrammeEditions(): List<CountStudentsDto>
}

' ============================
' AGGREGATES
' ============================
package "ProgrammeEditionEnrolment Aggregate" {
  class ProgrammeEditionEnrolment <<Root>> <<Entity>> {
    + ProgrammeEditionEnrolment(studentId: StudentID, id: ProgrammeEditionID)
    + getStudentUniqueNumber(): String
    + equals(obj: Object): boolean
    + findProgrammeEditionInEnrollment(): ProgrammeEditionID
  }
}

package "ProgrammeEdition Aggregate" {
  class ProgrammeEdition <<Root>> <<Entity>> {
    + ProgrammeEdition(pId, syId, peId)
    + identity(): ProgrammeEditionID
    + findProgrammeIDInProgrammeEdition(): ProgrammeID
    + findSchoolYearIDInProgrammeEdition(): SchoolYearID
  }
}

' ============================
' VALUE OBJECTS
' ============================
class ProgrammeEditionID <<Value Object>> {
  - programmeId: ProgrammeID
  - schoolYearId: SchoolYearID
  + ProgrammeEditionID(pId, syId)
  + getId(): ProgrammeEditionID
  + equals(obj: Object): boolean
  + hashcode(): int
  + toString(): String
}

class StudentID <<Value Object>> {
  - uniqueNumber: int
  + StudentID(uniqueNumber: int)
  + getUniqueNumber(): int
  + isUniqueNumberValid(uniqueNumber: int): boolean
  + equals(obj: Object): boolean
  + isEquals(studentID: StudentID): boolean
}

class EnrolmentStatus <<Value Object>> {
  - status: String
  + EnrolmentStatus(isActive: boolean)
  + isEnrolmentActive(): boolean
}

class ProgrammeID <<Value Object>> {
  - acronym: String
}

class SchoolYearID <<Value Object>> {
  - schoolYearID: UUID
}

class ProgrammeEditionEnrolmentID <<Value Object>> {
  - peId: ProgrammeEditionID
  - studentId: StudentID
  + ProgrammeEditionEnrolmentID(peId, studentId)
  + getId(): ProgrammeEditionEnrolmentID
  + equals(obj: Object): boolean
  + hashcode(): int
  + toString(): String
}

class ProgrammeEditionEnrolmentGeneratedID <<Value Object>> {
  - id: String
  + ProgrammeEditionEnrolmentGeneratedID(id: String)
  + getId(): String
}

class ProgrammeEditionGeneratedID <<Value Object>> {
  - id: String
  + ProgrammeEditionGeneratedID(id: String)
  + getId(): String
}

' ============================
' FACTORIES
' ============================
interface IProgrammeEditionEnrolmentFactory <<Interface>> {
  + newProgrammeEditionEnrolment(StudentID, ProgrammeEditionID)
}
class ProgrammeEditionEnrolmentFactoryImpl <<Entity>> {
  + newProgrammeEditionEnrolment(StudentID, ProgrammeEditionID)
}

interface IProgrammeEditionFactory <<Interface>> {
  + newProgrammeEdition(pId, syId, peId)
}
class ProgrammeEditionFactoryImpl <<Entity>> {
  + newProgrammeEdition(pId, syId, peId)
}

' ============================
' REPOSITORIES
' ============================
interface IProgrammeEditionRepository <<Interface>> {
  + findAll(): List<ProgrammeEdition>
}

interface IProgrammeEditionEnrolmentRepository <<Interface>> {
  + getAllProgrammeEditionsEnrolmentByProgrammeEditionID(programmeEditionId: ProgrammeEditionID): List<ProgrammeEditionEnrolment>
}

class ProgrammeEditionEnrolmentRepositoryImpl <<Entity>> {
  - programmeEditionEnrolments: Set<ProgrammeEditionEnrolment>
  + getAllProgrammeEditionsEnrolmentByProgrammeEditionID(programmeEditionId: ProgrammeEditionID): List<ProgrammeEditionEnrolment>
}

' ============================
' SERVICES
' ============================
interface IProgrammeEditionService <<Interface>> {
  + findAll(): List<ProgrammeEdition>
}
class ProgrammeEditionServiceImpl <<Entity>> {
  + findAll(): List<ProgrammeEdition>
}

' ============================
' MAPPERS
' ============================
interface IProgrammeEditionMapper <<Interface>> {
  + toDomain(data): Domain
  + toDataModel(domain): DataModel
}
class ProgrammeEditionMapper <<Mapper>> {
  + toDomain(data): Domain
  + toDataModel(domain): DataModel
}

interface IProgrammeEditionEnrolmentMapper <<Interface>> {
  + toDomain(data): Domain
  + toDataModel(domain): DataModel
}
class ProgrammeEditionEnrolmentMapper <<Mapper>> {
  + toDomain(data): Domain
  + toDataModel(domain): DataModel
}

interface IProgrammeEditionIDMapper <<Interface>> {
  + toDomain()
  + toDataModel()
}
class ProgrammeEditionIDMapperImpl <<Mapper>> {
  + toDomain()
  + toDataModel()
}

' ============================
' DATA MODELS
' ============================
class ProgrammeEditionDataModel <<DataModel>> {
  - programmeEditionIdDataModel: ProgrammeEditionIDDataModel
}
class ProgrammeEditionIDDataModel <<DataModel>> {
  - programmeIdDataModel: ProgrammeIDDataModel
  - schoolYearIdDataModel: SchoolYearIDDataModel
}

' ============================
' JPA REPOSITORIES
' ============================
interface JpaRepository <<Interface>> {}

interface IProgrammeEditionEnrolmentRepositorySpringData <<Interface>> {
  + findAllProgrammeEditionsEnrolmentByProgrammeEdition(id: ProgrammeEditionID): List<Student>
}

class ProgrammeEditionRepositorySpringDataImpl <<RepositoryImpl>> {
  + findAll(): List<ProgrammeEdition>
}
interface IProgrammeEditionRepositorySpringData <<Interface>> {
  + findAll(): List<ProgrammeEdition>
}

' ============================
' ASSEMBLER
' ============================
interface IProgrammeEditionAssembler <<Interface>> {
  + toDTO(domain): DTO
  + toDomain(dto): Domain
  + toDTOList(): Iterable<ProgrammeEditionIdDTO> CountStudentsDTOs
}
class ProgrammeEditionAssembler <<Assembler>> {
  + toDTO(domain): DTO
  + toDomain(dto): Domain
  + toDtoList()
}

' ============================
' DTO
' ============================
class ProgrammeEditionIdDTO <<DTO>> {
  - ProgrammeName: String
  - ProgrammeAcronym: String
  - SchoolYearID: UUID
  - countStudentsDTO: ProgrammeEditionIdDTO
}

' ============================
' RELATIONSHIPS
' ============================

ProgrammeEdition --> ProgrammeEditionID
ProgrammeEdition --> SchoolYearID
ProgrammeEdition --> ProgrammeID
ProgrammeEdition --> ProgrammeEditionGeneratedID

ProgrammeEditionEnrolment --> ProgrammeEditionID
ProgrammeEditionEnrolment --> StudentID
ProgrammeEditionEnrolment --> ProgrammeEditionEnrolmentID
ProgrammeEditionEnrolment --> EnrolmentStatus
ProgrammeEditionEnrolment --> ProgrammeEditionEnrolmentGeneratedID

ProgrammeEditionRestController --> IProgrammeEditionService

ProgrammeEditionRestController --> IProgrammeEditionAssembler
IProgrammeEditionAssembler --> ProgrammeEditionIdDTO

IProgrammeEditionEnrolmentRepository <|-- ProgrammeEditionEnrolmentRepositoryImpl
IProgrammeEditionService --> IProgrammeEditionEnrolmentRepository
ProgrammeEditionEnrolmentRepositoryImpl --> IProgrammeEditionEnrolmentRepositorySpringData
IProgrammeEditionEnrolmentRepositorySpringData --|> JpaRepository

ProgrammeEditionEnrolmentMapper ..|> IProgrammeEditionEnrolmentMapper
IProgrammeEditionEnrolmentRepository --> IProgrammeEditionEnrolmentMapper
ProgrammeEditionEnrolmentFactoryImpl ..|> IProgrammeEditionEnrolmentFactory
IProgrammeEditionEnrolmentMapper --> IProgrammeEditionEnrolmentFactory

IProgrammeEditionRepository <|-- ProgrammeEditionRepositorySpringDataImpl
ProgrammeEditionServiceImpl ..|> IProgrammeEditionService
IProgrammeEditionService --> IProgrammeEditionRepository
IProgrammeEditionRepository --> ProgrammeEdition
ProgrammeEditionRepositorySpringDataImpl --> IProgrammeEditionRepositorySpringData
IProgrammeEditionRepositorySpringData --|> JpaRepository

ProgrammeEditionMapper ..|> IProgrammeEditionMapper
ProgrammeEditionFactoryImpl ..|> IProgrammeEditionFactory
IProgrammeEditionMapper ..> IProgrammeEditionFactory

ProgrammeEditionAssembler ..|> IProgrammeEditionAssembler
ProgrammeEditionServiceImpl --> IProgrammeEditionAssembler
ProgrammeEditionDataModel --> ProgrammeEditionMapper
ProgrammeEditionDataModel --> ProgrammeEditionIDDataModel
IProgrammeEditionIDMapper --> ProgrammeEditionIDDataModel
IProgrammeEditionIDMapper ..|> ProgrammeEditionIDMapperImpl

@enduml

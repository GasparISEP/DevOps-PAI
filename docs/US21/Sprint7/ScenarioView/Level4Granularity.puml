@startuml US21

title US21: As an ASC, I want to get the number of students enrolled in a programme edition\n(Scenario View - Level 4 Full Backend Flow)

participant Router as ":Router"<<Component>> #fff2cc
participant ProgrammeEditionRestController as ":ProgrammeEditionRESTController"<<Component>> #d0e0e3
participant IProgrammeEditionService as ":IProgrammeEditionService"<<Component>> #d9ead3
participant IProgrammeEditionRepository as ":IProgrammeEditionRepository"<<Component>> #fce5cd
participant IProgrammeEditionRepositorySpringData as ":IProgrammeEditionRepositorySpringData"<<Component>> #f9cb9c
participant IProgrammeEditionMapper as ":IProgrammeEditionMapper"<<Component>> #f4cccc
participant IProgrammeEditionAssembler as ":IProgrammeEditionAssembler"<<Component>> #f4cccc
participant IProgrammeEditionEnrolmentService as ":IProgrammeEditionEnrolmentService"<<Component>> #f9cb9c
participant IProgrammeEditionEnrolmentRepositorySpringData as ":IProgrammeEditionEnrolmentRepositorySpringData"<<Component>> #fce5cd
participant IProgrammeEditionIDMapper as ":IProgrammeEditionIDMapper"<<Component>>
participant IProgrammeEditionEnrolmentDataModel as ":IProgrammeEditionEnrolmentDataModel"<<Component>> #d9ead3
participant IProgrammeEditionEnrolmentMapper as ":IProgrammeEditionEnrolmentMapper"<<Component>> #ead1dc
participant IProgrammeEditionEnrolmentFactory as ":IProgrammeEditionEnrolmentFactory"<<Component>> #d9d2e9
autonumber

skinparam defaultTextAlignment center
skinparam shadowing true
skinparam sequence {
    ActorBorderColor black
    ParticipantBorderColor black
    LifeLineBorderColor black
    LifeLineBackgroundColor #ffffff
}

-> Router  : I want to get the number of students\n enrolled in a programme edition!
activate Router

note over Router: The conversion from JSON to DTO is done\n automatically through the Spring Boot Framework

Router -> ProgrammeEditionRestController ++: GET/programme-editions {}

ProgrammeEditionRestController -> IProgrammeEditionService ++: getAllProgrammeEditions()

IProgrammeEditionService -> IProgrammeEditionRepository: findAll()
activate IProgrammeEditionRepository

IProgrammeEditionRepository -> IProgrammeEditionRepositorySpringData ++: findAll()
IProgrammeEditionRepositorySpringData --> IProgrammeEditionRepository : Iterable<ProgrammeEditionDataModel>
deactivate IProgrammeEditionRepositorySpringData

IProgrammeEditionRepository -> IProgrammeEditionMapper: toDomain(Iterable<ProgrammeEditionDataModel>)
activate IProgrammeEditionMapper
IProgrammeEditionMapper --> IProgrammeEditionRepository : List<ProgrammeEdition>
deactivate IProgrammeEditionMapper

IProgrammeEditionRepository --> IProgrammeEditionService --: List<programmeEdition>

ref over IProgrammeEditionService: Conversion from Domain to ServiceResponseDTO

IProgrammeEditionService --> ProgrammeEditionRestController --: List<programmeEditionServiceDTO>

ref over ProgrammeEditionRestController: Conversion from ServiceResponseDTO to ResponseDTO

ProgrammeEditionRestController --> Router --: List<programmeEditionResponseDTO>

note over Router: The conversion from DTO to JSON is done\n automatically through the Spring Boot Framework

<--Router : Which Programme Edition?
deactivate Router

 -> Router : This Programme Edition!
 activate Router

note over Router: The conversion from JSON to DTO is done\n automatically through the Spring Boot Framework

Router -> ProgrammeEditionRestController  : GET/programme-editions/\n{id}/{schoolYearID}/students
activate ProgrammeEditionRestController

ref over ProgrammeEditionRestController: Conversion from String to RequestServiceDTO

ProgrammeEditionRestController -> IProgrammeEditionService ++: countTotalNumberOfStudentsInAProgrammeEdition\n(RequestServiceDTO)

IProgrammeEditionService -> IProgrammeEditionAssembler ++: toProgrammeEditionFromRequestServiceDTO\n(RequestServiceDTO)
IProgrammeEditionAssembler --> IProgrammeEditionService : programmeEdition
deactivate IProgrammeEditionAssembler

IProgrammeEditionService -> IProgrammeEditionEnrolmentService: totalStudentInProgrammeEdition(programmeEditionID)
activate IProgrammeEditionEnrolmentService

IProgrammeEditionEnrolmentService -> IProgrammeEditionEnrolmentRepositorySpringData ++: getAllProgrammeEditionsEnrolmentByProgrammeEditionID\n(programmeEditionId)
IProgrammeEditionEnrolmentRepositorySpringData -> IProgrammeEditionIDMapper ++: toDataModel(programmeEditionId)

IProgrammeEditionIDMapper --> IProgrammeEditionEnrolmentRepositorySpringData : programmeEditionIdDataModel
deactivate IProgrammeEditionIDMapper

IProgrammeEditionEnrolmentRepositorySpringData -> IProgrammeEditionEnrolmentRepositorySpringData : findAllByProgrammeEditionId(programmeEditionIdDataModel)

loop for each IProgrammeEditionEnrolmentDataModel
    IProgrammeEditionEnrolmentRepositorySpringData -> IProgrammeEditionEnrolmentMapper : toDomain(dataModel)
    activate IProgrammeEditionEnrolmentMapper
    IProgrammeEditionEnrolmentMapper --> IProgrammeEditionEnrolmentFactory: programmeEditionEnrolment\n(studentId, programmeEditionId,\n programmeEditionEnrolmentGeneratedID)
    create "pEE1:ProgrammeEditionEnrolment" as ProgrammeEditionEnrolment1
    activate IProgrammeEditionEnrolmentFactory
    IProgrammeEditionEnrolmentFactory -> ProgrammeEditionEnrolment1: <create>
    IProgrammeEditionEnrolmentFactory --> IProgrammeEditionEnrolmentMapper: programmeEditionEnrolment\n(studentId, programmeEditionId,\n programmeEditionEnrolmentGeneratedID)
    deactivate IProgrammeEditionEnrolmentFactory
    IProgrammeEditionEnrolmentMapper --> IProgrammeEditionEnrolmentRepositorySpringData: Optional<programmeEditionEnrolment>
    deactivate IProgrammeEditionEnrolmentMapper
    IProgrammeEditionEnrolmentRepositorySpringData -> IProgrammeEditionEnrolmentRepositorySpringData: add to List<ProgrammeEditionEnrolment>
end

IProgrammeEditionEnrolmentRepositorySpringData --> IProgrammeEditionEnrolmentService : List<ProgrammeEditionEnrolmentDataModel>
deactivate IProgrammeEditionEnrolmentRepositorySpringData

IProgrammeEditionEnrolmentService --> IProgrammeEditionService: List<ProgrammeEditionEnrolmentDataModel>
deactivate IProgrammeEditionEnrolmentService
IProgrammeEditionService --> IProgrammeEditionService: Convert from List to Size of List

IProgrammeEditionService --> ProgrammeEditionRestController --: int totalNumberOfStudents
ProgrammeEditionRestController --> Router --: int totalNumberOfStudents

<--Router: Total of Students Enrolled\n in the specified ProgrammeEdition
deactivate Router

@enduml  make the participants/actors have diferent colours
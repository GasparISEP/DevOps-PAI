@startuml

title As an ASC, I want to remove the enrolment of a student in a course edition \n Sequence Diagram \n Sprint 5 - Spring Data JPA
autonumber
skinparam {
  ActivityPadding 2
  ActivityMargin 2
  BoxPadding 2
}
skinparam defaultTextAlignment center
skinparam shadowing true

actor ASC #Orange/White
participant ":UI" as UI #E1F5FE
participant ":US28_EnrolmentRemoval\nController" as Controller #E1F5FE
participant ":ICourseEditionEnrolment\nService" as Service #E1F5FE
participant ":ICourseEditionEnrolment\nRepository" as Repository #E1F5FE
participant ":ICourseEditionEnrolment\nRepositorySpringData" as SpringDataRepo #E1F5FE
participant "cee:CourseEditionEnrolment" as Enrolment #E1F5FE
participant "status:EnrolmentStatus" as Status #E1F5FE
participant "ceeMapper:CourseEditionEnrolment\nMapperImpl" as Mapper #E1F5FE

' Step 1: ASC triggers removal
ASC -> UI : I want to remove the enrolment\n of a student in a course edition
activate UI #HoneyDew
UI --> ASC : What is the student ID?
deactivate UI
ASC -> UI : Student ID!
activate UI #HoneyDew
UI --> ASC : What is the course edition ID?
deactivate UI
ASC -> UI : Course edition ID!
activate UI #HoneyDew
UI -> Controller: removeStudentEnrolment\n(studentID, courseEditionID)
activate Controller #HoneyDew

' Step 2: Delegate to service
Controller -> Service: removeStudentEnrolment\n(studentID, courseEditionID)
activate Service #HoneyDew

' Step 3: Check if enrolment exists
Service -> Repository: removeEnrolment\n(studentID, courseEditionID)
activate Repository #HoneyDew
Repository -> SpringDataRepo: findByStudentAndEdition\n(studentID, courseEditionID)
activate SpringDataRepo #HoneyDew
SpringDataRepo --> Repository: CourseEditionEnrolment
deactivate SpringDataRepo

' Step 4: Deactivate Enrolment
Repository -> Enrolment : isEnrolmentActive()
activate Enrolment #HoneyDew
Enrolment --> Repository : true
deactivate Enrolment
Repository -> Enrolment : deactivateEnrolment()
activate Enrolment #HoneyDew
Enrolment -> Status : new EnrolmentStatus(false)
activate Status #HoneyDew
Status --> Enrolment : EnrolmentStatus(false)
deactivate Status
Enrolment --> Repository : Enrolment status set to inactive
deactivate Enrolment
Repository --> Service : Enrolment status set to inactive
deactivate Repository

' Step 5: Persist updated enrolment
Service -> Repository: save(courseEditionEnrolment)
activate Repository #HoneyDew
Repository -> Mapper: toDataModel(courseEditionEnrolment)
activate Mapper #HoneyDew
create "ceeDataModel: \nCourseEditionEnrolment\nDataModel" as DataModel #E1F5FE
Mapper -> DataModel :create (ceeDM)
deactivate Mapper
Repository -> SpringDataRepo: save(CourseEditionEnrolmentDataModel)
activate SpringDataRepo #HoneyDew
SpringDataRepo --> Repository: saved
deactivate SpringDataRepo
Repository --> Service: saved
deactivate Repository

' Step 6: Response flow back
Service --> Controller: true
deactivate Service
Controller --> UI: true
deactivate Controller
UI --> ASC: Enrolment successfully\n removed!
deactivate UI


@enduml

@startuml
skinparam sequenceMessageAlign center
skinparam sequenceLifeLineBackgroundColor lightblue
autonumber
actor ASC
participant ":UI" as UI
participant "ctrl1 : EnrolAStudentInProgrammeController" as CTRL #lightgreen
participant "peService : ProgrammeEnrolmentService" as PEService #silver
participant "stdRepo" as StudentRepo #lightblue
participant "<<Interface>>IStudentRepositorySpringData" as IStudentRepoSpringData #lightyellow
participant "amRepo" as AccessMethodRepo #lightblue
participant "<<Interface>>IAccessMethodRepositorySpringData" as IAMRepoSpringData #lightyellow
participant "pRepo" as ProgrammeRepo #lightblue
participant "<<Interface>>IProgrammeRepositorySpringData" as IProgrammeRepoSpringData #lightyellow
participant "peRepo" as ProgrammeEnrolmentRepo #lightblue
participant "pef : ProgrammeEnrolmentFactoryImpl" as PEFactory
participant "ProgrammeEnrolmentMapper" as PEMapper
participant "pe : ProgrammeEnrolment" as ProgrammeEnrolment
participant "peDataModel : ProgrammeEnrolmentDataModel" as PEDataModel
participant "<<Interface>>IProgrammeEnrolmentRepositorySpringData" as IPERepoSpringData #lightyellow


ASC -> UI : I want to enrol a student in a programme.
activate UI
UI --> ASC : Student?
deactivate UI
ASC -> UI : uniqueNumber
activate UI
UI --> ASC : AccessMethod?
deactivate UI
ASC -> UI : accessMethodName
activate UI
UI --> ASC : Programme?
deactivate UI
ASC -> UI : programmeAcronym
activate UI
UI --> ASC : Date?
deactivate UI
ASC -> UI : enrolmentDate
activate UI
UI -> CTRL : enrolStudentInProgramme \n (uniqueNumberDTO, accessMethodNameDTO,\n programmeAcronymDTO, enrolmentDateDTO)
activate CTRL
CTRL -> PEService : enrolStudentInProgramme \n (uniqueNumberDTO, accessMethodNameDTO,\n programmeAcronymDTO, enrolmentDateDTO)
activate PEService
|||
ref over PEService
    \t \t \t \t \t Convert DTO to VO \t
end ref
|||

PEService -> StudentRepo : getStudentIDFromUniqueNumber(uniqueNumberVO)
activate StudentRepo
StudentRepo -> IStudentRepoSpringData : findByStudentIdUniqueNumber(uniqueNumber: String);
activate IStudentRepoSpringData
IStudentRepoSpringData -> :
IStudentRepoSpringData <-- :
StudentRepo <-- IStudentRepoSpringData : studentIDVO
deactivate IStudentRepoSpringData
StudentRepo --> PEService : studentIDVO
deactivate StudentRepo

PEService -> AccessMethodRepo : getAccessMethodIDFromName(accessMethodNameVO)
activate AccessMethodRepo
AccessMethodRepo -> IAMRepoSpringData : findByAccessMethodIDUuid(accessMethodNameID: UUID)
activate IAMRepoSpringData
IAMRepoSpringData -> :
IAMRepoSpringData <-- :
AccessMethodRepo <-- IAMRepoSpringData : amIDVO
deactivate IAMRepoSpringData
AccessMethodRepo --> PEService : amIDVO
deactivate AccessMethodRepo



PEService -> ProgrammeRepo : getProgrammeIDFromAcronym(programmeAcronymVO)
activate ProgrammeRepo
ProgrammeRepo -> IProgrammeRepoSpringData : findByProgrammeIDAcronym(programmeAcronym: String)
activate IProgrammeRepoSpringData
IProgrammeRepoSpringData -> :
IProgrammeRepoSpringData <-- :
ProgrammeRepo <-- IProgrammeRepoSpringData : pIDVO
deactivate IProgrammeRepoSpringData
ProgrammeRepo --> PEService : pIDVO
deactivate ProgrammeRepo

PEService -> ProgrammeEnrolmentRepo: enrolStudent(studentIDVO, amIDVO, pIDVO, enrolmentDateVO)
activate ProgrammeEnrolmentRepo
ProgrammeEnrolmentRepo -> PEFactory: createProgrammeEnrolment\n(studentIDVO, amIDVO, pIDVO, enrolmentDateVO)
activate PEFactory
PEFactory -> ProgrammeEnrolment**: createProgrammeEnrolment\n(studentIDVO, amIDVO, pIDVO, enrolmentDateVO)

activate ProgrammeEnrolment
ProgrammeEnrolment -> ProgrammeEnrolment : validateAndFormatDate(date)
ProgrammeEnrolment --> PEFactory: pe
deactivate ProgrammeEnrolment
PEFactory --> ProgrammeEnrolmentRepo: pe
deactivate PEFactory

ProgrammeEnrolmentRepo -> ProgrammeEnrolment : getProgrammeEnrolmentID(programmeEnrolment)
activate ProgrammeEnrolment
ProgrammeEnrolment -> ProgrammeEnrolmentRepo : peID
deactivate ProgrammeEnrolment

ProgrammeEnrolmentRepo -> : existsByID(peID)
ProgrammeEnrolmentRepo <-- : false

ProgrammeEnrolmentRepo -> PEMapper : toDataModel(pe)
activate PEMapper
PEMapper -> PEDataModel : createPEDataModel(pe)
activate PEDataModel
PEDataModel -> PEMapper : peDataModel
deactivate PEDataModel
PEMapper -> ProgrammeEnrolmentRepo : peDataModel
deactivate PEMapper

ProgrammeEnrolmentRepo -> IPERepoSpringData : save(peDataModel)
activate IPERepoSpringData
IPERepoSpringData ->
IPERepoSpringData <--
IPERepoSpringData --> ProgrammeEnrolmentRepo :
deactivate IPERepoSpringData


ProgrammeEnrolmentRepo --> PEService: True
deactivate ProgrammeEnrolmentRepo

PEService -> CTRL : True

CTRL --> UI : True
deactivate CTRL
UI --> ASC : Success
deactivate UI
Deactivate IPERepoSpringData

@enduml
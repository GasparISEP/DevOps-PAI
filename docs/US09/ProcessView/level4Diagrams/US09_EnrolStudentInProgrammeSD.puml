@startuml
skinparam Shadowing true
skinparam sequenceLifeLineBackgroundColor lightblue
autonumber

participant ":Router" as RO
participant "ctrl1 : ProgrammeEnrolmentRESTController" as CTRL #lightgreen
participant "peService : ProgrammeEnrolmentService" as PEService #silver
participant "pef : ProgrammeEnrolmentFactoryImpl" as PEFactory
participant "ProgrammeEnrolmentRepositorySpringData" as ProgrammeEnrolmentRepo #lightblue
participant "ProgrammeEnrolmentMapper" as PEMapper
participant "peIDDataModel : PEIDMapper" as PEIDMapper
participant "programmeIDDataModel : ProgrammeIDMapper" as ProgrammeIDMapper
participant "studentIDDataModel : StudentIDDataModel" as StudentIDMapper
participant "amIDDataModel : AMIDMapper" as AMIDMapper
participant "peDomain : ProgrammeEnrolment" as ProgrammeEnrolment
participant "<<Interface>>IProgrammeEnrolmentRepositorySpringData" as IPERepoSpringData #lightyellow
participant Date
participant "peDataModel : ProgrammeEnrolmentDataModel" as PEDataModel


[o-> RO ++: POST / students/enrol-programme /\n{studentID, accessMethodID, programmeAcronym, date}\t
RO -> CTRL++: enrolStudentInProgramme \n (programmeEnrolmentDTO)
|||
ref over CTRL
    \t \t \t \t \t \t Convert DTO to VO \t

end ref
|||
CTRL -> PEService : enrolStudentInProgramme \n (studentID, accessMethodID,\n programmeID, dateVO)
activate PEService


PEService -> PEFactory: createProgrammeEnrolment\n(studentID, accessMethodID,\n programmeID, dateVO)
activate PEFactory
PEFactory -> ProgrammeEnrolment**: createProgrammeEnrolment\n(studentID, accessMethodID,\n programmeID, dateVO)

activate ProgrammeEnrolment
ProgrammeEnrolment -> ProgrammeEnrolment : validateAndFormatDate(date)
ProgrammeEnrolment --> PEFactory: peDomain
deactivate ProgrammeEnrolment

PEFactory --> PEService: peDomain
deactivate PEFactory

PEService -> ProgrammeEnrolment : getProgrammeEnrolmentID(programmeEnrolment)
activate ProgrammeEnrolment
ProgrammeEnrolment --> PEService : peIDDomain
deactivate ProgrammeEnrolment

PEService -> ProgrammeEnrolmentRepo : containsOfIdentity(peIDDomain)
activate ProgrammeEnrolmentRepo
ProgrammeEnrolmentRepo -> PEIDMapper : toDomain(peIDDomain)
activate PEIDMapper
PEIDMapper -> ProgrammeEnrolmentRepo : peIDDataModel
deactivate PEIDMapper
ProgrammeEnrolmentRepo -> IPERepoSpringData : existsById(peIDDataModel)
activate IPERepoSpringData
IPERepoSpringData -> IPERepoSpringData : Validate if\nalready exists

ProgrammeEnrolmentRepo <-- IPERepoSpringData : false
deactivate IPERepoSpringData
PEService <-- ProgrammeEnrolmentRepo : false
deactivate ProgrammeEnrolmentRepo

PEService -> ProgrammeEnrolmentRepo : save(peDomain)
activate ProgrammeEnrolmentRepo

ProgrammeEnrolmentRepo -> PEMapper : toDataModel(peDomain)
activate PEMapper
PEMapper -> PEIDMapper : toDataModel(peIDDomain)
activate PEIDMapper
PEIDMapper -> ProgrammeEnrolment : getProgrammeEnrolmentID(peDomain)
activate ProgrammeEnrolment
ProgrammeEnrolment --> PEIDMapper : peIDDomain
deactivate ProgrammeEnrolment
PEIDMapper --> PEMapper : peIDDataModel
deactivate PEIDMapper

PEMapper -> ProgrammeIDMapper : toData(programmeIDDomain)
activate ProgrammeIDMapper
ProgrammeIDMapper -> ProgrammeEnrolment : getProgrammeID(peDomain)
activate ProgrammeEnrolment
ProgrammeEnrolment --> ProgrammeIDMapper : programmeIDDomain
deactivate ProgrammeEnrolment
ProgrammeIDMapper --> PEMapper : programmeIDDataModel
deactivate ProgrammeIDMapper

PEMapper -> StudentIDMapper : domainToDataModel(studentIDDomain)
activate StudentIDMapper
StudentIDMapper -> ProgrammeEnrolment : getStudentID(peDomain)
activate ProgrammeEnrolment
ProgrammeEnrolment --> StudentIDMapper : studentIDDomain
deactivate ProgrammeEnrolment
StudentIDMapper --> PEMapper : studentIDDataModel
deactivate StudentIDMapper

PEMapper -> AMIDMapper : toDataModel(amIDDomain)
activate AMIDMapper
AMIDMapper -> ProgrammeEnrolment : getAccessMethodID(peDomain)
activate ProgrammeEnrolment
ProgrammeEnrolment --> AMIDMapper : amIDDomain
deactivate ProgrammeEnrolment
AMIDMapper --> PEMapper : amIDDataModel
deactivate AMIDMapper

PEMapper -> ProgrammeEnrolment : getDate(peDomain)
activate ProgrammeEnrolment
ProgrammeEnrolment -> Date : getLocalDate(Date)
activate Date
Date --> ProgrammeEnrolment : localDate
deactivate Date
ProgrammeEnrolment --> PEMapper : localDate
deactivate ProgrammeEnrolment

PEMapper -> PEDataModel : createPEDataModel(peIDDataModel, programmeIDDataModel, studentIDDataModel, amIDDataModel, localDate)
activate PEDataModel
PEDataModel --> PEMapper : peDataModel
deactivate PEDataModel
PEMapper --> ProgrammeEnrolmentRepo : peDataModel
deactivate PEMapper

ProgrammeEnrolmentRepo -> IPERepoSpringData : save(peDataModel)
activate IPERepoSpringData
IPERepoSpringData -> IPERepoSpringData : Saves in Database
IPERepoSpringData --> ProgrammeEnrolmentRepo : peDataModel
deactivate IPERepoSpringData

ProgrammeEnrolmentRepo --> PEMapper : toDomain(peDataModel)
activate PEMapper

PEMapper --> PEDataModel : getProgrammeEnrolmentID()
activate PEDataModel
PEDataModel --> PEMapper : peID
deactivate PEDataModel

PEMapper --> PEDataModel : getAccessMethodID()
activate PEDataModel
PEDataModel --> PEMapper : amIDDataModel
deactivate PEDataModel

PEMapper --> PEDataModel : getDate()
activate PEDataModel
PEDataModel --> PEMapper : date
deactivate PEDataModel

PEMapper --> ProgrammeEnrolmentRepo : pe
deactivate PEMapper

ProgrammeEnrolmentRepo --> PEService: true
deactivate ProgrammeEnrolmentRepo


PEService --> CTRL : pe
deactivate PEService

CTRL --> RO : peDTO:ProgrammeEnrolmentResponseDTO
deactivate CTRL
[o<-- RO --:201 Created /\n{programmeEnrolmentGID, studentID,\naccessMethodID, programmeID, date,\n_links: {self: students/enroll}}

@enduml
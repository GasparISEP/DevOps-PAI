@startuml
'https://plantuml.com/sequence-diagram

skinparam ranksep 180
skinparam nodesep 180

class Student {
    -_uniqueNumber:int
    -_name:String
    -_NIF:String
    -_phone:String
    -_email:String
    +Student(uniqueNumber: int, name: String, NIF: String, phone: String, email: String, address: Address)
    +isStudentRepeated(students: List<Student>)
    +hasSameUniqueNumber(Student : student)
}

class AccessMethod {
    -_name:String
    +AccessMethod(name:String)
}

class Programme {
     - name: string
     - acronym: string
     - quantityOfEcts: int
     - quantityOfSemesters: int
     - degreeType: DegreeType
     - department: Department
     - programmeDirector: Teacher
     -_courseList: List <Course>
     -StudyPlan: _studyPlan
     +Programme(name: String, acronym; String, quantityOfEcts: int, quantityOfSemesters; int, degreeType: DegreeType, department: Department, programmeDirector: Teacher, programmeCourseListFactory: ProgrammeCourseListFactory)
     + equals()
     +isEquals((programme: Programme)
     + addCourseToAProgramme (course: Course)
     + newProgrammeDirector(teacherDirector: Teacher)
     +isInDepartment(department: Department)
     +getCourseList()
     +getQuantityOfSemester()
     +getQuantityOfEcts()
     +getStudyPlan()
     +calculateNumberOfYears(quantityOfSemesters: int)
     +hasThisProgrammeName(name: String)
     +getAcronym()
     +getProgrammeName()
     +getDegreeType()
     +getDepartment()
     +getProgrammeDirector()
     +getProgrammeCourseList()
 }

 class ProgrammeEnrolment {
     -enrolmentDate: LocalDate
     +ProgrammeEnrolment(student: Student, accessMethod: AccessMethod, programme: Programme, date: LocalDate)
     +hasSameStudent(student: Student)
     +hasSameEnrolment(programmeEnrolment: ProgrammeEnrolment)
     +hasSameProgramme(programme: Programme)
 }

 class ProgrammeEnrolmentFactory {
    +createProgrammeEnrolment(student: Student, accessMethod: AccessMethod, programme: Programme, date: String)
 }

interface ProgrammeEnrolmentFactoryInterface {
    +createProgrammeEnrolment(student: Student, accessMethod: AccessMethod, programme: Programme, date: String)
}

class ProgrammeEnrolmentRepository {
     +ProgrammeEnrolmentRepository(programmeEnrolmentFactory: ProgrammeEnrolmentFactory, programmeEnrolmentRepositoryListFactory ProgrammeEnrolmentRepositoryList
     +enrolStudents (student : Student, accessMethod : AccessMethod, programme : Programme, enrolmentDate: String)
     +isStudentEnrolled (student : Student, programme : Programme)
}

class ProgrammeEnrolmentRepositoryListFactory {
    +newArrayList()
}

interface ProgrammeEnrolmentRepositoryListFactoryInterface {
    +newArrayList()
}

class US09_EnrollStudentInProgrammeController {
     + US09_EnrollStudentInProgrammeController(StudentRepository, AccessMethodRepository, ProgrammeList, EnrolmentRepository)
     + getStudentByUniqueNumber(uniqueNumber: int): Optional<Student>
     + getAccessMethodByName(accessMethod: String): Optional<AccessMethod>
     + getProgrammeByName(programmeName: String): Optional<Programme>
     + enrolStudent(s1: Student, am1: AccessMethod, p1: Programme, date: String): boolean
}

class StudentRepository {
    +registerStudent(uniqueNumber: int, name: String, NIF: String, phone: String, email: String, address: Address)
    +isStudentEnrolledInProgramme(Student student, Programme programme)
}

class AccessMethodRepository {
    +AccessMethodRepository()
    +registerAccessMethod (accessMethodName: String)
    +isAccessMethodRegistered(accessMethod: AccessMethod)
}

class ProgrammeList {
     +registerProgramme(String : name, String : acronym, int : quantityOfEcts, int quantityOfSemesters, int degreeType: DegreeType; Department : department, Teacher programmeDirector)
     +changeProgrammeDirector(Programme programme, Teacher newDirector)
     +getAllProgrammes()
     +getCourseList(programme: Programme)
}

StudentRepository "1" --> "students \n*" Student
AccessMethodRepository "1" --> "_accessMethodList \n*" AccessMethod
ProgrammeList "1   " ---> "_programmeList *" Programme
Student "_student \n1" <-- "*" ProgrammeEnrolment
AccessMethod "_accessmethod \n1" <-- "*" ProgrammeEnrolment
Programme "_programme \n1"  <-r- "*" ProgrammeEnrolment
US09_EnrollStudentInProgrammeController "1" .r.> "_studentRepository \n1\n" StudentRepository
US09_EnrollStudentInProgrammeController "1" ..> "_accessmethodRepository \n1" AccessMethodRepository
US09_EnrollStudentInProgrammeController "1" ..l.> "_programmeList \n1\n" ProgrammeList
US09_EnrollStudentInProgrammeController "1" ..> "_programmeEnrolmentRepository \n1\n" ProgrammeEnrolmentRepository
ProgrammeEnrolmentRepository"1" --> "_programmeEnrolmentFactory \n1"ProgrammeEnrolmentFactory
ProgrammeEnrolmentFactory"1" --> "1..*"ProgrammeEnrolment
ProgrammeEnrolmentFactoryInterface <|.. ProgrammeEnrolmentFactory
ProgrammeEnrolmentRepositoryListFactory"_programmeEnrolmentListFactory \n1" <-- "1"ProgrammeEnrolmentRepository
ProgrammeEnrolmentRepositoryListFactoryInterface <|.. ProgrammeEnrolmentRepositoryListFactory

@enduml
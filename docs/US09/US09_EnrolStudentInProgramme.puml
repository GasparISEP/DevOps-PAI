@startuml
skinparam sequenceMessageAlign center

actor ASC
participant ":UI" as UI
participant "ctrl1:EnrolAStudentInProgrammeController" as CTL
participant "sr1:StudentRepository" as StudentRepo
participant "s[i]:Student" as Student
participant "amr1:AccessMethodRepository" as AccessMethodRepo
participant "am[i]:AccessMethod" as AccessMethod
participant "prL1:ProgrammeList" as ProgrammeList
participant "p[i]:Programme" as Programme
participant "per1:ProgrammeEnrolmentRepository" as EnrolmentRepo
participant "pef1:ProgrammeEnrolmentFactory" as ProgrammeEnrolmentFactory
participant "pe[i]:ProgrammeEnrolment" as ProgrammeEnrolment
participant "pe1:ProgrammeEnrolment" as ProgrammeEnrolment1

ASC -> UI : I want to enrol a student in a programme.
activate UI
UI --> ASC : Student?
ASC -> UI : uniqueNumber
UI --> ASC : AccessMethod?
ASC -> UI : accessMethodName
UI --> ASC : Programme?
ASC -> UI : programmeName
UI --> ASC : Date?
ASC -> UI : enrolmentDate
UI -> CTL : I want to enrol a Student in a Programme \n (uniqueNumber, accessMethodName, programmeName, enrolmentDate)
activate CTL
CTL -> StudentRepo : getStudentByUniqueNumber(uniqueNumber)
activate StudentRepo

loop for each Student in StudentRepo
    StudentRepo -> Student : hasThisUniqueNumber(uniqueNumber)
    activate Student
    Student --> StudentRepo : True
    deactivate Student
end
StudentRepo --> CTL : s1
deactivate StudentRepo

CTL -> AccessMethodRepo : getAccessMethodByName(name)
activate AccessMethodRepo
loop for each AccessMethod in AccessMethodRepository
    AccessMethodRepo -> AccessMethod : hasThisAccessMethodName(accessMethodName)
    activate AccessMethod
    AccessMethod --> AccessMethodRepo : True
    deactivate AccessMethod
end
AccessMethodRepo --> CTL : am1
deactivate AccessMethodRepo

CTL -> ProgrammeList : getProgrammeByName(name)
activate ProgrammeList
loop for each Programme in ProgrammeList
    ProgrammeList -> Programme : hasThisName(programmeName)
    activate Programme
    Programme --> ProgrammeList : True
    deactivate Programme
end
ProgrammeList --> CTL : p1
deactivate ProgrammeList

CTL -> EnrolmentRepo: enrolStudent(s1, am1, p1, enrolmentDate)
activate EnrolmentRepo
create "pe1:ProgrammeEnrolment" as ProgrammeEnrolment
EnrolmentRepo -> ProgrammeEnrolmentFactory: createProgrammeEnrolment(student, accessMethod, programme, enrolmentDate)
activate ProgrammeEnrolmentFactory
ProgrammeEnrolmentFactory -> ProgrammeEnrolment1**: createProgrammeEnrolment(student, accessMethod, programme, enrolmentDate)

activate ProgrammeEnrolment1
ProgrammeEnrolment1 -> ProgrammeEnrolment1 : validateAndFormatDate(date)
ProgrammeEnrolment1 --> ProgrammeEnrolmentFactory: pe1
deactivate ProgrammeEnrolment1
ProgrammeEnrolmentFactory --> EnrolmentRepo: pe1
deactivate ProgrammeEnrolmentFactory


EnrolmentRepo -> EnrolmentRepo : isEnrolmentRepeated

loop for each Enrolment in enrolmentRepository
    EnrolmentRepo -> ProgrammeEnrolment : hasSameEnrolment(pe1)
    activate ProgrammeEnrolment
    ProgrammeEnrolment --> EnrolmentRepo : False
    deactivate ProgrammeEnrolment
end

EnrolmentRepo -> EnrolmentRepo: enrolmentList.add(pe1)
EnrolmentRepo --> CTL: True
deactivate EnrolmentRepo
CTL --> UI : True
deactivate CTL
UI --> ASC : Success
deactivate UI
Deactivate EnrolmentRepo

@enduml
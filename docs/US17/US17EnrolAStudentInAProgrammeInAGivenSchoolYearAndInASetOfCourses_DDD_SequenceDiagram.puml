@startuml
autonumber
skinparam sequence {
LifeLineBorderColor Grey
LifeLineBackgroundColor HoneyDew
}
title US17 - enrol a student in a programme in a given school year and in a set of courses
actor ASC
participant ":UI" as UI
ASC -> UI : I want to enrol a student in a programme in a given school year and in a set of courses.
activate UI
UI --> ASC : What student?
deactivate UI
ASC -> UI : Enter the student!

'' Get Programmes

activate UI
participant ":US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController" as Controller
UI -> Controller : getAllProgrammesID()
activate Controller
participant ":IProgrammeRepository" as ProgrammeRepository
Controller -> ProgrammeRepository : getAllProgrammesID()
activate ProgrammeRepository
participant ":ProgrammeRepositoryListFactoryImpl" as ProgrammeRepositoryListFactoryImpl
ProgrammeRepository -> ProgrammeRepositoryListFactoryImpl : copyProgrammeArrayList(List<ProgrammeID>)
activate ProgrammeRepositoryListFactoryImpl
create "copyPgmList[i]:ProgrammeRepositoryListFactory"
ProgrammeRepositoryListFactoryImpl -> "copyPgmList[i]:ProgrammeRepositoryListFactory": copyProgrammeArrayList(List<ProgrammeID>)
activate "copyPgmList[i]:ProgrammeRepositoryListFactory"
"copyPgmList[i]:ProgrammeRepositoryListFactory" --> ProgrammeRepositoryListFactoryImpl: EmptyList<ProgrammeID>
deactivate "copyPgmList[i]:ProgrammeRepositoryListFactory"
ProgrammeRepositoryListFactoryImpl --> ProgrammeRepository : copyOfProgrammeIDList
deactivate ProgrammeRepositoryListFactoryImpl
ProgrammeRepository --> Controller : copyOfProgrammeIDList
deactivate ProgrammeRepository
Controller --> UI : listOfProgrammesID
deactivate Controller
UI --> ASC : Here is the list of Programmes! What programme do you want?
deactivate UI
ASC -> UI : Enter the programme!

'' Get SchoolYears

activate UI
participant ":ISchoolYearRepository" as SchoolYearRepository
UI -> Controller : getAllSchoolYearsID()
activate Controller
participant ":SchoolYearRepository" as SchoolYearRepository
Controller -> SchoolYearRepository : getAllSchoolYearsID()
activate SchoolYearRepository
participant ":SchoolYearRepositoryListFactoryImpl" as SchoolYearRepositoryListFactoryImpl
SchoolYearRepository -> SchoolYearRepositoryListFactoryImpl : copySchoolYearArrayList(List<SchoolYearID>)
activate SchoolYearRepositoryListFactoryImpl
create "copySchoolYearIDList[i]:SchoolYearRepositoryListFactory"
SchoolYearRepositoryListFactoryImpl -> "copySchoolYearIDList[i]:SchoolYearRepositoryListFactory": copySchoolYearArrayList(List<SchoolYearID>)
activate "copySchoolYearList[i]:SchoolYearRepositoryListFactory"
"copySchoolYearList[i]:SchoolYearRepositoryListFactory" --> SchoolYearRepositoryListFactoryImpl: EmptyList<SchoolYearID>
deactivate "copySchoolYearList[i]:SchoolYearRepositoryListFactory"
SchoolYearRepositoryListFactoryImpl --> SchoolYearRepository : copyOfSchoolYearIDList
deactivate SchoolYearRepositoryListFactoryImpl
SchoolYearRepository --> Controller : copyOfSchoolYearsIDList
deactivate SchoolYearRepository
Controller --> UI : listOfSchoolYearsID
deactivate Controller
UI --> ASC : Here is the list SchoolYears! What schoolYear do you want?
deactivate UI
ASC -> UI : Enter the schoolYear!
activate UI
UI --> ASC : Sure?
deactivate UI
ASC -> UI : Yes!

activate UI
UI -> Controller : enrolStudentInProgrammeEditionAndSetOfCoursesEditions(studentID, programmeID, schoolYearID)
activate Controller
participant ":IProgrammeEnrolmentRepository" as ProgrammeEnrolmentRepository

'' Is Student Enrolled

Controller -> ProgrammeEnrolmentRepository : isStudentEnrolled(studentID, programmeID)
activate ProgrammeEnrolmentRepository
participant "e[i]:ProgrammeEnrolment" as Enrolment
loop for each "e[i]:ProgrammeEnrolment" as Enrolment
ProgrammeEnrolmentRepository -> Enrolment : StudentID: getStudentFromEnrolment()
ProgrammeEnrolmentRepository -> Enrolment : ProgrammeID: getProgrammeFromEnrolment()
end
deactivate Enrolment
ProgrammeEnrolmentRepository --> Controller : True

'' Find Programme Edition by SchoolYear and Programme

deactivate ProgrammeEnrolmentRepository
participant ":IProgrammeEditionRepository" as ProgrammeEditionRepository
Controller -> ProgrammeEditionRepository : findProgrammeEditionBySchoolYearAndProgramme(programmeID, schoolYearID)
activate ProgrammeEditionRepository
participant ":ProgrammeEdition" as ProgrammeEdition
loop for each "pe[i]:ProgrammeEditionRepository" as ProgrammeEditionRepository
ProgrammeEditionRepository -> ProgrammeEdition : programmeEditionID : findProgrammeInProgrammeEdition(programmeID)
ProgrammeEditionRepository -> ProgrammeEdition : programmeEditionID : findSchoolYearInProgrammeEdition(schoolYearID)
ProgrammeEdition --> ProgrammeEditionRepository : peID
end
ProgrammeEditionRepository --> Controller :  peID
deactivate ProgrammeEditionRepository

'' Is Student Enrolled in This Programme Edition

participant ":IProgrammeEditionEnrolmentRepository" as ProgrammeEditionEnrolmentRepository
Controller -> ProgrammeEditionEnrolmentRepository : isStudentEnrolledInThisProgrammeEdition(studentID, peID)
activate ProgrammeEditionEnrolmentRepository
participant ":ProgrammeEditionEnrolment" as ProgrammeEditionEnrolment
loop for each "pee[i]:ProgrammeEditionEnrolmentRepository" as ProgrammeEditionEnrolmentRepository
participant ":Student" as Student
ProgrammeEditionEnrolmentRepository -> ProgrammeEditionEnrolmentID: ProgrammeEditionEnrolment: findProgrammeEditionInEnrolment()
ProgrammeEditionEnrolmentRepository -> Student: ProgrammeEditionEnrolmentID: getUniqueNumber()
participant ":ProgrammeEditionEnrolment" as ProgrammeEditionEnrolment
end
ProgrammeEditionEnrolmentRepository --> Controller : False
deactivate "ProgrammeEditionEnrolmentRepository"

'' Enroll Student in Programme Edition

Controller -> ProgrammeEditionEnrolmentRepository : enrollStudentInProgrammeEdition(studentID, peID)
activate "ProgrammeEditionEnrolmentRepository"
participant ":IProgrammeEditionEnrolmentFactory" as IProgrammeEditionEnrolmentFactory
ProgrammeEditionEnrolmentRepository -> IProgrammeEditionEnrolmentFactory: newProgrammeEditionEnrolment(studentID, peID)
activate IProgrammeEditionEnrolmentFactory
create "peeID:ProgrammeEditionEnrolment"
IProgrammeEditionEnrolmentFactory -> "peeID:ProgrammeEditionEnrolment" : newProgrammeEditionEnrolment(studentID, peID)
activate "peeID:ProgrammeEditionEnrolment"
"peeID:ProgrammeEditionEnrolment" --> IProgrammeEditionEnrolmentFactory: peeID
deactivate "peeID:ProgrammeEditionEnrolment"
IProgrammeEditionEnrolmentFactory --> ProgrammeEditionEnrolmentRepository: peeID
deactivate IProgrammeEditionEnrolmentFactory
create "pe[i]:ProgrammeEditionIDArrayList"
ProgrammeEditionEnrolmentRepository -> "pe[i]:ProgrammeEditionIDArrayList":  add(peeID)
activate "pe[i]:ProgrammeEditionIDArrayList"
ProgrammeEditionEnrolmentRepository <-- "pe[i]:ProgrammeEditionIDArrayList":  True
deactivate "pe[i]:ProgrammeEditionIDArrayList"
ProgrammeEditionEnrolmentRepository --> Controller : True
deactivate ProgrammeEditionEnrolmentRepository

'' Find Course Edition by Programme Edition

participant ":ICourseEditionRepository" as CourseEditionRepository
Controller -> CourseEditionRepository : findCourseEditionsByProgrammeEdition(peeID)
participant ":CourseEdition" as CourseEdition
activate CourseEditionRepository
participant ":CourseEditionListFactory" as CourseEditionListFactory
CourseEditionRepository -> CourseEditionListFactory: newArrayList()
activate CourseEditionListFactory
create "ce[i]:CourseEditionIDArrayList"
CourseEditionListFactory -> "ce[i]:CourseEditionIDArrayList": newArrayList ()
activate "ce[i]:CourseEditionIDArrayList"
"ce[i]:CourseEditionIDArrayList" --> CourseEditionListFactory: EmptyList<CourseEditionID>
deactivate "ce[i]:CourseEditionIDArrayList"
CourseEditionListFactory --> CourseEditionRepository: EmptyList<CourseEditionID>
deactivate CourseEditionListFactory
loop for each "ce[i]:CourseEditionRepository" as CourseEditionRepository
CourseEditionRepository -> CourseEdition :  whatProgrammeEditionBelongsThisCourseEdition()
activate CourseEdition
CourseEdition --> CourseEditionRepository : ceID
deactivate CourseEdition
participant ":CourseEditionArrayList" as CourseEditionArrayList
CourseEditionRepository -> "ce[i]:CourseEditionArrayList" :  add(ceID)
activate "ce[i]:CourseEditionArrayList"
"ce[i]:CourseEditionArrayList" --> CourseEditionRepository: True
deactivate "ce[i]:CourseEditionArrayList"
end
participant ":ICourseEditionEnrolmentRepository" as CourseEditionEnrolmentRepository
CourseEditionRepository -> CourseEditionEnrolmentRepository : ListOfCourseEditionID
deactivate CourseEditionRepository
participant ":CourseEditionEnrolment" as CourseEditionEnrolment
activate CourseEditionEnrolmentRepository
loop for each "cee[i]:CourseEditionEnrolmentRepository" as CourseEditionEnrolmentRepository
CourseEditionEnrolmentRepository -> CourseEditionEnrolment : findByStudentAndEdition(studentID, cee[i])
CourseEditionEnrolmentRepository -> CourseEditionEnrolment : isPresent()
create CourseEditionEnrolmentHashSet
CourseEditionEnrolmentRepository -> CourseEditionEnrolmentHashSet : enrolStudentInACourseEdition(studentID, ceeID)
activate CourseEditionEnrolmentHashSet
CourseEditionEnrolmentHashSet --> CourseEditionEnrolmentRepository : True
deactivate CourseEditionEnrolmentHashSet
end
CourseEditionEnrolmentRepository --> Controller : True
deactivate CourseEditionEnrolmentRepository
Controller --> UI : True
deactivate Controller
UI --> ASC: OK!
deactivate UI

@enduml
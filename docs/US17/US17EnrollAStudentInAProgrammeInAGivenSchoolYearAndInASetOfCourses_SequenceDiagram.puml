@startuml
title US17 - enroll a student in a programme in a given school year and in a set of courses
actor ASC
participant ":UI" as UI
ASC -> UI : I want to enroll a student in a programme in a given school year and in a set of courses.
activate UI
UI --> ASC : What student?
deactivate UI
ASC -> UI : Enter the student!
activate UI
participant ":US17_EnrollStudentInProgrammeEditionAndSetOfCoursesEditionsController" as Controller
UI -> Controller : getAllProgrammes()
activate Controller
participant ":ProgrammeList" as ProgrammeList
Controller -> ProgrammeList : getAllProgrammes()
activate ProgrammeList
participant ":ProgrammeListArrayListFactory" as ProgrammeListArrayListFactory
ProgrammeList -> ProgrammeListArrayListFactory : copyProgrammeArrayList(List<Programme>)
activate ProgrammeListArrayListFactory
create "copyPgmList[i]:ProgrammeListArrayListFactory"
ProgrammeListArrayListFactory -> "copyPgmList[i]:ProgrammeListArrayListFactory": copyProgrammeArrayList(List<Programme>)
activate "copyPgmList[i]:ProgrammeListArrayListFactory"
"copyPgmList[i]:ProgrammeListArrayListFactory" --> ProgrammeListArrayListFactory: EmptyList<Programme>
deactivate "copyPgmList[i]:ProgrammeListArrayListFactory"
ProgrammeListArrayListFactory --> ProgrammeList : copyOfProgrammeList
deactivate ProgrammeListArrayListFactory


ProgrammeList --> Controller : copyOfProgrammeList
deactivate ProgrammeList
Controller --> UI : listOfProgrammes
deactivate Controller
UI --> ASC : Here is the list of Programmes! What programme do you want?
deactivate UI
ASC -> UI : Enter the programme!
activate UI
participant ":SchoolYearRepository" as SchoolYearRepository
UI -> Controller : getAllSchoolYears()
activate Controller
Controller -> SchoolYearRepository : getAllSchoolYears()
activate SchoolYearRepository
SchoolYearRepository --> Controller : listOfSchoolYears
deactivate SchoolYearRepository
Controller --> UI : listOfSchoolYears
deactivate Controller
UI --> ASC : Here is the list SchoolYears! What schoolYear do you want?
deactivate UI
ASC -> UI : Enter the schoolYear!
activate UI
UI --> ASC : Sure?
deactivate UI
ASC -> UI : Yes!
activate UI
UI -> Controller : enrollStudentInProgrammeEditionAndSetOfCoursesEditions(student, programme, schoolYear)
activate Controller
participant ":ProgrammeEnrolmentRepository" as ProgrammeEnrolmentRepository
Controller -> ProgrammeEnrolmentRepository : isStudentEnrolled(student, programme)
activate ProgrammeEnrolmentRepository
participant "e[i]:ProgrammeEnrollment" as Enrollment
loop for each "e[i]:ProgrammeEnrollment" as Enrolment
ProgrammeEnrolmentRepository -> Enrollment : Student: getStudentFromEnrolment()
ProgrammeEnrolmentRepository -> Enrollment : Programme: getProgrammeFromEnrolment()
end
deactivate Enrollment
ProgrammeEnrolmentRepository --> Controller : True
deactivate ProgrammeEnrolmentRepository
participant ":ProgrammeEditionRepository" as ProgrammeEditionRepository
Controller -> ProgrammeEditionRepository : findProgrammeEditionBySchoolYearAndProgramme(programme, schoolYear)
activate ProgrammeEditionRepository
participant ":ProgrammeEdition" as ProgrammeEdition
loop for each "pe[i]:ProgrammeEditionRepository" as ProgrammeEditionRepository
ProgrammeEditionRepository -> ProgrammeEdition : programmeEdition : findProgrammeInProgrammeEdition(programme)
ProgrammeEditionRepository -> ProgrammeEdition : programmeEdition : findSchoolYearInProgrammeEdition(schoolYear)
ProgrammeEdition --> ProgrammeEditionRepository : pe1
end
ProgrammeEditionRepository --> Controller :  pe1
deactivate ProgrammeEditionRepository
participant ":ProgrammeEditionEnrollmentRepo" as ProgrammeEditionEnrollmentRepo
Controller -> ProgrammeEditionEnrollmentRepo : isStudentEnrolledInThisProgrammeEdition(student, pe1)
activate ProgrammeEditionEnrollmentRepo
participant ":ProgrammeEditionEnrollment" as ProgrammeEditionEnrollment
loop for each "pee[i]:ProgrammeEditionEnrollmentRepo" as ProgrammeEditionEnrollmentRepo
participant ":Student" as Student
ProgrammeEditionEnrollmentRepo -> ProgrammeEditionEnrollment: ProgrammeEditionEnrollment: findProgrammeEditionInEnrollment()
ProgrammeEditionEnrollmentRepo -> Student: ProgrammeEditionEnrollment: getUniqueNumber()
participant ":ProgrammeEditionEnrollment" as ProgrammeEditionEnrollment
end
ProgrammeEditionEnrollmentRepo --> Controller : False
deactivate "ProgrammeEditionEnrollmentRepo"
Controller -> ProgrammeEditionEnrollmentRepo : enrollStudentInProgrammeEdition(student, pe1, LocalDate)
activate "ProgrammeEditionEnrollmentRepo"
participant ":ProgrammeEditionEnrollmentFactory" as ProgrammeEditionEnrollmentFactory
ProgrammeEditionEnrollmentRepo -> ProgrammeEditionEnrollmentFactory: createProgrammeEditionEnrollment(student, pe1, LocalDate)
activate ProgrammeEditionEnrollmentFactory
create "pee1:ProgrammeEditionEnrollment"
ProgrammeEditionEnrollmentFactory -> "pee1:ProgrammeEditionEnrollment" : createProgrammeEditionEnrollment(student, pe1, LocalDate)
activate "pee1:ProgrammeEditionEnrollment"
"pee1:ProgrammeEditionEnrollment" --> ProgrammeEditionEnrollmentFactory: pee1
deactivate "pee1:ProgrammeEditionEnrollment"
ProgrammeEditionEnrollmentFactory --> ProgrammeEditionEnrollmentRepo: pee1
deactivate ProgrammeEditionEnrollmentFactory
create "pe[i]:ProgrammeEditionArrayList"
ProgrammeEditionEnrollmentRepo -> "pe[i]:ProgrammeEditionArrayList":  add(pee1)
activate "pe[i]:ProgrammeEditionArrayList"
ProgrammeEditionEnrollmentRepo <-- "pe[i]:ProgrammeEditionArrayList":  True
deactivate "pe[i]:ProgrammeEditionArrayList"
ProgrammeEditionEnrollmentRepo --> Controller : True
deactivate ProgrammeEditionEnrollmentRepo
participant ":CourseEditionRepository" as CourseEditionRepository
Controller -> CourseEditionRepository : findCourseEditionsByProgrammeEdition(pee1)
participant ":CourseEdition" as CourseEdition
participant ":CourseEdition" as CourseEdition
activate CourseEditionRepository
CourseEditionRepository -> CourseEditionListFactory: newArrayList()
activate CourseEditionListFactory
participant ":CourseEditionListFactory" as CourseEditionListFactory
create "ce[i]:CourseEditionArrayList"
CourseEditionListFactory -> "ce[i]:CourseEditionArrayList": newArrayList ()
activate "ce[i]:CourseEditionArrayList"
"ce[i]:CourseEditionArrayList" --> CourseEditionListFactory: EmptyList<CourseEdition>
deactivate "ce[i]:CourseEditionArrayList"
CourseEditionListFactory --> CourseEditionRepository: EmptyList<CourseEdition>
deactivate CourseEditionListFactory
loop for each "ce[i]:CourseEditionRepository" as CourseEditionRepository
CourseEditionRepository -> CourseEdition :  whatProgrammeEditionBelongsThisCourseEdition()
activate CourseEdition
CourseEdition --> CourseEditionRepository : ce1
deactivate CourseEdition
participant ":CourseEditionArrayList" as CourseEditionArrayList
CourseEditionRepository -> "ce[i]:CourseEditionArrayList" :  add(ce1)
activate "ce[i]:CourseEditionArrayList"
"ce[i]:CourseEditionArrayList" --> CourseEditionRepository: True
deactivate "ce[i]:CourseEditionArrayList"
end
participant ":CourseEditionEnrollmentRepository" as CourseEditionEnrollmentRepository
CourseEditionRepository -> CourseEditionEnrollmentRepository : ListOfCourseEditions
deactivate CourseEditionRepository
participant ":CourseEditionEnrollment" as CourseEditionEnrollment
activate CourseEditionEnrollmentRepository
loop for each "cee[i]:CourseEditionEnrollmentRepository" as CourseEditionEnrollmentRepository
CourseEditionEnrollmentRepository -> CourseEditionEnrollment : findByStudentAndEdition(student, cee[i])
CourseEditionEnrollmentRepository -> CourseEditionEnrollment : isPresent()
create CourseEditionEnrollmentHashSet
CourseEditionEnrollmentRepository -> CourseEditionEnrollmentHashSet : enrollStudentInACourseEdition(student, cee1, LocalDate)
activate CourseEditionEnrollmentHashSet
CourseEditionEnrollmentHashSet --> CourseEditionEnrollmentRepository : True
deactivate CourseEditionEnrollmentHashSet
end
CourseEditionEnrollmentRepository --> Controller : True
deactivate CourseEditionEnrollmentRepository
Controller --> UI : True
deactivate Controller
UI --> ASC: OK!
deactivate UI

@enduml
@startuml
'!pragma layout smetana
'left to right direction

skinparam ranksep 30
skinparam nodesep 30
skinparam classBackgroundColor #E1F5FE
skinparam linetype ortho

class US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController {
    +US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController(
          programmeEditionEnrolmentRepo: IProgrammeEditionEnrolmentRepository,
          programmeEditionRepository: IProgrammeEditionRepository,
          programmeRepository: IProgrammeRepository,
          courseEditionEnrolmentRepository: ICourseEditionEnrolmentRepository,
          courseEditionRepository: ICourseEditionRepository,
          schoolYearRepository: ISchoolYearRepository,
          programmeEnrolmentRepository: IProgrammeEnrolmentRepository)
    +enrolStudentInProgrammeEditionAndSetOfCoursesEditionsController(studentId: StudentID, \n programmeId: ProgrammeID, schoolYearId: SchoolYearID)
    +getAllProgrammes(): List<ProgrammeID>
    +getAllSchoolYears(): List<SchoolYearID>
}

'Interfaces
interface IProgrammeEditionEnrolmentRepository {
    +enrolStudentInProgrammeEdition(studentId: StudentID, programmeEditionId: ProgrammeEditionID) : boolean
    +isStudentEnrolledInThisProgrammeEdition(studentId: StudentID, programmeEditionId: ProgrammeEditionID) : boolean
}

interface IProgrammeEditionRepository {
    +findProgrammeEditionBySchoolYearAndProgramme(programmeId: ProgrammeID, schoolYearId: SchoolYearID) : Optional<ProgrammeEditionID>
}

interface IProgrammeRepository {
    +getAllProgrammes() : List<ProgrammeID>
}

interface ICourseEditionEnrolmentRepository {
    +enrolStudentInACourseEdition (studentId: StudentID, courseEditionId: CourseEditionID) : boolean
    +findByStudentAndEdition (studentId: StudentID, courseEditionId: CourseEditionID) : Optional<CourseEditionEnrolment>
    +enrolStudentInProgrammeEditionCoursesEditions (studentId: StudentID, courseEditionsId: List<CourseEditionID>) : void
}

interface ICourseEditionRepository {
    +findCourseEditionsByProgrammeEdition(programmeEditionId: ProgrammeEditionID): List<CourseEditionId>
}

interface ISchoolYearRepository {
    +getAllSchoolYears() : List<SchoolYearId>
}

interface IProgrammeEnrolmentRepository {
    +isStudentEnrolled(studentId: StudentID, programmeId: ProgrammeID) : boolean
}

interface IProgrammeRepositoryListFactory {
    +copyProgrammeArrayList(List<ProgrammeID>)
}

interface ISchoolYearListFactory {
    +copySchoolYearArrayList(List<SchoolYear>)
}

interface IProgrammeEditionEnrolmentFactory{
    +newProgrammeEditionEnrolment(studentId: StudentID, programmeEditionId: ProgrammeEditionID)
}

interface IProgrammeEditionEnrolmentListFactory{
    +newProgrammeEditionEnrolmentList(): Set<ProgrammeEditionEnrolmentId>
}

'Repositories
class ProgrammeEditionEnrolmentRepository {
    +ProgrammeEditionEnrolmentRepository(programmeEditionEnrolmentFactory: ProgrammeEditionEnrolmentFactory,
          programmeEditionEnrolmentListFactory: ProgrammeEditionEnrolmentListFactory)
    +enrolStudentInProgrammeEdition(studentId: StudentID, programmeEditionId: ProgrammeEditionID) : boolean
    +isStudentEnrolledInThisProgrammeEdition(studentId: StudentID, programmeEditionId: ProgrammeEditionID) : boolean
}

class ProgrammeEditionRepository {
    +ProgrammeEditionRepository(programmeEditionFactory: ProgrammeEditionFactory)
    +findProgrammeEditionBySchoolYearAndProgramme(programmeId: ProgrammeID, schoolYearId: SchoolYearID) : Optional<ProgrammeEditionID>
}

class ProgrammeRepository {
    +ProgrammeRepository(programmeFactory: ProgrammeFactory)
    +getAllProgrammes() : List<ProgrammeId>
}

class CourseEditionEnrolmentRepositoryImpl {
    +CourseEditionEnrolmentRepositoryImpl ()
    +enrolStudentInACourseEdition(studentId: StudentID, courseEditionId: CourseEditionID) : boolean
    +findByStudentAndEdition(studentId: StudentID, courseEditionId: CourseEditionID) : Optional<CourseEditionEnrolment>
    +enrolStudentInProgrammeEditionCoursesEditions(studentId: StudentID, courseEditions: List<CourseEditionID>) : void
}

class CourseEditionRepository {
    +CourseEditionRepository(courseEditionFactory: CourseEditionFactory)
    +findCourseEditionsByProgrammeEdition(programmeEdition: ProgrammeEdition) : List<CourseEditionID>
}

class SchoolYearRepository {
    +SchoolYearRepository(schoolYearFactory: SchoolYearFactory, schoolYearListFactory: SchoolYearListFactory)
    +getAllSchoolYears() : List<SchoolYearID>
}

class ProgrammeEnrolmentRepository {
    +ProgrammeEnrolmentRepository()
    +isStudentEnrolled(studentId: ProgrammeEnrolmentRepositoryStudentID, programmeId: ProgrammeID) : boolean
}

class ProgrammeEditionRepository {
    +ProgrammeEditionRepository(programmeEditionFactory: ProgrammeEditionFactory)
    +findProgrammeEditionBySchoolYearAndProgramme(programmeId: ProgrammeID, schoolYearId: SchoolYearID) : Optional<ProgrammeEditionID>
}

'Repository -> interface
IProgrammeEditionEnrolmentRepository <|.. ProgrammeEditionEnrolmentRepository
IProgrammeEditionRepository <|.. ProgrammeEditionRepository
IProgrammeRepository <|.. ProgrammeRepository
ICourseEditionEnrolmentRepository <|.. CourseEditionEnrolmentRepositoryImpl
ICourseEditionRepository <|.. CourseEditionRepository
ISchoolYearRepository <|.. SchoolYearRepository
IProgrammeEnrolmentRepository <|.. ProgrammeEnrolmentRepository

'Aggregates
package "CourseEditionEnrolment Aggregate" #Lightblue {
    class CourseEditionEnrolment <<Root>> <<Entity>> {
    +CourseEditionEnrolment(studentId:StudentID, courseEditionId: CourseEditionID)
    +hasStudent (studentId: StudentID) : boolean
    +hasCourseEdition (courseEditionId: CourseEditionID) : boolean
    }
}

package "ProgrammeEditionEnrolment Aggregate" #Lightblue {
    class ProgrammeEditionEnrolment <<Root>> <<Entity>> {
    +ProgrammeEditionEnrolment(studentId:StudentID, programmeEditionId: ProgrammeEditionID)
    +getStudentUniqueNumber() : String
    +equals (obj: Object) : boolean
    +findProgrammeEditionInEnrollment () : ProgrammeEditionID
    }
}

package "ProgrammeEditionEnrolment Aggregate" #Lightblue {
    class ProgrammeEditionEnrolment <<Root>> <<Entity>> {
    +ProgrammeEditionEnrolment(studentId:StudentID, programmeEditionId: ProgrammeEditionID)
    +getStudentUniqueNumber() : String
    +equals (obj: Object) : boolean
    +findProgrammeEditionInEnrollment () : ProgrammeEditionID
    }
}

package "Programme Aggregate" #Lightblue{
    class Programme <<Root>> <<Entity>>  {
     + Programme(name : String, acronym : String, quantityOfEcts: int, quantityOfSemesters : int,
          degreeTypeId : DegreeTypeID, departmentId : DepartmentID, programmeDirectorId : TeacherID, programmeCourseListFactory: ProgrammeCourseListFactory)
    }
 }

 package "Student Aggregate" #Lightblue{
     class Student <<Root>> <<Entity>> {
         +Student(uniqueNumber: int, name: Name, NIF: NIF, phone: Phone,
         email: Email, address: Address)
         + hasSameUniqueNumber(studentId : StudentID) : boolean
         + hasSameNIF(studentId : StudentID) : boolean
         + getUniqueNumber() : String
         + hasThisUniqueNumber(uniqueNumber : String) : boolean
     }
 }

 package "ProgrammeEdition Aggregate" #Lightblue{
     class ProgrammeEdition <<Root>> <<Entity>> {
         +ProgrammeEdition(programmeId: ProgrammeID, schoolYearId: SchoolYearID)
         +findProgrammeInProgrammeEdition() : ProgrammeID
         +findSchoolYearInProgrammeEdition() : SchoolYearID
     }
 }

 package "CourseEdition Aggregate" #Lightblue{
     class CourseEdition <<Root>> <<Entity>> {
         +CourseEdition(programmeEditionId: ProgrammeEditionID, course: Course)
         +whatProgrammeEditionBelongsThisCourseEdition() : ProgrammeEditionID
     }
 }

 package "SchoolYear Aggregate" #Lightblue{
     class SchoolYear <<Root>> <<Entity>>  {
        -_description:String
        -_startData:String
        -_endDate:String
        +SchoolYearID(description: String, StartDate: String, EndDate: String)
    }
 }

package "ProgrammeEnrolment Aggregate" #Lightblue{
    class ProgrammeEnrolment <<Root>> <<Entity>> {
        +ProgrammeEnrolment(studentId: StudentID, accessMethod: AccessMethod)
        +getStudentFromEnrolment() : StudentID
        +getProgrammeFromEnrolment() : ProgrammeID
    }
}


'Value Objects

class CourseEditionEnrolmentID <<Value Object>>{
    -_id : long
    + CourseEditionEnrolmentID ( id: long)
    + getId(): long
    + equals(object: Object) : boolean
    + hashcode(): int
    + toString(): String

}

class ProgrammeEditionEnrolmentID <<Value Object>> {
    -_id : long
    + ProgrammeEditionEnrolmentID ( id: long)
    + getId(): long
    + equals(object: Object) : boolean
    + hashcode(): int
    + toString(): String

}

class ProgrammeID <<Value Object>> {
    -_id : long
    + SchoolYearId (id: long)
    + getId(): long
    + equals(object: Object) : boolean
    + hashcode(): int
    + toString(): String
}

class StudentID <<Value Object>> {
    -_uniqueNumber : int
    + StudentID(uniqueNumber : int)
    + isUniqueNumberValid()
}

class Name <<Value Object>> {
    -_name : String
    + Name(name : String)
    + isNameValid
}

class NIF <<Value Object>> {
    -_NIF : String
    + NIF(NIF : String)
    + isNIFInvalid()
}

class Phone <<Value Object>> {
    -_phone : String
    + Phone(phone : String)
    + isPhoneNumberValid
}

class Acronym <<Value Object>> {
     -_acronym : String
     + Acronym(acronym : String)
     + isAcronymInvalid(acronym : String)
}

class QuantEcts <<ValueObject>> {
    -_quantEcts: int
    + QuantEcts(quantityOfEcts : int)
    + isQuantEctsValid(quantityOfEcts : int)
}

class QuantityOfSemesters <<ValueObject>> {
    -_quantityOfSemesters: int
    + QuantSemesters(quantityOfSemesters: int)
    + isQuantityOfSemestersValid(quantityOfSemesters: int)
}

class Email <<Value Object>> {
    -_email : String
    + Email(email : String)
}

class InstitutionalEmail <<Value Object>> {
    -_institutionalEmail : String
    + InstitutionalEmail(institutionalEmail : String)
    + generateInstitutionalEmail(uniqueNumber)
}
class Address <<Value Object>> {
        +Address(street: Street, postalCode: PostalCode, location: Location, country: Country)
        + getStreet() : Street
        + getPostalCode() : PostalCode
        + getLocation() : Location
        + getCountry() : Country
    }

class Street <<Value Object>> {
    -_street : String
    + Street(street : String)
    + validStreet
}

class PostalCode <<Value Object>> {
    -_postalCode : String
    + PostalCode(postalCode : String)
    + validPostalCode
}

class Location <<Value Object>> {
    -_location : String
    + Location(location : String)
    + validLocation()
}

class Country <<Value Object>> {
    -_country : String
    + Country(country : String)
    + validCountry()

}

class ProgrammeEnrolmentID <<Value Object>>{
    -_id : long
    + SchoolYearId (id: long)
    + getId(): long
    + equals(object: Object) : boolean
    + hashcode(): int
    + toString(): String
}

class CourseEditionID <<Value Object>>{
    -_id : long
    + CourseEditionId (id: long)
    + getId(): long
    + equals(object: Object) : boolean
    + hashcode(): int
    + toString(): String
}

class ProgrammeEditionID <<Value Object>> {
        -_id : long
        + ProgrammeEditionId (id: long)
        + getId(): long
        + equals(object: Object) : boolean
        + hashcode(): int
        + toString(): String
}

class SchoolYearID <<Value Object>>{
    -_id : long
    + SchoolYearId (id: long)
    + getId(): long
    + equals(object: Object) : boolean
    + hashcode(): int
    + toString(): String
    }

'Factory
class ProgrammeEditionEnrolmentFactoryImpl {
    +newProgrammeEditionEnrolment(studentId: StudentID, programmeEditionId: ProgrammeEditionID)
}

class ProgrammeEditionEnrolmentListFactoryImpl{
+newProgrammeEditionEnrolmentList(): Set<ProgrammeEditionEnrolmentID>
}

class CourseEditionEnrolmentListFactoryImpl {
    +newArrayList(): List<CourseEditionEnrolmentID>
}

class ProgrammeRepositoryListFactoryImpl {
    +copyProgrammeArrayList(List<Programme>): List<ProgrammeID>
}

class SchoolYearListFactoryImpl {
    +copySchoolYearArrayList(List<SchoolYear>) : List<SchoolYearID>
}


class CourseEditionListFactoryImpl{
    +newArrayList(CourseEditionID)
}


'Others

class HashSet{
    + add(): boolean
}

class ProgrammeArrayList {
    +add(): boolean
}

class ProgrammeEditionEnrolmentArrayList{
     +add(programmeEditionEnrolment: ProgrammeEditionEnrolment): boolean
}

class SchoolYearArrayList {
    +add(): boolean
}

class CourseEditionArrayList{
     +add(): boolean
}

' Controller - interfacesRepo
US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController "1" ..> "1" IProgrammeEditionEnrolmentRepository
US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController "1" ..> "1" IProgrammeEditionRepository
US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController "1" ..> "1" IProgrammeRepository
US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController "1" ..> "1" ICourseEditionEnrolmentRepository
US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController "1" ..> "1" ICourseEditionRepository
US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController "1" ..> "1" ISchoolYearRepository
US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController "1" ..> "1" IProgrammeEnrolmentRepository

' Other connections
StudentID "1" --> "1 _address" Address
CourseEditionRepository "1" -u-> "_listOfCE" CourseEdition
CourseEditionRepository "1" --> "1" CourseEditionListFactoryImpl
CourseEditionRepository "1" --> "1" CourseEditionArrayList
CourseEditionArrayList "1" <.. "1" CourseEditionListFactoryImpl
CourseEditionArrayList "1 arrayOfCourseEdition" <.u. "*" CourseEdition
CourseEditionEnrolment " " ..> " " ICourseEditionEnrolmentRepository
CourseEditionEnrolmentRepositoryImpl "1" --> "1" CourseEditionEnrolmentListFactoryImpl
CourseEditionEnrolmentRepositoryImpl "1" --> "1" HashSet
HashSet "1" <.. "1" CourseEditionEnrolmentListFactoryImpl
HashSet "1" <.. "*" SchoolYear
ProgrammeEditionEnrolment"1" --> "1" StudentID
ProgrammeEditionEnrolmentRepository "1" --> "1" ProgrammeEditionEnrolmentArrayList
IProgrammeEditionEnrolmentFactory <.. ProgrammeEditionEnrolmentRepository
ProgrammeEditionEnrolmentArrayList "1" ..> "*" ProgrammeEditionEnrolment
ProgrammeEditionEnrolmentRepository "1" ..> "1" ProgrammeEditionEnrolmentListFactoryImpl
ProgrammeEditionEnrolmentRepository ..> IProgrammeEditionEnrolmentListFactory
IProgrammeEditionEnrolmentListFactory ..> ProgrammeEditionEnrolmentArrayList
IProgrammeEditionEnrolmentFactory <|.. ProgrammeEditionEnrolmentFactoryImpl
IProgrammeEditionEnrolmentListFactory <|.. ProgrammeEditionEnrolmentListFactoryImpl
ProgrammeEnrolmentRepository "1" --> "*" ProgrammeEnrolment
ProgrammeRepository ..> IProgrammeRepositoryListFactory
ProgrammeRepository ..> Programme
ProgrammeRepository "1" --> "1" ProgrammeArrayList
ProgrammeArrayList "1" --> " _programme *" Programme
IProgrammeRepositoryListFactory ..> ProgrammeArrayList
ProgrammeRepositoryListFactoryImpl ..|> IProgrammeRepositoryListFactory
SchoolYearRepository ..> ISchoolYearListFactory
SchoolYearListFactoryImpl ..|> ISchoolYearListFactory
ISchoolYearListFactory ..> SchoolYearArrayList
SchoolYearRepository ..> SchoolYear
SchoolYearRepository "1" --> "1" SchoolYearArrayList
SchoolYearArrayList "1" --> " _schoolYear *" SchoolYear
ProgrammeEditionEnrolment "1"--> "1" ProgrammeEditionID
ProgrammeEditionEnrolment "1"--> "1" ProgrammeEditionEnrolmentID
ProgrammeEdition "1" --> "1" ProgrammeEditionID
CourseEditionID "1" -->"1" CourseEditionID
ProgrammeEdition "1" --> "1" SchoolYearID
SchoolYearID "1" --> "1" SchoolYear
CourseEditionEnrolment "1" --> "1" StudentID
CourseEditionEnrolment "1" --> "1" CourseEditionID
CourseEditionEnrolment "1" --> "1" CourseEditionEnrolmentID
ProgrammeEnrolment "1" --> "1" ProgrammeID
Programme "1" --> "1" ProgrammeID
Programme "1" --> "1" Name
Programme "1" --> "1" Acronym
Programme "1" --> "1" QuantEcts
Programme "1" --> "1" QuantityOfSemesters
ProgrammeEnrolment "1" --> "1" StudentID
ProgrammeEnrolment "1" --> "1" ProgrammeEnrolmentID
Student "1" --> "1" StudentID
Student "*" --> "1" Name
Student "\n *" --> "1  " Email
Student "\n *" --> "1   " InstitutionalEmail
Student "\n *" --> "1 " Phone
Student "\n *" --> "1 " NIF
Address "  *" ---> "1" Street
Address "*                " ---> "1" PostalCode
Address " *" ---> "1" Location
Address " *" ---> "1" Country
@enduml

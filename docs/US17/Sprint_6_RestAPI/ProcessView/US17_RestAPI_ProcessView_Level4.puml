@startuml

' US17 - Enrol a Student in a ProgrammeEdition
' Process View - Level 4 (Technical Backend Architecture)

skinparam componentStyle uml2
skinparam sequence {
    LifeLineBorderColor black
    LifeLineBackgroundColor LightBlue
}

title US17: Enrol Student in a ProgrammeEdition (Process View â€“ Level 4)

actor ASC
participant ":Router" as router <<component>> <<Router>>
participant ":StudentProgrammeEditionEnrolmentRestController" as controller <<component>> <<RESTController>>
participant ":ProgrammeEditionEnrolmentServiceImpl" as service <<component>> <<Service>>
participant ":ProgrammeEditionEnrolmentFactoryImpl" as factory <<component>> <<Factory>>
participant ":ProgrammeEditionEnrolment" as domain <<component>> <<Aggregate>>
participant ":ProgrammeEditionEnrolmentMapperImpl" as mapper <<component>> <<Mapper>>
participant ":ProgrammeEditionEnrolmentDataModel" as datamodel <<component>> <<DataModel>>
participant ":IProgrammeEditionEnrolmentRepositorySpringData" as springRepo <<component>> <<SpringData>>
database "H2 Database" as db

== Step 1: User submits form ==
ASC -> router: POST /programmeeditions/{acr}/{name}/{year}/enrolments
activate router

router -> controller: enrolStudent(requestDTO)
activate controller

controller -> service: enrolStudentInProgrammeEditionAndSetOfCoursesEditions(studentId, programmeId, schoolYearId)
activate service

== Step 2: Repository and Domain Validation ==
service -> springRepo: isStudentEnrolled(studentId, programmeId)
springRepo -> db: SELECT ...
springRepo --> service: true

service -> springRepo: findProgrammeEditionIDByProgrammeIDAndSchoolYearID(programmeId, schoolYearId)
springRepo -> db: SELECT ...
springRepo --> service: programmeEditionId

service -> springRepo: isStudentEnrolledInThisProgrammeEdition(studentId, programmeEditionId)
springRepo -> db: SELECT ...
springRepo --> service: false

== Step 3: Create and Persist Enrolment ==
service -> factory: newProgrammeEditionEnrolment(studentId, programmeEditionId)
factory --> service: ProgrammeEditionEnrolment

service -> mapper: toDataModel(ProgrammeEditionEnrolment)
mapper --> datamodel: ProgrammeEditionEnrolmentDataModel

service -> springRepo: save(datamodel)
springRepo -> db: INSERT INTO ...
springRepo --> service: OK

service --> controller: success
controller --> router: HTTP 201 Created
router --> ASC: Student successfully enrolled

deactivate service
@enduml

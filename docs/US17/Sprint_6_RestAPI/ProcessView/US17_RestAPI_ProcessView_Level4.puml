@startuml

' US17 - Enrol a Student in a ProgrammeEdition
' Process View - Level 4 (Technical Backend Architecture)

skinparam componentStyle uml2
skinparam sequence {
    LifeLineBorderColor black
    LifeLineBackgroundColor LightBlue
}

title US17: Enrol Student in a ProgrammeEdition (Process View â€“ Level 4)

actor ASC
participant ":Router" as router <<component>> <<Router>>
participant ":StudentProgrammeEditionEnrolmentRestController" as controller <<component>> <<RESTController>>
participant ":ProgrammeEditionEnrolmentRequest" as requestDTO <<component>> <<DTO>>
participant ":StudentProgrammeEditionEnrolmentServiceImpl" as service <<component>> <<Service>>
participant ":ProgrammeEditionEnrolmentFactoryImpl" as factory <<component>> <<Factory>>
participant ":ProgrammeEditionEnrolmentMapperImpl" as mapper <<component>> <<Mapper>>
participant ":ProgrammeEditionEnrolmentDataModel" as datamodel <<component>> <<DataModel>>
participant ":IProgrammeEditionEnrolmentRepositorySpringData" as springRepo <<component>> <<SpringData>>
database "H2 Database" as db

== Step 1: User submits form ==
ASC -> router: POST /students/programme-edition-enrolments
activate router

router -> controller: enrolStudentInProgrammeEdition(requestDTO)
activate controller

controller -> requestDTO: parse JSON into DTO
requestDTO --> controller: studentId, programmeAcronym, programmeName, schoolYearId

controller -> service: enrolStudentInProgrammeEdition(studentId, programmeId, schoolYearId)
activate service

== Step 2: Validations and Lookups ==
service -> springRepo: isStudentEnrolled(studentId, programmeId)
springRepo -> db: SELECT ...
springRepo --> service: true

service -> springRepo: findByID(programmeEditionId)
springRepo -> db: SELECT ...
springRepo --> service: ProgrammeEdition

service -> springRepo: existsByID(enrolmentId)
springRepo -> db: SELECT ...
springRepo --> service: false

== Step 3: Domain Creation and Persistence ==
service -> factory: create(enrolmentId, studentId, programmeEditionId)
factory --> service: ProgrammeEditionEnrolment

service -> mapper: toDataModel(ProgrammeEditionEnrolment)
mapper --> datamodel: ProgrammeEditionEnrolmentDataModel

service -> springRepo: save(datamodel)
springRepo -> db: INSERT INTO ...
springRepo --> service: EnrolmentDM.saved (ID)

service --> controller: success
controller --> router: HTTP 200 OK
router --> ASC: Student successfully enrolled

deactivate service
@enduml

@startuml
autonumber
skinparam sequence {
LifeLineBorderColor Grey
LifeLineBackgroundColor HoneyDew
}
title US17 - enrol a student in a programme in a given school year and in a set of courses
actor ASC
participant ":UI" as UI
ASC -> UI : I want to enrol a student in a programme in a given school year and in a set of courses.
activate UI
UI --> ASC : What student?
deactivate UI
ASC -> UI : Enter the student!

'' Get Programmes

activate UI
participant ":US17_EnrolStudentInProgrammeEditionAndSetOfCoursesEditionsController" as Controller
UI -> Controller : getAllProgrammesIDs()
activate Controller
participant ":IProgrammeService" as IProgrammeService
Controller -> IProgrammeService : getAllProgrammesIDs()
participant ":IProgrammeRepository" as ProgrammeRepository
activate IProgrammeService
IProgrammeService -> ProgrammeRepository : getAllProgrammesIDs()
activate ProgrammeRepository
participant ":ProgrammeDDDRepositoryImpl" as ProgrammeDDDRepositoryImpl
ProgrammeRepository -> ProgrammeDDDRepositoryImpl : getAllProgrammesIDs()
activate ProgrammeDDDRepositoryImpl

create ":ProgrammeArrayList"
ProgrammeDDDRepositoryImpl -> ":ProgrammeArrayList": create()
participant ":ProgrammeDDD" as ProgrammeDDD
loop for each "prog[i]:ProgrammeDDDRepositoryImpl" as ProgrammeDDDRepositoryImpl
ProgrammeDDDRepositoryImpl -> ProgrammeDDD :  getProgrammesID()
participant ":ProgrammeDDD" as ProgrammeDDD
activate ProgrammeDDD
ProgrammeDDD --> ProgrammeDDDRepositoryImpl : progID
deactivate ProgrammeDDD
ProgrammeDDDRepositoryImpl -> ":ProgrammeArrayList" :  add()
activate ":ProgrammeArrayList"
":ProgrammeArrayList" --> ProgrammeDDDRepositoryImpl: True
deactivate ":ProgrammeArrayList"
end

ProgrammeDDDRepositoryImpl --> ProgrammeRepository : listOfProgrammesIDs
deactivate ProgrammeDDDRepositoryImpl
ProgrammeRepository --> IProgrammeService : listOfProgrammesIDs
deactivate ProgrammeRepository
IProgrammeService --> Controller : listOfProgrammesIDs
deactivate IProgrammeService
Controller --> UI : listOfProgrammesIDs
deactivate Controller
UI --> ASC : Here is the list of Programmes! What programme do you want?
deactivate UI
ASC -> UI : Enter the programme!

'' Get SchoolYears

activate UI
UI -> Controller : getAllSchoolYearsIDs()
activate Controller
participant ":ISchoolYearService" as ISchoolYearService
Controller -> ISchoolYearService : getAllSchoolYearsIDs()
participant ":ISchoolYearRepository" as ISchoolYearRepository
participant ":SchoolYearRepository" as SchoolYearRepository
activate ISchoolYearService
ISchoolYearService -> ISchoolYearRepository : getAllSchoolYearsIDs()
activate ISchoolYearRepository
ISchoolYearRepository -> SchoolYearRepository : getAllSchoolYearsIDs()
activate SchoolYearRepository

create ":SchoolYearArrayList"
SchoolYearRepository -> ":SchoolYearArrayList": create()
participant ":SchoolYear" as SchoolYear
loop for each "sy[i]:SchoolYearRepository" as SchoolYearRepository
SchoolYearRepository -> SchoolYear :  getAllSchoolYearsIDs()
participant ":SchoolYear" as SchoolYear
activate SchoolYear
SchoolYear --> SchoolYearRepository : syID
deactivate SchoolYear
SchoolYearRepository -> ":SchoolYearArrayList" :  add()
activate ":SchoolYearArrayList"
":SchoolYearArrayList" --> SchoolYearRepository: True
deactivate ":SchoolYearArrayList"
end
SchoolYearRepository --> ISchoolYearRepository : listOfSchoolYearsIDs
deactivate SchoolYearRepository
ISchoolYearRepository --> ISchoolYearService : listOfSchoolYearsIDs

deactivate ISchoolYearRepository
Controller --> UI : listOfSchoolYearsIDs
ISchoolYearService --> Controller : listOfSchoolYearsIDs
deactivate ISchoolYearService
deactivate Controller
UI --> ASC : Here is the list SchoolYears! What schoolYear do you want?
deactivate UI
ASC -> UI : Enter the schoolYear!
activate UI
UI --> ASC : Sure?
deactivate UI
ASC -> UI : Yes!

activate UI
UI -> Controller : enrolStudentInProgrammeEditionAndSetOfCoursesEditions(studentID, programmeID, schoolYearID)
activate Controller
participant ":IProgrammeEditionEnrolmentService" as IProgrammeEditionEnrolmentService
Controller -> IProgrammeEditionEnrolmentService : enrolStudentInProgrammeEditionAndSetOfCoursesEditions(studentID, programmeID, schoolYearID)
activate IProgrammeEditionEnrolmentService
'' Is Student Enrolled
participant ":IProgrammeEnrolmentRepository" as IProgrammeEnrolmentRepository
IProgrammeEditionEnrolmentService -> IProgrammeEnrolmentRepository : isStudentEnrolled(studentID, programmeID)
activate IProgrammeEnrolmentRepository
participant "e[i]:ProgrammeEnrolment" as Enrolment
loop for each "e[i]:ProgrammeEnrolment" as Enrolment
IProgrammeEnrolmentRepository -> Enrolment : StudentID: hasSameStudent()
IProgrammeEnrolmentRepository -> Enrolment : ProgrammeID: hasSameProgramme()
end
deactivate Enrolment
IProgrammeEnrolmentRepository --> IProgrammeEditionEnrolmentService : True
deactivate IProgrammeEnrolmentRepository
IProgrammeEditionEnrolmentService --> Controller : True
deactivate IProgrammeEditionEnrolmentService

'' Find Programme Edition by SchoolYear and Programme
participant ":IProgrammeEditionRepository" as ProgrammeEditionRepository
Controller -> IProgrammeEditionEnrolmentService
activate IProgrammeEditionEnrolmentService
IProgrammeEditionEnrolmentService -> ProgrammeEditionRepository : findProgrammeEditionIDProgrammeIDAndSchoolYearID(programmeID, schoolYearID)
activate ProgrammeEditionRepository
participant ":ProgrammeEdition" as ProgrammeEdition
loop for each "pe[i]:ProgrammeEditionRepository" as ProgrammeEditionRepository
ProgrammeEditionRepository -> ProgrammeEdition : programmeEditionID : findProgrammeIDInProgrammeEdition(programmeID)
ProgrammeEditionRepository -> ProgrammeEdition : programmeEditionID : findSchoolYearIDInProgrammeEdition(schoolYearID)
ProgrammeEdition --> ProgrammeEditionRepository : peID
end
ProgrammeEditionRepository --> IProgrammeEditionEnrolmentService :  peID
deactivate ProgrammeEditionRepository
IProgrammeEditionEnrolmentService --> Controller : peID
deactivate IProgrammeEditionEnrolmentService

'' Is Student Enrolled in This Programme Edition

participant ":IProgrammeEditionEnrolmentRepository" as ProgrammeEditionEnrolmentRepository
Controller -> IProgrammeEditionEnrolmentService : isStudentEnrolledInThisProgrammeEdition(studentID, peID)
activate IProgrammeEditionEnrolmentService
IProgrammeEditionEnrolmentService ->  ProgrammeEditionEnrolmentRepository
activate ProgrammeEditionEnrolmentRepository
participant ":ProgrammeEditionEnrolment" as ProgrammeEditionEnrolment
loop for each "pee[i]:ProgrammeEditionEnrolmentRepository" as ProgrammeEditionEnrolmentRepository
participant ":Student" as Student
ProgrammeEditionEnrolmentRepository -> ProgrammeEditionEnrolment: ProgrammeEditionEnrolment: hasSameProgrammeEdition(programmeEditionID)
ProgrammeEditionEnrolmentRepository -> ProgrammeEditionEnrolment: ProgrammeEditionEnrolment: hasSameStudent(studentID)
participant ":ProgrammeEditionEnrolment" as ProgrammeEditionEnrolment
end
ProgrammeEditionEnrolmentRepository --> IProgrammeEditionEnrolmentService : False
deactivate "ProgrammeEditionEnrolmentRepository"
IProgrammeEditionEnrolmentService --> Controller : False
deactivate IProgrammeEditionEnrolmentService

'' Enroll Student in Programme Edition
Controller -> IProgrammeEditionEnrolmentService : enrollStudentInProgrammeEdition(studentID, peID)
activate IProgrammeEditionEnrolmentService
IProgrammeEditionEnrolmentService -> ProgrammeEditionEnrolmentRepository : enrollStudentInProgrammeEdition(studentID, peID)
activate "ProgrammeEditionEnrolmentRepository"
participant ":IProgrammeEditionEnrolmentFactory" as IProgrammeEditionEnrolmentFactory
ProgrammeEditionEnrolmentRepository -> IProgrammeEditionEnrolmentFactory: newProgrammeEditionEnrolment(studentID, peID)
activate IProgrammeEditionEnrolmentFactory
create "peeID:ProgrammeEditionEnrolment"
IProgrammeEditionEnrolmentFactory -> "peeID:ProgrammeEditionEnrolment" : newProgrammeEditionEnrolment(studentID, peID)
deactivate IProgrammeEditionEnrolmentFactory
create "pe[i]:ProgrammeEditionIDArrayList"
ProgrammeEditionEnrolmentRepository -> "pe[i]:ProgrammeEditionIDArrayList":  add(peeID)
activate "pe[i]:ProgrammeEditionIDArrayList"
ProgrammeEditionEnrolmentRepository <-- "pe[i]:ProgrammeEditionIDArrayList":  True
deactivate "pe[i]:ProgrammeEditionIDArrayList"
ProgrammeEditionEnrolmentRepository --> IProgrammeEditionEnrolmentService : True
deactivate ProgrammeEditionEnrolmentRepository
IProgrammeEditionEnrolmentService --> Controller : True
deactivate IProgrammeEditionEnrolmentService

'' Find Course Edition by Programme Edition

participant ":ICourseEditionRepository" as CourseEditionRepository
Controller -> IProgrammeEditionEnrolmentService : findCourseEditionsByProgrammeEdition(peeID)
activate IProgrammeEditionEnrolmentService
IProgrammeEditionEnrolmentService -> CourseEditionRepository : findCourseEditionsByProgrammeEdition(peeID)
participant ":CourseEdition" as CourseEdition
activate CourseEditionRepository
participant ":CourseEditionListFactory" as CourseEditionListFactory
CourseEditionRepository -> CourseEditionListFactory: newArrayList()
activate CourseEditionListFactory
create "ce[i]:CourseEditionIDArrayList"
CourseEditionListFactory -> "ce[i]:CourseEditionIDArrayList": newArrayList ()
deactivate CourseEditionListFactory
loop for each "ce[i]:CourseEditionRepository" as CourseEditionRepository
CourseEditionRepository -> CourseEdition :  getProgrammeEditionID()
activate CourseEdition
CourseEdition --> CourseEditionRepository : ceID
deactivate CourseEdition
participant ":CourseEditionArrayList" as CourseEditionArrayList
CourseEditionRepository -> "ce[i]:CourseEditionIDArrayList" :  add(ceID)
activate "ce[i]:CourseEditionIDArrayList"
"ce[i]:CourseEditionIDArrayList" --> CourseEditionRepository: True
deactivate "ce[i]:CourseEditionIDArrayList"
end
participant ":ICourseEditionEnrolmentRepository" as CourseEditionEnrolmentRepository
CourseEditionRepository -> CourseEditionEnrolmentRepository : enrolStudentInProgrammeCourseEditions(studentID, CourseEditionIDArrayList)
deactivate CourseEditionRepository
participant ":CourseEditionEnrolment" as CourseEditionEnrolment
activate CourseEditionEnrolmentRepository
loop for each "cee[i]:CourseEditionEnrolmentRepository" as CourseEditionEnrolmentRepository
CourseEditionEnrolmentRepository -> CourseEditionEnrolment : findByStudentAndEdition(studentID, ceID)
CourseEditionEnrolmentRepository -> CourseEditionEnrolment : isPresent()
create CourseEditionEnrolmentHashSet
CourseEditionEnrolmentRepository -> CourseEditionEnrolmentHashSet : enrolStudentInACourseEdition(studentID, ceID)
activate CourseEditionEnrolmentHashSet
CourseEditionEnrolmentHashSet --> CourseEditionEnrolmentRepository : True
deactivate CourseEditionEnrolmentHashSet
end
CourseEditionEnrolmentRepository --> IProgrammeEditionEnrolmentService : True
deactivate CourseEditionEnrolmentRepository
IProgrammeEditionEnrolmentService --> Controller : True
deactivate IProgrammeEditionEnrolmentService
Controller --> UI : True
deactivate Controller
UI --> ASC: OK!
deactivate UI

@enduml
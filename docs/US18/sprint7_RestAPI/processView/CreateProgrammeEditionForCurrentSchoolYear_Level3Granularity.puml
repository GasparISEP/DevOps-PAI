@startuml
title  US18 \n As an ASC, I want to create a programme edition for the current school year \n Process View - Level 3 Granularity - Backend Internal Flow
skinparam titleFontName "Verdana"
skinparam defaultFontName "Verdana"
skinparam defaultTextAlignment center
skinparam shadowing true
skinparam actorBackgroundColor #lightblue
skinparam participantBackgroundColor #lightblue/white
autonumber

participant ":Router" as Router <<Component>>
participant ":RESTController" as Controller <<Component>>
participant ":Service" as Service <<Component>>
participant ":Domain" as Domain <<Component>>
participant ":Repository" as Repository <<Component>>
participant ":Drivers" as Drivers <<Component>>

'get all programmes name
[o-> Router: GET /programmes


activate Router #E1F5FE

Router -> Controller: getAllProgrammes()
activate Controller  #E1F5FE

Controller -> Service: getAllProgrammes()
activate Service  #E1F5FE

Service -> Repository: findAll()
activate Repository  #E1F5FE

Repository -> Drivers: findAll()
activate Drivers #E1F5FE

Drivers->o]: SELECT * FROM programmes
Drivers <--o]: List<ProgrammeDataModel>

Drivers --> Repository: List<ProgrammeDataModel>
deactivate Drivers


Repository --> Service: List<Programme>
deactivate Repository
Service --> Controller: List<Programme>
deactivate Service
Controller --> Router:  200 OK + body {List<ProgrammeDTO> + hypermedia}
deactivate Controller
note over Router #E0E0E0
  Returned DTOs are automatically converted to JSON
  by the framework after the controller finishes execution.
end note
[o<-- Router: 200 OK + body {List<ProgrammeDTO> + hypermedia}
deactivate Router


[o-> Router:  POST /programme-editions + body {"programme": {"acronym": "CSD" }}
activate Router #E1F5FE

'''''''''''''''''''''''''''''''''''''''''
Router -> Controller: createAProgrammeEditionForTheCurrentSchoolYear(programmeEditionRequestDTO)

'create programmeEdition for current School Year
activate Controller #E1F5FE
Controller -> Service:createProgrammeEditionAndSave(programmeEditionServiceRequestDTO)

activate Service #E1F5FE


Service -> Domain: createProgrammeEdition(programmeID, schoolYearID)
activate Domain #E1F5FE

Domain --> Service: programmeEdition
deactivate Domain

Service -> Repository: save(programmeEdition)
activate Repository #E1F5FE

Repository -> Drivers: save (programmeEditionDataModel)
activate Drivers #E1F5FE

Drivers ->o]: INSERT INTO programme_edition (programme_id, school_year_id) VALUES ('CSD','3aef0884-d779-42fd-9079-22dcf1ca8166')
Drivers <--o]: programmeEditionDataModel

Drivers --> Repository: programmeEditionDataModel
deactivate Drivers

Repository --> Service: programmeEdition
deactivate Repository

Service --> Controller: programmeEditionServiceResponseDTO
deactivate Service

Controller --> Router :  201 Created + body {ProgrammeEditionResponseDTO + hypermedia}
deactivate Controller

note over Router #E0E0E0
  ProgrammeEditionResponseDTO body:
  {
      "programme": {
          "acronym": "CSD"
      },
      "schoolYearId": "f9dd5042-1ce9-46cc-a7f5-0da5a2daaff1"
  }
end note

[o<-- Router: 201 Created + body {ProgrammeEditionResponseDTO + hypermedia}
deactivate Router
@enduml
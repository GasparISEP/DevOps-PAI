@startuml UpdateTeacherWorkingPercentage_Main
skinparam sequenceMessageAlign center
skinparam sequenceLifeLineBackgroundColor lightblue
autonumber

actor HRC
participant ":UI" as UI
participant "ctrl:UpdateTeacherWorkingPercentageController" as Controller #lightgreen
participant "service1:TeacherCareerProgressionServiceImpl" as service #lightblue
participant "teacherRepo:TeacherRepositoryImpl" as TRepo #lightyellow
participant "ITeacherRepoSpringData" as teacherSpringData #lightpink
participant "teacherIdVO1:TeacherIdVO" as teacherIdVO1 #orange
participant "workingPercentageVO1:WorkingPercentageVO" as wpVO1 #orange
participant "tcpRepo: TeacherCareerProgressionRepositoryImpl" as TCPRepo #lightblue
participant "ITeacherCareerProgressionRepoSpringData" as TCPRepoSpringData #lightpink
participant "lastTCP:TeacherCareerProgression" as TCP #lightpink
participant "tcpF:ITCPfactory" as TCPf #burlywood
participant "tcp1:TeacherCareerProgression" as TCP1

HRC -> UI : I want to update Teacher's working percentage
activate HRC
activate UI
UI -> Controller : findAll()
activate Controller
Controller -> service : findAll()
activate service
service -> TRepo : findAll()
activate TRepo
TRepo --> service : teachersList
deactivate TRepo
service --> Controller : teachersList
deactivate service
Controller --> UI : teachersList
deactivate Controller
UI --> HRC : Which Teacher?
deactivate UI

HRC -> UI: Teacher's acronym and NIF
activate UI
UI --> HRC: What working percentage?
deactivate UI

HRC -> UI: Working percentage
activate UI
UI --> HRC: What date?
deactivate UI

HRC -> UI: Date
activate UI
UI -> Controller : updateTeacherWorkingPercentage \n(teacherAcronym, date, workingPercentage)
activate Controller

ref over Controller
    Create teacherAcronym, NIF, teacherID, date,
    workingPercentage Value Objects
end ref

Controller -> service : updateTeacherWorkingPercentage(dateVO1, workingPercentageVO1, teacherIdVO1)
activate service

service -> TRepo : containsOfIdentity(teacherIdVO1)
activate TRepo

ref over TRepo
    Create teacherID Data Model
end ref

TRepo -> teacherSpringData : existsById(teacherIdDataModel)
activate teacherSpringData
teacherSpringData --> TRepo : true
deactivate teacherSpringData

TRepo --> service : true
deactivate TRepo

service -> TCPRepo : findLastTCPFromTeacherID(teacherIdVO1)
activate TCPRepo

ref over TCPRepo
    Create teacherID Data Model
end ref

TCPRepo -> TCPRepoSpringData : findTopByTeacherIDOrderByDateDesc(teacherIdDataModel)
activate TCPRepoSpringData
TCPRepoSpringData --> TCPRepo : TeacherCareerProgressionDataModel
deactivate TCPRepoSpringData

ref over TCPRepo
    Create Teacher Career Progression Domain Object from Data Model (lastTCP)
end ref

TCPRepo --> service : lastTCP
deactivate TCPRepo

service -> TCP : lastTCP.isLastDateEqualOrBeforeNewDate(dateVO1)
activate TCP
TCP -> service : true
deactivate TCP

service -> TCP : lastTCP.getTeacherCategoryID()
activate TCP
TCP --> service : teacherCategoryIdVO1
deactivate TCP

service -> TCP : lastTCP.hasSameWorkingPercentage(workingPercentageVO1)
activate TCP
TCP --> service : true
deactivate TCP

service -> TCPf : updateWorkingPercentageInTeacherCareerProgression(dateVO1, workingPercentageVO1, teacherIdVO1)
deactivate TCPRepo
activate TCPf

TCPf -> TCP1 : createTeacherCareerProgression(dateVO1, workingPercentageVO1, teacherCategoryIdVO1, teacherIdVO1)
activate TCP1
TCP1 --> TCPf : tcp1
deactivate TCP1
TCPf --> service : tcp1

service -> service : isTeacherCareerProgressionDuplicated(tcp1)

service -> TCPRepo: save(tcp1)
activate TCPRepo

ref over TCPRepo
    Convert Teacher Career Progression Domain Object to Data Model
end ref

TCPRepo -> TCPRepoSpringData : save(tcpDM)
activate TCPRepoSpringData
TCPRepoSpringData --> TCPRepo : tcpDM
deactivate TCPRepoSpringData

TCPRepo --> service : tcp1
deactivate TCPRepo

service --> Controller : true
deactivate service

Controller --> UI : true
deactivate Controller

UI --> HRC : Success!
deactivate UI
deactivate HRC

@enduml

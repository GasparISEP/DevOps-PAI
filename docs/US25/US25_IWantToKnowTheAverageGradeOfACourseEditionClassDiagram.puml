@startuml
title US25: I Want to Know the Average Grade of a Course Edition
'left to right direction

class US25_IWantToKnowTheAverageGradeOfACourseEdition {
    -_gradeStudentRepository: GradeStudentRepository
    +US25_IWantToKnowTheAverageGradeOfACourseEdition(gradeStudentList : GradeStudentRepository)
    +IWantToKnowTheAvgGrade(courseEdition : CourseEdition): double
}

class GradeStudent {
    -_grade: double
    -_date: String
    -_student: Student
    -_courseEdition: CourseEdition
    +GradeStudent(grade: double, date: String, student: Student, courseEdition: CourseEdition)
    +hasThisCourseEdition(courseEdition : CourseEdition): boolean
    +knowGrade(): double
    +knowCourseEdition(): CourseEdition
    +isDateValid(date: String): void
    +get_date(): LocalDate
    +get_student(): Student
    +get_courseEdition(): CourseEdition
    +equals(o: Object): boolean
}

interface GradeStudentFactory {
    +newGradeStudent(grade: double, date: String, student: Student, courseEdition: CourseEdition): GradeStudent
}

class GradeStudentFactoryImpl {
    +newGradeStudent(grade: double, date: String, student: Student, courseEdition: CourseEdition): GradeStudent
}

interface GradeStudentListFactory {
    +newArrayList(): ArrayList<GradeStudent>
}

class GradeStudentListFactoryImpl {
    +newArrayList(): ArrayList<GradeStudent>
}

class GradeStudentRepository {
    -_gradeStudentFactory: GradeStudentFactory
    -_gradeStudentList: List<GradeStudent>
    +GradeStudentRepository((gradeStudentFactory : GradeStudentFactory, gradeStudentListFactory: GradeStudentListFactory)
    +addGradeToStudent(grade: double, date: String, student: Student, courseEdition: CourseEdition): Optional<GradeStudent>
    +knowAverageGrade(courseEdition: CourseEdition): Double
    +knowApprovalRate(courseEdition: CourseEdition): double
}

class List<GradeStudent> {
}

class Student {
    -_uniqueNumber: int
    -_name: String
    -_NIF: String
    -_phone: String
    -_email: String
    -_address: Address
    +Student(uniqueNumber: int, name: String, NIF: String, phone: String, email: String, address: Address)
    +hasSameUniqueNumber(student: Student): boolean
    +hasSameNIF((student: Student): boolean
    +getUniqueNumber(): int
    +hasThisUniqueNumber(uniqueNumber: int): boolean
}

class CourseEdition {
    -_programmeEdition: ProgrammeEdition
    -_course: Course
    -_ruc: Teacher
    +CourseEdition(programmeEdition: ProgrammeEdition, course: Course)
    +equals(objectToCompare: Object): boolean
    +setRuc(Teacher: ruc): boolean
    +whatProgrammeEditionBelongsThisCourseEdition(): ProgrammeEdition
    +getCourse(): Course
}


GradeStudent "*" --> "1" Student: belongs
GradeStudent "*" --> "1" CourseEdition: refers to
GradeStudentRepository "1" ...> GradeStudentFactory
GradeStudentFactory "1" ...> "Creates" GradeStudent
GradeStudentRepository "1" ...> "*" GradeStudent
GradeStudentRepository "1" ...> GradeStudentListFactory
GradeStudentListFactory <|.. GradeStudentListFactoryImpl
GradeStudentListFactory  ...>  List
GradeStudentRepository  -->  List
List --> "*" GradeStudent
GradeStudentFactory  <|.. GradeStudentFactoryImpl

US25_IWantToKnowTheAverageGradeOfACourseEdition "1" ..> "1" GradeStudentRepository
@enduml
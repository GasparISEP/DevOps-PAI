@startuml
skinparam linetype ortho
skinparam ranksep 100
skinparam nodesep 100
skinparam packageBorderColor #F0B0B0
skinparam arrowThickness 1
left to right direction


title US05: "As an Administrator, I want to Register a Department in the System"\nLogical View Level 5

package US05 {
'--- Controller ---
package controller {
  class DepartmentRestController <<restController>> {
    + getDepartmentById(String): ResponseEntity<?>
    + registerDepartment(RegisterDepartmentRequest): ResponseEntity<?>
    + updateDepartmentDirector(DepartmentWithDirectorRequest): ResponseEntity<?>
    + allDepartments(): ResponseEntity<?>
  }
}

'--- Assembler ---
package assembler {
interface IDepartmentAssembler << interface >> {
  + fromStringToDepartmentID(String): DepartmentID
  + toRegisterDepartmentRequestVOs(RegisterDepartmentRequest): RegisterDepartmentRequestVOs
  + toDWDDTO(Department): DepartmentWithDirectorDTO
  + fromRequestToCommand(DepartmentWithDirectorRequest): DepartmentWithDirectorCommand
  + toDWDDTOs(Iterable<Department>): Iterable<DepartmentWithDirectorDTO>
  + toDTO(Department): DepartmentDTO
  + toDTOs(Iterable<Department>): Iterable<DepartmentDTO>
}

class DepartmentAssemblerImpl {
  + toDWDDTO(Department): DepartmentWithDirectorDTO
  + toRegisterDepartmentRequestVOs(RegisterDepartmentRequest): RegisterDepartmentRequestVOs
  + fromStringToDepartmentID(String): DepartmentID
  + toDTOs(Iterable<Department>): Iterable<DepartmentDTO>
  + fromRequestToCommand(DepartmentWithDirectorRequest): DepartmentWithDirectorCommand
  + toDWDDTOs(Iterable<Department>): Iterable<DepartmentWithDirectorDTO>
  + toDTO(Department): DepartmentDTO
}

class DepartmentHateoasAssemblerImpl {
  + toModel(DepartmentDTO): EntityModel<DepartmentDTO>
}
interface IDepartmentHateoasAssembler << interface >> {
  + toModel(DepartmentDTO): EntityModel<DepartmentDTO>
}
}

package dto {
class DepartmentDTO << record >> {
  + name(): String
  + id(): String
  + acronym(): String
}
class RegisterDepartmentRequest << record >> {
  + name(): String
  + acronym(): String
}
class RegisterDepartmentRequestVOs << record >> {
  + acronym(): DepartmentAcronym
  + name(): Name
}

}

'--- Services & Interfaces ---
package Service {
    'skinparam PackageBorderColor White
    interface IDepartmentRegistrationService << interface >> {
      + createAndSaveDepartment(RegisterDepartmentRequestVOs): Department
      + getDepartmentById(DepartmentID): Optional<Department>
       allDepartments: Iterable<Department>
    }
    class DepartmentRegistrationServiceImpl {
      + createAndSaveDepartment(RegisterDepartmentRequestVOs): Department
      + getDepartmentById(DepartmentID): Optional<Department>
       allDepartments: Iterable<Department>
    }
}

'--- DOMAIN ---
package Domain {

'--- Factories & Interfaces ---
package Factory {
    together{
    interface IDepartmentFactory << interface >> {
      + newDepartment(DepartmentAcronym, Name, TeacherID): Department
      + newDepartment(DepartmentAcronym, Name): Department
    }

    class DepartmentFactoryImpl {
      + newDepartment(DepartmentAcronym, Name, TeacherID): Department
      + newDepartment(DepartmentAcronym, Name): Department
    }
    }
}
'--- Department Aggregate ---
package Aggregate {
entity Department <<root>> {
  + equals(Object): boolean
  + changeDirector(TeacherID): boolean
  + identity(): DepartmentID
  + hashCode(): int
  + sameAs(Object): boolean
   name: Name
   acronym: DepartmentAcronym
   departmentID: DepartmentID
   directorID: TeacherID
}

class DepartmentAcronym << valueObject >> {
  + equals(Object): boolean
  + hashCode(): int
   acronym: String
}
class DepartmentID << valueObject >>{
  + hashCode(): int
  + equals(Object): boolean
   acronym: DepartmentAcronym
}
class Name << valueObject >>{
  + hashCode(): int
  + equals(Object): boolean
  - isNameValid(String): boolean
   name: String
}
}
'--- Repository IREPO---
package Repository {
  interface IDepartmentRepository << interface >> {
    + findDepartmentByID(DepartmentID): Optional<Department>
    + containsOfIdentity(DepartmentID): boolean
    + save(Department): Department
    + findAll(): List<Department>
    + ofIdentity(DepartmentID): Optional<Department>
     departmentIDs: Set<DepartmentID>
  }
  }
}
package Persistence {
  '--- Mappers ---
  package Mapper {
    interface IDepartmentIDMapper << interface >> {
      + toDataModel(DepartmentID): DepartmentIDDataModel
      + toDomainModel(DepartmentIDDataModel): DepartmentID
    }
    class DepartmentIDMapperImpl {
      + toDataModel(DepartmentID): DepartmentIDDataModel
      + toDomainModel(DepartmentIDDataModel): DepartmentID
    }

    interface IDepartmentMapper << interface >> {
      + toDomain(DepartmentDataModel): Department
      + toDataModel(Department): DepartmentDataModel
    }
    class DepartmentMapperImpl {
      + toDomain(DepartmentDataModel): Department
      + toDataModel(Department): DepartmentDataModel
       departmentFactory: IDepartmentFactory
    }
  }

    '--- Data Models ---
    package DataModel {
    class DepartmentDataModel <<dataModel>> {
      - id: DepartmentIDDataModel
      - directorId: TeacherIDDataModel
      - name: String
      - acronym: String
      + equals(Object): boolean
      + hashCode(): int
       name: String
       id: DepartmentIDDataModel
       acronym: String
       directorId: TeacherIDDataModel
    }


    class DepartmentIDDataModel <<dataModel>>{
      - departmentID: String
      + equals(Object): boolean
      + hashCode(): int
       departmentID: String
    }
    }
package RepositorySpringData {
  interface IDepartmentRepositorySpringData << interface >> {
    + save(DepartmentDataModel): DepartmentDataModel
    + findAll(): List<DepartmentDataModel>
    + existsById(DepartmentIDDataModel): boolean
    + findById(DepartmentIDDataModel): Optional<DepartmentDataModel>
  }
  class DepartmentRepositorySpringDataImpl {
    + save(Department): Department
    + findAll(): List<Department>
    + containsOfIdentity(DepartmentID): boolean
    + findDepartmentByID(DepartmentID): Optional<Department>
    + ofIdentity(DepartmentID): Optional<Department>
     departmentIDs: Set<DepartmentID>
  }
}
}



RegisterDepartmentRequest <-left- DepartmentRestController
DepartmentRestController "1" *-right-> "departmentAssembler\n1" IDepartmentAssembler
DepartmentRestController "1" *-right-> "departmentHateoasAssembler\n1" IDepartmentHateoasAssembler
DepartmentRestController "1" *-right-> "departmentRegistrationService\n1" IDepartmentRegistrationService

DepartmentAssemblerImpl -right-> DepartmentAcronym : "«create»"
DepartmentAssemblerImpl -right-> DepartmentDTO : "«create»"
DepartmentAssemblerImpl -right-> DepartmentID : "«create»"
DepartmentAssemblerImpl -right-|>  IDepartmentAssembler
DepartmentAssemblerImpl -right-> Name : "«create»"
DepartmentAssemblerImpl -right-> RegisterDepartmentRequestVOs : "«create»"

DepartmentHateoasAssemblerImpl -right-|> IDepartmentHateoasAssembler

RegisterDepartmentRequestVOs "1" *-down-> "name\n1" Name
RegisterDepartmentRequestVOs "1" *-down-> "_departmentAcronym\n1" DepartmentAcronym

DepartmentRegistrationServiceImpl "1" *-right-> "departmentFactory\n1" IDepartmentFactory
DepartmentRegistrationServiceImpl -right-|>  IDepartmentRegistrationService
DepartmentRegistrationServiceImpl "1" *-right-> "departmentRepository\n1" IDepartmentRepository

DepartmentFactoryImpl -right-> Department : "«create»"
DepartmentFactoryImpl -right-|> IDepartmentFactory

Department -up->  DepartmentID: "«create»"
Department "1" *-up-> "_departmentId\n1" DepartmentID
Department "1" *-up-> "_departmentName\n1" Name
DepartmentID "1" *-up-> "_departmentAcronym\n1" DepartmentAcronym

DepartmentDataModel "1" *-right-> "id\n1" DepartmentIDDataModel
DepartmentDataModel -right-> DepartmentIDDataModel: "«create»"

DepartmentRepositorySpringDataImpl "1" *-left-> "idMapper\n1" IDepartmentIDMapper
DepartmentRepositorySpringDataImpl "1" *-left-> "departmentMapper\n1" IDepartmentMapper
DepartmentRepositorySpringDataImpl -left-|>  IDepartmentRepository
DepartmentRepositorySpringDataImpl "1" *-left-> "jpaRepo\n1" IDepartmentRepositorySpringData

DepartmentIDMapperImpl -right-> DepartmentAcronym : "«create»"
DepartmentIDMapperImpl -right-> DepartmentID : "«create»"
DepartmentIDMapperImpl -right-> DepartmentIDDataModel : "«create»"
DepartmentIDMapperImpl -right-|> IDepartmentIDMapper

DepartmentMapperImpl -left-> DepartmentAcronym : "«create»"
DepartmentMapperImpl -left-> DepartmentDataModel : "«create»"
DepartmentMapperImpl "1" -left-> "departmentFactory\n1" IDepartmentFactory
DepartmentMapperImpl -left-|> IDepartmentMapper
DepartmentMapperImpl -left-> Name : "«create»"

@enduml

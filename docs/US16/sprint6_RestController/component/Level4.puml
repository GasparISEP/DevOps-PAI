@startuml
title US16: Enroll a Student in a Course Edition - Code Level

' Domain Layer
package "Domain" {
    class StudentID {
        +value: Long
        +equals(Object obj): boolean
        +hashCode(): int
        +toString(): String
    }
    
    class CourseEditionID {
        +value: Long
        +equals(Object obj): boolean
        +hashCode(): int
        +toString(): String
    }
    
    class CourseEditionEnrolment {
        +id: CourseEditionEnrolmentID
        +studentId: StudentID
        +courseEditionId: CourseEditionID
        +enrollmentDate: LocalDateTime
        +equals(Object obj): boolean
        +hashCode(): int
        +toString(): String
    }
    
    class CourseEditionEnrolmentID {
        +value: Long
        +equals(Object obj): boolean
        +hashCode(): int
        +toString(): String
    }
}

' Application Layer
package "Application" {
    interface ICourseEditionEnrolmentService {
        +enrolStudentInACourseEdition(studentId: StudentID, courseEditionId: CourseEditionID): boolean
        +isStudentEnrolledInCourseEdition(studentId: StudentID, courseEditionId: CourseEditionID): boolean
        +validateEnrollment(studentId: StudentID, courseEditionId: CourseEditionID): boolean
    }
    
    class CourseEditionEnrolmentService {
        -enrolmentRepository: ICourseEditionEnrolmentRepository
        -enrolmentFactory: ICourseEditionEnrolmentFactory
        +enrolStudentInACourseEdition(studentId: StudentID, courseEditionId: CourseEditionID): boolean
        +isStudentEnrolledInCourseEdition(studentId: StudentID, courseEditionId: CourseEditionID): boolean
        +validateEnrollment(studentId: StudentID, courseEditionId: CourseEditionID): boolean
        -checkPrerequisites(studentId: StudentID, courseEditionId: CourseEditionID): boolean
        -checkScheduleConflicts(studentId: StudentID, courseEditionId: CourseEditionID): boolean
    }
}

' Infrastructure Layer
package "Infrastructure" {
    interface ICourseEditionEnrolmentRepository {
        +save(enrolment: CourseEditionEnrolment): boolean
        +findByStudentAndCourseEdition(studentId: StudentID, courseEditionId: CourseEditionID): Optional<CourseEditionEnrolment>
        +findAllByStudentId(studentId: StudentID): List<CourseEditionEnrolment>
        +delete(enrolment: CourseEditionEnrolment): boolean
    }
    
    class CourseEditionEnrolmentRepositoryImpl {
        -jpaRepository: JpaRepository<CourseEditionEnrolmentEntity, Long>
        +save(enrolment: CourseEditionEnrolment): boolean
        +findByStudentAndCourseEdition(studentId: StudentID, courseEditionId: CourseEditionID): Optional<CourseEditionEnrolment>
        +findAllByStudentId(studentId: StudentID): List<CourseEditionEnrolment>
        +delete(enrolment: CourseEditionEnrolment): boolean
        -toEntity(enrolment: CourseEditionEnrolment): CourseEditionEnrolmentEntity
        -toDomain(entity: CourseEditionEnrolmentEntity): CourseEditionEnrolment
    }
}

' Interface Layer
package "Interface" {
    class CourseEditionEnrolmentRestController {
        -enrolmentService: ICourseEditionEnrolmentService
        -logger: Logger
        +enrolStudentInCourseEdition(dto: EnrolStudentCourseEditionDto): ResponseEntity<Void>
        +getStudentEnrollments(studentId: Long): ResponseEntity<List<CourseEditionEnrolmentDto>>
        +deleteEnrollment(enrollmentId: Long): ResponseEntity<Void>
        -validateDto(dto: EnrolStudentCourseEditionDto): boolean
    }
    
    class EnrolStudentCourseEditionDto {
        +studentId: Long
        +courseEditionId: Long
        +equals(Object obj): boolean
        +hashCode(): int
        +toString(): String
    }
}

' Relationships
CourseEditionEnrolmentService ..|> ICourseEditionEnrolmentService
CourseEditionEnrolmentService --> ICourseEditionEnrolmentRepository
CourseEditionEnrolmentService --> ICourseEditionEnrolmentFactory
CourseEditionEnrolmentRepositoryImpl ..|> ICourseEditionEnrolmentRepository
CourseEditionEnrolmentRestController --> ICourseEditionEnrolmentService

@enduml 
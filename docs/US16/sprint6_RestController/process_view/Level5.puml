@startuml

title US16: Enroll a Student in a Course Edition\nProcess View – Level 5

autonumber
skinparam sequence {
    LifelineBorderColor black
    LifelineBackgroundColor LightBlue
    ActorBorderColor black
    ActorBackgroundColor LightGray
    GroupBorderColor #cccccc
    GroupBackgroundColor #f2f2f2
}

actor "Academic Services Coordinator" as ASC
participant ":Frontend" as UI
participant ":CourseEditionEnrolmentRestController" as Controller
participant ":ICourseEditionEnrolmentService" as Service
participant ":CourseEditionEnrolmentAssembler" as Assembler
participant "ceeDTO:CourseEditionEnrolmentDto" as DTO #LightYellow
participant ":ICourseEditionEnrolmentRepository" as Repository
participant ":CourseEditionEnrolmentDataModelMapper" as DataModelMapper
participant ":CourseEditionEnrolmentFactory" as Factory
participant "cee:CourseEditionEnrolment" as Enrollment #LightBlue
participant "ceeDM:CourseEditionEnrolmentDataModel" as EnrollmentDataModel #LightYellow
participant "cee.saved:CourseEditionEnrolment" as Enrollment2 #LightBlue
participant ":ICourseEditionEnrolmentSpringDataRepository" as SpringDataRepo

group Human Interaction
ASC -> UI ++: I want to enroll a student
UI --> ASC --: Prompt: Enter student ID
ASC -> UI ++: "12345"
UI --> ASC --: Display programme editions
ASC -> UI ++: Select programme edition
UI --> ASC --: Display course editions
ASC -> UI ++: Select course edition
end group

group HTTP Request
UI -> Controller ++: (POST) /courseeditions/enrolments\nwith JSON { CourseEditionEnrolmentDto request }
end group

group Mapping JSON to Domain Objects
Controller -> Assembler ++: toDomain(CourseEditionEnrolmentDto)
note right of Assembler
  Transformations:
  1. String studentId -> StudentID VO
  2. String programmeName -> NameWithNumbersAndSpecialChars VO
  3. String programmeAcronym -> Acronym VO
  4. String schoolYearId -> UUID -> SchoolYearID VO
  5. String courseName -> Name VO
  6. String courseAcronym -> Acronym VO
  7. String studyPlanDate -> Date VO
  Creates nested VOs:
  - ProgrammeID
  - ProgrammeEditionID
  - CourseID
  - StudyPlanID
  - CourseInStudyPlanID
  - CourseEditionID
end note
Assembler --> Controller --: cee
end group

group Application Service
Controller -> Service ++: enrollStudentInCourseEdition(cee)
end group

group Domain Logic – Enrollment Creation
Service -> Factory ++: newEnrollment(studentId, courseEditionId)
Factory -> Enrollment **: <create> CourseEditionEnrolment(studentId, courseEditionId)
Factory --> Service --: cee
end group

group Validation
Service -> Repository ++: isStudentEnrolledInCourseEdition(cee.studentId(), cee.courseEditionId())
Repository -> SpringDataRepo ++: existsByStudentIdAndCourseEditionId(mapper.toDataModel(cee.studentId()), mapper.toDataModel(cee.courseEditionId()))
SpringDataRepo --> Repository --: false
Repository --> Service --: false
end group

group Persistence
Service -> Repository ++: save(cee)

group Mapping Domain to DataModel
Repository -> DataModelMapper ++: toDataModel(cee)
note right of DataModelMapper
  Transformations:
  1. StudentID VO -> StudentIDDataModel
  2. CourseEditionID VO -> CourseEditionIDDataModel
  3. All nested VOs -> corresponding DataModels
end note
DataModelMapper -> EnrollmentDataModel **: <create> CourseEditionEnrolmentDataModel(studentId, programmeEditionId, courseEditionId)
DataModelMapper --> Repository --: ceeDM
end group

group Spring Data Persistence
Repository -> SpringDataRepo ++: save(ceeDM)
SpringDataRepo --> Repository --: ceeDM.saved
end group

group Mapping DataModel to Domain
Repository -> DataModelMapper ++: toDomain(ceeDM)
DataModelMapper -> Factory ++: newEnrollment(studentId, programmeEditionId, courseEditionId)
Factory -> Enrollment2 **: <create> CourseEditionEnrolment(studentId, programmeEditionId, courseEditionId)
Factory --> DataModelMapper --: cee.saved
DataModelMapper --> Repository --: cee.saved
end group

Repository --> Service --: cee
Service --> Controller --: cee

end group

group Mapping Domain to Output DTO
Controller -> Assembler ++: toDto(cee)
Assembler -> DTO **: <create> CourseEditionEnrolmentDto(id, studentId, programmeEditionId, courseEditionId, enrollmentDate)
Assembler --> Controller --: ceeDTO
end group

group Response
Controller --> UI --: HTTP 201 Created + ceeDTO
UI --> ASC --: Student successfully enrolled
end group

@enduml
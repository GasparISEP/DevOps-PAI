@startuml

title US16: Enroll a Student in a Course Edition\nProcess View â€“ Level 4

autonumber
skinparam sequence {
    LifelineBorderColor black
    LifelineBackgroundColor LightBlue
    ActorBorderColor black
    ActorBackgroundColor LightGray
}

actor "Academic Services Coordinator" as ASC
participant ":Frontend" as UI
participant ":CourseEditionEnrolmentRestController" as Controller
participant ":CourseEditionEnrolmentAssembler" as Assembler
participant ":CourseEditionEnrolmentHateoasAssemblerImpl" as HateoasAssembler
participant ":ICourseEditionEnrolmentService" as Service
participant ":ICourseEditionEnrolmentRepository" as Repository
participant ":CourseEditionEnrolmentFactory" as Factory
participant ":CourseEditionEnrolmentDataModelMapper" as DataModelMapper
database "DB" as SpringDataRepo

ASC -> UI ++: Request to enroll a student
UI --> ASC --: Prompt: "Enter student ID"
ASC -> UI ++: Input: "12345"
UI --> ASC --: Display programme editions
ASC -> UI ++: Select programme edition
UI --> ASC --: Display course editions
ASC -> UI ++: Select course edition

UI -> Controller ++: (POST) /students/{id}/courses-edition-enrolments {request}
Controller -> Assembler ++: toCourseEditionID(CourseEditionEnrolmentDto)
Assembler --> Controller --: CourseEditionID
Controller -> Assembler ++: toStudentID(id)
Assembler --> Controller --: StudentID

Controller -> Service ++: enrollStudentInCourseEdition
Service -> Factory ++: createCourseEditionEnrolment(CourseEditionID, StudentID)
Factory --> Service --: CourseEditionEnrolment
Service -> Repository ++: validate enrollment
Repository -> SpringDataRepo ++: SELECT * FROM CourseEditionEnrolment WHERE CourseEditionEnrolment.CourseEditionID = ? AND CourseEditionEnrolment.StudentID = ?
SpringDataRepo --> Repository --: validation
Repository --> Service --: validation

Service -> Repository ++: save enrollment
Repository -> DataModelMapper ++: toDataModel(CourseEditionEnrolment)
note right of DataModelMapper
  Transformations:
  1. StudentID VO -> StudentIDDataModel
  2. CourseEditionID VO -> CourseEditionIDDataModel
  3. All nested VOs -> corresponding DataModels
end note
DataModelMapper --> Repository --: CourseEditionEnrolmentDataModel
Repository -> SpringDataRepo ++: INSERT INTO CourseEditionEnrolment
SpringDataRepo --> Repository --: CourseEditionEnrolment
Repository --> Service --: CourseEditionEnrolment

Service --> Controller --: CourseEditionEnrolment
Controller -> HateoasAssembler ++: toModel(CourseEditionEnrolment)
note right of HateoasAssembler
  Create EntityModel with:
  - Self link
end note
HateoasAssembler --> Controller --: EntityModel<CourseEditionEnrolmentDto>

Controller --> UI --: HTTP 201 Created **with EntityModel<CourseEditionEnrolmentDto>**
UI --> ASC --: Success message with navigation links

@enduml

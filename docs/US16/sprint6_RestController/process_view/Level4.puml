@startuml

title US16: Enroll a Student in a Course Edition\nProcess View â€“ Level 4

autonumber
skinparam sequence {
    LifelineBorderColor black
    LifelineBackgroundColor LightBlue
    ActorBorderColor black
    ActorBackgroundColor LightGray
    GroupBorderColor #cccccc
    GroupBackgroundColor #f2f2f2
}

actor "Academic Services Coordinator" as ASC
participant ":Frontend" as UI
participant ":CourseEditionEnrolmentRestController" as Controller
participant ":CourseEditionEnrolmentAssembler" as Assembler
participant ":ICourseEditionEnrolmentService" as Service
participant ":ICourseEditionEnrolmentRepository" as Repository
participant ":CourseEditionEnrolmentFactory" as Factory
participant ":CourseEditionEnrolmentDataModelMapper" as DataModelMapper
database "DB" as SpringDataRepo

group Human Interaction
ASC -> UI ++: Request to enroll a student
UI --> ASC --: Prompt: "Enter student name"
ASC -> UI ++: Input: "John Doe"
UI --> ASC --: Display matching students
ASC -> UI ++: Select student
UI --> ASC --: Display programme editions
ASC -> UI ++: Select programme edition
UI --> ASC --: Display course editions
ASC -> UI ++: Select course edition
end group

group Controller Layer
UI -> Controller ++: (POST) /courseeditions/enrolments {request}
Controller -> Assembler ++: toDomain(CourseEditionEnrolmentDto)
note right of Assembler
  Transformations:
  1. String studentId -> StudentID VO
  2. String programmeName -> NameWithNumbersAndSpecialChars VO
  3. String programmeAcronym -> Acronym VO
  4. String schoolYearId -> UUID -> SchoolYearID VO
  5. String courseName -> Name VO
  6. String courseAcronym -> Acronym VO
  7. String studyPlanDate -> Date VO
  Creates nested VOs:
  - ProgrammeID
  - ProgrammeEditionID
  - CourseID
  - StudyPlanID
  - CourseInStudyPlanID
  - CourseEditionID
end note
Assembler --> Controller --: CourseEditionEnrolment
end group

group Application + Domain Logic
Controller -> Service ++: enrollStudentInCourseEdition
Service -> Factory ++: create Enrollment
Factory --> Service --: CourseEditionEnrolment
Service -> Repository ++: validate enrollment
Repository -> SpringDataRepo ++: validate enrollment
SpringDataRepo --> Repository --: validation
Repository --> Service --: validation
end group

group Persistence
Service -> Repository ++: save enrollment
Repository -> DataModelMapper ++: toDataModel(CourseEditionEnrolment)
note right of DataModelMapper
  Transformations:
  1. StudentID VO -> StudentIDDataModel
  2. CourseEditionID VO -> CourseEditionIDDataModel
  3. All nested VOs -> corresponding DataModels
end note
DataModelMapper --> Repository --: CourseEditionEnrolmentDataModel
Repository -> SpringDataRepo ++: save CourseEditionEnrolmentDataModel
SpringDataRepo --> Repository --: persisted
Repository --> Service --: persisted
end group

group Response Mapping
Service --> Controller --: CourseEditionEnrolment
Controller -> Assembler ++: toDto(CourseEditionEnrolment)
Assembler --> Controller --: CourseEditionEnrolmentDto
Controller --> UI --: HTTP response + CourseEditionEnrolmentDto
UI --> ASC --: Success message
end group

@enduml

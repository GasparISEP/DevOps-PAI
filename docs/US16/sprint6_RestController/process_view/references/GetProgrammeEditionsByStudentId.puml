@startuml
title: Get Programme Edition Enrollments By Student ID\n(Code View - Level 4)

autonumber

participant ":ProgrammeEditionEnrolmentController" as peeCtrl
activate peeCtrl
participant ":ProgrammeEditionEnrolmentService" as peeService
participant ":ProgrammeEditionEnrolmentRepository" as peeRepo
participant ":ProgrammeEditionEnrolmentAssembler" as peeAssembler
participant ":ProgrammeEditionEnrolmentMapper" as peeMapper
participant ":ProgrammeEditionEnrolmentFactory" as peeFactory
database DB

peeCtrl -> peeService ++: getProgrammeEditionEnrollmentsByStudentId(studentId)
peeService -> peeRepo ++: findProgrammeEditionsThatStudentIsEnrolled(studentId)
peeRepo -> DB ++: SELECT * FROM programme_edition_enrollments\nWHERE student_id = studentId
DB --> peeRepo --: List<Optional<ProgrammeEditionEnrolmentDataModel>>

loop for Optional<ProgrammeEditionEnrolmentDataModel>[i]
    peeRepo -> peeMapper ++: toDomain(ProgrammeEditionEnrolmentDataModel[i])
    peeMapper -> peeFactory ++: newProgrammeEditionEnrolment(id, studentId, programmeEditionId, status)
    note over of peeFactory
        Creates a new
        ProgrammeEditionEnrolment object
    end note
    peeFactory --> peeMapper --: ProgrammeEditionEnrolment
    peeMapper --> peeRepo --: ProgrammeEditionEnrolment
end

peeRepo -> peeService: List<ProgrammeEditionEnrolment>
peeService -> peeAssembler ++: toDtoList(List<ProgrammeEditionEnrolment>)

loop for ProgrammeEditionEnrolment[i]
    note over of peeAssembler
        Invokes ProgrammeEditionEnrolmentDTO
             to construct object
    end note
end
peeAssembler --> peeService --: List<ProgrammeEditionEnrolmentDTO>
peeService --> peeCtrl --: List<ProgrammeEditionEnrolmentDTO>

legend right
  DTO = Data Transfer Object
  Mapper = Convert DataModel to Domain
  Assembler = Convert Domain to DTO
end legend

@enduml 
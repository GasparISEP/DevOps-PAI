@startuml
title US16: Enrol a student in a course edition (REST API)
autonumber
skinparam {
  ActivityPadding 2
  ActivityMargin 2
  BoxPadding 2
}
skinparam defaultTextAlignment center
skinparam shadowing true

actor Client
participant ":UI" as UI
participant ":StudentRestController" as StudentRestController
participant ":ProgrammeEditionRestController" as ProgrammeEditionRestController
participant ":CourseEditionEnrolmentController" as CourseEditionEnrolmentController
participant ":IStudentService" as StudentService
participant ":IStudentRepository" as StudentRepository
participant ":IProgrammeEditionService" as ProgrammeEditionService
participant ":ICourseEditionService" as CourseEditionService
participant ":ICourseEditionEnrolmentService" as CourseEditionEnrolmentService
participant ":IProgrammeEditionEnrolmentRepository" as ProgrammeEditionEnrolmentRepository
participant ":ICourseEditionRepository" as CourseEditionRepository
participant ":ICourseEditionEnrolmentRepository" as CourseEditionEnrolmentRepository
participant ":ICourseEditionEnrolmentFactory" as CourseEditionEnrolmentFactory
participant ":StudentMapper" as StudentMapper
participant ":ProgrammeEditionMapper" as ProgrammeEditionMapper
participant ":CourseEditionMapper" as CourseEditionMapper
participant ":CourseEditionEnrolmentAssembler" as CourseEditionEnrolmentAssembler
participant ":CourseEditionEnrolmentMapperDataModel" as CourseEditionEnrolmentMapperDataModel

Client -> UI: I want to enrol a student in a course edition!
activate UI #E1F5FE
UI --> Client: What Student?
deactivate UI

' Search for Student
Client -> UI: Search for student
activate UI #E1F5FE
UI -> StudentRestController: GET /api/students?search={searchTerm}
activate StudentRestController #E1F5FE
StudentRestController -> StudentService: findStudents(searchTerm)
activate StudentService #E1F5FE
StudentService -> StudentRepository: findStudents(searchTerm)
activate StudentRepository #E1F5FE
StudentRepository --> StudentService: List<Student>
deactivate StudentRepository
StudentService --> StudentRestController: List<Student>
deactivate StudentService
StudentRestController -> StudentMapper: toDto(Student)
activate StudentMapper #E1F5FE
StudentMapper --> StudentRestController: StudentDto
deactivate StudentMapper
StudentRestController --> UI: 200 OK (List<StudentDto>)
deactivate StudentRestController
UI --> Client: Here are the matching students. Select one.
deactivate UI

' Get Programme Editions for Selected Student
Client -> UI: Select student
activate UI #E1F5FE
UI -> StudentRestController: GET /api/students/{studentId}/programme-editions
activate StudentRestController #E1F5FE
StudentRestController -> ProgrammeEditionService: findProgrammeEditionsByStudent(studentID)
activate ProgrammeEditionService #E1F5FE
ProgrammeEditionService -> ProgrammeEditionEnrolmentRepository: findProgrammeEditionsThatStudentIsEnrolled(studentID)
activate ProgrammeEditionEnrolmentRepository #E1F5FE
ProgrammeEditionEnrolmentRepository --> ProgrammeEditionService: List<ProgrammeEditionID>
deactivate ProgrammeEditionEnrolmentRepository
ProgrammeEditionService --> StudentRestController: List<ProgrammeEditionID>
deactivate ProgrammeEditionService
StudentRestController -> ProgrammeEditionMapper: toDto(ProgrammeEditionID)
activate ProgrammeEditionMapper #E1F5FE
ProgrammeEditionMapper --> StudentRestController: ProgrammeEditionDto
deactivate ProgrammeEditionMapper
StudentRestController --> UI: 200 OK (List<ProgrammeEditionDto>)
deactivate StudentRestController
UI --> Client: Here is a list of programme editions the student is enrolled in. What Programme Edition?
deactivate UI

' Get Course Editions by Programme Edition
Client -> UI: Enter the Programme Edition!
activate UI #E1F5FE
UI -> ProgrammeEditionRestController: GET /api/programme-editions/{programmeEditionId}/course-editions
activate ProgrammeEditionRestController #E1F5FE
ProgrammeEditionRestController -> CourseEditionService: findCourseEditionsByProgrammeEdition(programmeEditionID)
activate CourseEditionService #E1F5FE
CourseEditionService -> CourseEditionRepository: findCourseEditionsByProgrammeEditionID(programmeEditionID)
activate CourseEditionRepository #E1F5FE
CourseEditionRepository --> CourseEditionService: List<CourseEditionID>
deactivate CourseEditionRepository
CourseEditionService --> ProgrammeEditionRestController: List<CourseEditionID>
deactivate CourseEditionService
ProgrammeEditionRestController -> CourseEditionMapper: toDto(CourseEditionID)
activate CourseEditionMapper #E1F5FE
CourseEditionMapper --> ProgrammeEditionRestController: CourseEditionDto
deactivate CourseEditionMapper
ProgrammeEditionRestController --> UI: 200 OK (List<CourseEditionDto>)
deactivate ProgrammeEditionRestController
UI --> Client: Here is a list of Course Editions! What Course Edition?
deactivate UI

' Enrol Student in Course Edition
Client -> UI: Enter the Course Edition!
activate UI #E1F5FE
UI --> Client: Sure?
deactivate UI
Client -> UI: Yes!
activate UI #E1F5FE
UI -> CourseEditionEnrolmentController: POST /api/courseeditions/enrolments
activate CourseEditionEnrolmentController #E1F5FE

CourseEditionEnrolmentController -> CourseEditionEnrolmentAssembler: toDomain(CourseEditionEnrolmentDto)
activate CourseEditionEnrolmentAssembler #E1F5FE
CourseEditionEnrolmentAssembler --> CourseEditionEnrolmentController: CourseEditionEnrolment
deactivate CourseEditionEnrolmentAssembler

CourseEditionEnrolmentController -> CourseEditionEnrolmentService: enrolStudentInACourseEdition(CourseEditionEnrolment)
activate CourseEditionEnrolmentService #E1F5FE

CourseEditionEnrolmentService -> CourseEditionEnrolmentRepository: isStudentEnrolledInCourseEdition(studentID, courseEditionID)
activate CourseEditionEnrolmentRepository #E1F5FE
CourseEditionEnrolmentRepository --> CourseEditionEnrolmentService: false
deactivate CourseEditionEnrolmentRepository

CourseEditionEnrolmentService -> CourseEditionEnrolmentMapperDataModel: toDataModel(CourseEditionEnrolment)
activate CourseEditionEnrolmentMapperDataModel #E1F5FE
CourseEditionEnrolmentMapperDataModel --> CourseEditionEnrolmentService: CourseEditionEnrolmentDataModel
deactivate CourseEditionEnrolmentMapperDataModel

CourseEditionEnrolmentService -> CourseEditionEnrolmentRepository: save(courseEditionEnrolmentDataModel)
activate CourseEditionEnrolmentRepository #E1F5FE
CourseEditionEnrolmentRepository --> CourseEditionEnrolmentService: true
deactivate CourseEditionEnrolmentRepository

CourseEditionEnrolmentService --> CourseEditionEnrolmentController: true
deactivate CourseEditionEnrolmentService
CourseEditionEnrolmentController --> UI: 201 Created
deactivate CourseEditionEnrolmentController
UI --> Client: Student successfully enrolled in course edition!
deactivate UI

@enduml

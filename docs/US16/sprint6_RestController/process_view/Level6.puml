@startuml
title US16: Enroll a Student in a Course Edition - Process View Level 6
autonumber

' Set colors for different types of lines
skinparam sequence {
    ArrowColor #2C3E50
    LifeLineBorderColor #2C3E50
    LifeLineBackgroundColor #ECF0F1
    ParticipantBorderColor #2C3E50
    ParticipantBackgroundColor #ECF0F1
    ParticipantFontColor #2C3E50
    ActorBorderColor #2C3E50
    ActorBackgroundColor #ECF0F1
    ActorFontColor #2C3E50
    DatabaseBorderColor #2C3E50
    DatabaseBackgroundColor #ECF0F1
    DatabaseFontColor #2C3E50
}

actor "Academic Services Coordinator" as ASC
participant ":CourseEditionEnrolmentRestController" as Controller
participant ":CourseEditionEnrolmentService" as Service
participant ":CourseEditionEnrolmentRepository" as Repository
participant ":CourseEditionEnrolmentAssembler" as Assembler
database "Database" as DB

ASC -> Controller: POST /api/courseeditions/enrolments
activate Controller

Controller -> Assembler: toDomain(CourseEditionEnrolmentDto)
activate Assembler
note right of Assembler
  Transformations:
  1. String studentId -> StudentID VO
  2. String programmeName -> NameWithNumbersAndSpecialChars VO
  3. String programmeAcronym -> Acronym VO
  4. String schoolYearId -> UUID -> SchoolYearID VO
  5. String courseName -> Name VO
  6. String courseAcronym -> Acronym VO
  7. String studyPlanDate -> Date VO
  Creates nested VOs:
  - ProgrammeID
  - ProgrammeEditionID
  - CourseID
  - StudyPlanID
  - CourseInStudyPlanID
  - CourseEditionID
end note
Assembler --> Controller: CourseEditionEnrolment
deactivate Assembler

Controller -> Service: enrolStudentInACourseEdition(CourseEditionEnrolment)
activate Service

Service -> Service: validateEnrollment(courseEditionEnrolment)
Service -> Repository: isStudentEnrolledInCourseEdition(studentId, courseEditionId)
activate Repository
Repository -> DB: SELECT * FROM course_edition_enrolments
activate DB
DB --> Repository: ResultSet
deactivate DB
Repository --> Service: false
deactivate Repository
Service --> Service: true

Service -> Assembler: toDataModel(CourseEditionEnrolment)
activate Assembler
note right of Assembler
  Transformations:
  1. StudentID VO -> StudentIDDataModel
  2. CourseEditionID VO -> CourseEditionIDDataModel
  3. All nested VOs -> corresponding DataModels
end note
Assembler --> Service: CourseEditionEnrolmentDataModel
deactivate Assembler

Service -> Repository: save(courseEditionEnrolmentDataModel)
activate Repository
Repository -> DB: INSERT INTO course_edition_enrolments
activate DB
DB --> Repository: Success
deactivate DB
Repository --> Service: true
deactivate Repository

Service --> Controller: true
deactivate Service

Controller --> ASC: 201 Created
deactivate Controller

@enduml 
@startuml
title US16: Enroll a student in a course edition

actor ASC
participant ":UI" as UI
ASC -> UI: I want to enroll a student in a course edition!
activate UI
UI --> ASC: What Student?
deactivate UI

ASC -> UI: Enter the student!
activate UI
participant ":US16_EnrollAStudentInACourseEditionController" as Controller
UI -> Controller: getProgrammeEditionsThatStudentIsEnrolled (student)
activate Controller
participant ":ProgrammeEditionEnrollmentRepo" as ProgrammeEditionEnrollmentRepository
Controller -> ProgrammeEditionEnrollmentRepository: getProgrammeEditionsThatStudentIsEnrolled (student)
activate ProgrammeEditionEnrollmentRepository
ProgrammeEditionEnrollmentRepository -> ProgrammeEditionListFactory: newArrayList ()
participant ":ProgrammeEditionListFactory" as ProgrammeEditionListFactory
activate ProgrammeEditionListFactory
create "pe[i]:ProgrammeEditionArrayList"
ProgrammeEditionListFactory -> "pe[i]:ProgrammeEditionArrayList": newArrayList ()
activate "pe[i]:ProgrammeEditionArrayList"
"pe[i]:ProgrammeEditionArrayList" --> ProgrammeEditionListFactory: EmptyList<ProgrammeEdition>
deactivate "pe[i]:ProgrammeEditionArrayList"
ProgrammeEditionListFactory --> ProgrammeEditionEnrollmentRepository: EmptyList<ProgrammeEdition>
deactivate ProgrammeEditionListFactory
loop for each "pe[i]:ProgrammeEditionEnrollmentRepo" as ProgrammeEditionEnrollmentRepo
participant ":ProgrammeEditionEnrollment" as ProgrammeEditionEnrollment
ProgrammeEditionEnrollmentRepository -> ProgrammeEditionEnrollment :  findStudentInProgrammeEditionEnrollment()
activate ProgrammeEditionEnrollment
ProgrammeEditionEnrollment --> ProgrammeEditionEnrollmentRepository : pe1
deactivate ProgrammeEditionEnrollment
'participant ":ProgrammeEditionArrayList" as ProgrammeEditionArrayList
ProgrammeEditionEnrollmentRepository -> "pe[i]:ProgrammeEditionArrayList":  add(pe1)
activate "pe[i]:ProgrammeEditionArrayList"
"pe[i]:ProgrammeEditionArrayList" --> ProgrammeEditionEnrollmentRepository: true
deactivate "pe[i]:ProgrammeEditionArrayList"
end
ProgrammeEditionEnrollmentRepository --> Controller: List<ProgrammeEdition>
deactivate ProgrammeEditionEnrollmentRepository
Controller --> UI: List<ProgrammeEdition>
deactivate Controller
UI --> ASC: Here is a list of programme editions the student is enrolled in. What Programme Edition?
deactivate UI

ASC -> UI: Enter the programme edition!
activate UI
UI -> Controller: getCourseEditionsOfProgrammeEdition (programmeEdition)
activate Controller
participant ":CourseEditionRepository" as CourseEditionRepository
Controller -> CourseEditionRepository: findCourseEditionsByProgrammeEdition (programmeEdition)
activate CourseEditionRepository
CourseEditionRepository -> CourseEditionListFactory: newArrayList()
activate CourseEditionListFactory
participant ":CourseEditionListFactory" as CourseEditionListFactory
create "ce[i]:CourseEditionArrayList"
CourseEditionListFactory -> "ce[i]:CourseEditionArrayList": newArrayList ()
activate "ce[i]:CourseEditionArrayList"
"ce[i]:CourseEditionArrayList" --> CourseEditionListFactory: EmptyList<CourseEdition>
deactivate "ce[i]:CourseEditionArrayList"
CourseEditionListFactory --> CourseEditionRepository: EmptyList<CourseEdition>
deactivate CourseEditionListFactory
loop for each "ce[i]:CourseEditionRepository" as CourseEditionRepository
CourseEditionRepository -> CourseEdition :  whatProgrammeEditionBelongsThisCourseEdition()
activate CourseEdition
CourseEdition --> CourseEditionRepository : ce1
deactivate CourseEdition
participant ":CourseEditionArrayList" as CourseEditionArrayList
CourseEditionRepository -> "ce[i]:CourseEditionArrayList" :  add(ce1)
activate "ce[i]:CourseEditionArrayList"
"ce[i]:CourseEditionArrayList" --> CourseEditionRepository: true
deactivate "ce[i]:CourseEditionArrayList"
end
CourseEditionRepository --> Controller: List<CourseEdition>
deactivate CourseEditionRepository
Controller --> UI: List<CourseEdition>
deactivate Controller
UI --> ASC: Here is a list of Course Editions! What Course Edition?
deactivate UI

ASC -> UI: Enter the course edition!
activate UI
UI --> ASC: Sure?
deactivate UI
ASC -> UI: Yes!
activate UI

UI -> Controller: enrollStudentInCourseEdition (student, courseEdition)
activate Controller

participant ":CourseEditionEnrollmentRepository" as CourseEditionEnrollmentRepository
Controller -> CourseEditionEnrollmentRepository: enrollStudentInCourseEdition (st1, ce1)
activate CourseEditionEnrollmentRepository
participant ":CourseEditionEnrollmentFactory" as CourseEditionEnrollmentFactory
CourseEditionEnrollmentRepository -> CourseEditionEnrollmentFactory: createCourseEditionEnrollment (st1,ce1)
activate CourseEditionEnrollmentFactory
create "cee1:CourseEditionEnrollment"
CourseEditionEnrollmentFactory -> "cee1:CourseEditionEnrollment" : createCourseEditionEnrollment (st1, ce1)
activate "cee1:CourseEditionEnrollment"
"cee1:CourseEditionEnrollment" --> CourseEditionEnrollmentFactory: cee1
deactivate "cee1:CourseEditionEnrollment"
CourseEditionEnrollmentFactory --> CourseEditionEnrollmentRepository: cee1
deactivate CourseEditionEnrollmentFactory
participant ":CourseEditionEnrollmentHashSet" as CourseEditionEnrollmentHashSet
CourseEditionEnrollmentRepository --> CourseEditionEnrollmentHashSet: add (cee1)
activate CourseEditionEnrollmentHashSet
CourseEditionEnrollmentHashSet -> CourseEditionEnrollmentRepository: true
deactivate CourseEditionEnrollmentHashSet
CourseEditionEnrollmentRepository --> Controller: True
deactivate CourseEditionEnrollmentRepository
Controller --> UI: True
deactivate Controller
UI --> ASC: OK!
deactivate UI

@enduml

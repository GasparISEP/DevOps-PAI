@startuml
title Get List of Course Editions \n (Reference Diagram)

skinparam titleFontName "Verdana"
skinparam defaultFontName "Verdana"
skinparam defaultTextAlignment center
skinparam shadowing true
skinparam actorBackgroundColor #lightblue
skinparam participantBackgroundColor #lightblue/white

autonumber

participant ":CourseEditionRestController" as C  #lightblue/white
participant ":ICreateCourseEditionService" as CES #lightblue/white
participant ":ICourseEditionAssembler" as CEM #lightblue/white
participant ":CourseEditionDTO" as CEDTO #lightblue/white
participant ":ICourseEditionRepository" as CER #lightblue/white
participant ":ICourseEditionMapper" as M #lightblue/white
participant ":ICourseEditionFactory" as CEF #lightblue/white
participant "courseEdition[i]:CourseEdition" as CE #lightblue/white

C -> CES: findAllCourseEditions()
activate C  #E1F5FE

activate CES  #E1F5FE
CES -> CER: findAll()
activate CER #E1F5FE

CER -> : findAll()
CER <-- : List<CourseEditionDataModel>

loop for CourseEditionDataModel[i]
CER -> M: toDomain(CourseEditionDataModel[i])
activate M #E1F5FE
M -> CEF: createCourseEdition(courseEditionDataModel[i])
deactivate M
activate CEF #E1F5FE
CEF -> CE**: new CourseEdition(courseEditionID, courseInStudyPlanID, programmeEditionID, teacherID)
deactivate CEF
end

CER --> CES --: List<CourseEdition>
deactivate CER
CES --> C: List<CourseEdition>
deactivate CES

loop for CourseEdition[i]
C -> CEM: fromDomainToDTO(courseEdition[i])
activate CEM #E1F5FE
CEM -> CEDTO: newCourseEditionDTO(courseEdition[i])

end

CEM --> C: List<CourseEditionResponseDTO>
deactivate CEM

deactivate C
@enduml

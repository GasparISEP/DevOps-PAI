@startuml
title US08: I want to register a Student in the system


class US08_IWantToRegisterAStudentInTheSystemController {
    + registerStudent(studentID : StudentID, name : Name, NIF : NIF, phone : Phone, email : Email, address : Address) : boolean
}

class StudentRepository {
    - _studentFactoryImpl : IStudentFactory
    - _students : List<Student>
    + registerStudent(studentID : StudentID, name : Name, NIF : NIF, phone : Phone, email : Email, address : Address) : boolean
    + getStudentByID(studentID : StudentID) : Optional<Student>
    + save(student : Student) : Student
    + findAll() : Iterable<Student>
    + ofIdentity(studentID : StudentID) : Optional<Student>
    + containsOfIdentity(studentID : StudentID) : boolean
}

package "Student Aggregate" {
    class Student <<Root>> <<Entity>> {
        - StudentID : StudentID
        - _name : Name
        - _NIF : NIF
        - _phone : Phone
        - _email : Email
        - _address : AddressVO
        - _institutionalEmail : InstitutionalEmail
        + identity() : StudentID
        + sameAs (object : Object) : boolean
        + equals(object : Object) : boolean
        + isEquals(student : Student) : boolean
    }
}

package "Address Aggregate" {
    class AddressVO <<Root>> <<Value Object>> {
        - _street : Street
        - _postalCode : PostalCode
        - _location : Location
        - _country : Country
        + isAttributeValid(attribute : Object)
    }
}

class StudentID <<Value Object>> {
    -_uniqueNumber : int
    + StudentID(uniqueNumber : int)
    + isUniqueNumberValid(uniqueNumber)
    + getUniqueNumber()
    + equals() : boolean
    + getUniqueNumber() : int
    + isEquals(studentID : StudentID) : boolean
}

class Name <<Value Object>> {
    -_name : String
    + Name(name : String)
    + isNameValid(name)
    + getName()
}

class NIF <<Value Object>> {
    -_NIF : String
    + NIF(NIF : String)
    + equals(nif : String)
    + isNIFInvalid(NIF)
}

class Phone <<Value Object>> {
    -_countryCode : String
    -_number : String
    + Phone(phone : String)
    + areParametersInvalid(parameter : String)
    + isCountryCodeInvalid(countryCode : String)
}

class Email <<Value Object>> {
    -_email : String
    + Email(email : String)
    + isEmailInvalid(email : String)
}

class InstitutionalEmail <<Value Object>> {
    -_emailDomain : String
    -_studentEmail : String
    + InstitutionalEmail(institutionalEmail : String)
    + getStudentEmail()
    + equals(o : object)
    + hashCode
    + toString()
}

class Street <<Value Object>> {
    -_street : String
    + Street(street : String)
}

class PostalCode <<Value Object>> {
    -_postalCode : String
    + PostalCode(postalCode : String)
}

class Location <<Value Object>> {
    -_location : String
    + Location(location : String)
    + getLocation()
}

class Country <<Value Object>> {
    -_country : String
    + Country(country : String)
    + isCountryInvalid(country : String)
    + equals(object : Object)
    + getCountry()
}

interface IStudentFactory <<Interface>> {
    + newStudent(StudentID : StudentID, name : Name, NIF : Name, phone : Phone, email : Email, street : Street, address : AddressVO) : Student
    + createAddress(street : Street, postalCode : PostalCode, location : Location, country : Country) : AddressVO
}

class StudentFactoryImpl {
    + newStudent(studentID : StudentID, name : Name, NIF : NIF, phone : PhoneNumber, email : Email, address : AddressVO) : Student
    + createAddress(street : Street, postalCode : PostalCode, location : Location, country : Country) : AddressVO
}

interface IStudentListFactory <<Interface>> {
    + newArrayList() : List<Student>
}

class StudentListFactoryImpl {
    + newArrayList() : List<Student>
}

class List<Student> <<Interface>> {}

interface IStudentRepository <<Interface>> {
    +registerStudent()
    +getStudentByID()
    + findIdByStudent(student : Student)
    + save(student : Student)
    + findAll()
    + ofIdentity(studentID : StudentID)
    + containsOfIdentity(studentID : StudentID)
}

interface IRepository <<Interface>> {
    + save(object : Object)
    + findAll()
    + ofIdentity(object : Object)
    + containsOfIdentity(object : Object)
}

US08_IWantToRegisterAStudentInTheSystemController "1" ...> "1 " IStudentRepository
StudentRepository "1" ..> "1" IStudentFactory
StudentRepository "1" ---> "_students\n*" Student
StudentRepository "1" ..> "1" IStudentListFactory
IStudentListFactory "1 " ..> "1  " List: <<creates>>
Student "1" --> "1" AddressVO
StudentFactoryImpl "*" ..|> "1     " IStudentFactory
StudentListFactoryImpl "*" ..|> "1     " IStudentListFactory
IStudentFactory "1" ..> "1" Student: <<create>>
StudentRepository ...|> IStudentRepository
IStudentRepository ..|> IRepository
Student "*" ----> "1" StudentID
Student "*" ----> "1" Name
Student "\n *" ----> "1  " Email
Student "\n *" ----> "1   " InstitutionalEmail
Student "\n *" ----> "1 " Phone
Student "\n *" ----> "1 " NIF
AddressVO "\n *" ----> "1" Street
AddressVO "\n *" ----> "1" PostalCode
AddressVO "\n *" ----> "1" Location
AddressVO "\n *" ----> "1" Country

@enduml
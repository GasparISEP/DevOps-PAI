@startuml
skinparam ranksep 180
skinparam linetype ortho
skinparam nodesep 180
'================================================================
' DDD Base Interfaces
'================================================================
package PAI.ddd {
  interface "AggregateRoot<T>" <<DDD>>
  interface "ValueObject"     <<DDD>>
  interface "DomainId"        <<DDD>>
  interface "IRepository<ID, T>" <<DDD>>
}

'================================================================
' Value Objects
'================================================================
package PAI.VOs {
  class "Name" <<ValueObject>> {
    - _name: String
    + Name(name: String)
    + getName(): String
    + equals(o: Object): boolean
    + hashCode(): int
  }

  class "TeacherCategoryID" <<ValueObject>> <<DomainId>> {
    - value: UUID
    + TeacherCategoryID()
    + TeacherCategoryID(value: UUID)
    + getValue(): UUID
    + equals(o: Object): boolean
    + hashCode(): int
  }
}

'================================================================
' Domain Aggregate
'================================================================
package PAI.domain {
  class "TeacherCategory" <<Aggregate>> <<Root>> {
    - id: TeacherCategoryID
    - name: Name
    + TeacherCategory(id: TeacherCategoryID, name: Name)
    + getId(): TeacherCategoryID
    + getName(): Name
    + getIdValue(): UUID
    + getNameValue(): String
    + identity(): TeacherCategoryID
    + sameAs(o: Object): boolean
    + equals(o: Object): boolean
    + hashCode(): int
    + toString(): String
  }

  TeacherCategory ..|> AggregateRoot
  TeacherCategory "1" --> "1" Name
  TeacherCategory "1" --> "1" TeacherCategoryID
}

'================================================================
' Factory
'================================================================
package PAI.factory {
  interface "ITeacherCategoryFactory" <<Factory>> {
    + createTeacherCategory(name: Name): TeacherCategory
  }

  class "TeacherCategoryFactoryImpl" {
    + createTeacherCategory(name: Name): TeacherCategory
  }

  ITeacherCategoryFactory <|.. TeacherCategoryFactoryImpl
  TeacherCategoryFactoryImpl --> TeacherCategory
  TeacherCategoryFactoryImpl --> Name
  TeacherCategoryFactoryImpl --> TeacherCategoryID
}

'================================================================
' Repository
'================================================================
package PAI.repository {
  interface "ITeacherCategoryRepository" <<Repository>> {
    + registerTeacherCategory(name: Name): boolean
    + existsByName(name: Name): boolean
    + save(category: TeacherCategory): TeacherCategory
  }

  class "TeacherCategoryRepositoryImpl" {
    - factory: ITeacherCategoryFactory
    + TeacherCategoryRepositoryImpl(factory: ITeacherCategoryFactory)
    + registerTeacherCategory(name: Name): boolean
    + existsByName(name: Name): boolean
    + save(category: TeacherCategory): TeacherCategory
  }

  IRepository <|.. ITeacherCategoryRepository
  ITeacherCategoryRepository <|.. TeacherCategoryRepositoryImpl
  TeacherCategoryRepositoryImpl --> ITeacherCategoryFactory
  TeacherCategoryRepositoryImpl --> TeacherCategory
  TeacherCategoryRepositoryImpl --> TeacherCategoryID
}

'================================================================
' Controller
'================================================================
package PAI.controller {
  class "US01_ConfigureTeacherCategoryController" {
    - repository: ITeacherCategoryRepository
    + US01_ConfigureTeacherCategoryController(repository: ITeacherCategoryRepository)
    + configureTeacherCategory(categoryName: String): boolean
  }

  US01_ConfigureTeacherCategoryController --> ITeacherCategoryRepository
}
@enduml

@startuml
skinparam sequenceMessageAlign center
skinparam sequenceLifeLineBackgroundColor lightblue
autonumber

actor HRC
participant ":UI" as UI
participant "ctrl:UpdateTeacherCareerProgressionController" as Controller #lightgreen
participant "service:TeacherCareerProgressionService" as service #lightblue
participant "lastTCP:TeacherCareerProgression" as TCP #lightpink
participant "tcpF:ITCPfactory" as TCPf #burlywood
participant "tcp1:TeacherCareerProgression" as TCP1
participant "tcpRepo: TeacherCareerProgressionRepositorySDImpl" as TCPRepo #lightblue
participant "ITeacherCareerProgressionRepoSpringData" as TCPRepoSpringData #lightpink


HRC -> UI : I want to update Teacher's\n Teacher Category percentage\t
activate HRC
activate UI
|||
ref over UI
**GetLists:** \t \t
  \t Get Teacher List and \t
  \t Teacher Category List \t

end ref
UI --> HRC : Which Teacher and\n which Teacher Category?
deactivate UI
HRC -> UI: Teacher, NIF\n and Teacher Category
activate UI
UI --> HRC: What date?
deactivate UI
HRC -> UI: Date
activate UI
UI -> Controller : updateTeacherCategoryInTeacherCareerProgression \n (teacherAcronym, NIF, teacherCategoryID, date)
activate Controller
|||
ref over Controller
\t\t\t\t    **CreateVOs:** \t\t\t
    \t \t \t \t \t\t Create teacherAcronym, NIF, \t\t
     \t \t \t \t \t\t teacherID and date Value Objects \t

end ref
|||
Controller -> service : updateTeacherWorkingPercentage(dateVO1,\n teacherCategoryIDVO1, teacherIdVO1)
activate service
|||
ref over service
\t\t\t\t\t**CheckTeacherAndTeacherCategoryInDB:** \t
    \t\t\t\t  Check if teacher and teacher Category exist
    in the database\t\t

end ref
|||
service -> TCPRepo : findLastTCPFromTeacherID(teacherIdVO1)
activate TCPRepo
|||
ref over TCPRepo
\t\t\t\t\t\t\t**CreateTeacherIDDataModel:** \t
    \t \t \t \t \t \t  Create teacherID Data Model \t
    \t\t\t\t\t\t(teacherIdDataModel)

end ref
|||
TCPRepo -> TCPRepoSpringData : \t findTopByTeacherIDOrderByDateDesc(teacherIdDataModel) \t
activate TCPRepoSpringData
TCPRepoSpringData ->
TCPRepoSpringData <--
TCPRepoSpringData --> TCPRepo : TeacherCareerProgressionDataModel
deactivate TCPRepoSpringData
|||
ref over TCPRepo
\t\t\t\t\t\t\t**CreateTeacherCareerProgressionFromDataModel:** \t
    \t\t\t\t\t\t\tCreate Teacher Career Progression Domain Object\t
    \t\tfrom Data Model (lastTCP)

end ref
|||
TCPRepo --> service : lastTCP
deactivate TCPRepo
|||
service -> TCP : lastTCP.isLastDateEqualOrBeforeNewDate\n(dateVO1)
activate TCP
TCP -> service : true
deactivate TCP
|||
service -> TCP : lastTCP.getWorkingPercentage()
activate TCP
TCP --> service : workingPercentageVO1
deactivate TCP
|||
service -> TCP : lastTCP.hasSameTeacherCategoryID\n(teacherCategoryIDVO1)
activate TCP
TCP --> service : false
deactivate TCP
|||
service -> TCPf : createTeacherCareerProgression (dateVO1, workingPercentageVO1,\n teacherCategoryIDVO1, teacherIdVO1)
activate TCPf
TCPf -> TCP1** : createTeacherCareerProgression \n(dateVO1, workingPercentageVO1,\n teacherCategoryIdVO1, teacherIdVO1)
activate TCP1
TCP1 --> TCPf : tcp1
deactivate TCP1
TCPf --> service : tcp1
deactivate TCPf
service -> TCPRepo: save(tcp1)
activate TCPRepo
|||
ref over TCPRepo
\t\t\t\t**CreateTeacherCareerProgressionDataModel:** \t
    \t\t\t\t\t\t\tCreate Teacher Career Progression Data Model (TCPDataModel)\t

end ref
|||
TCPRepo -> TCPRepoSpringData: save(TCPDataModel)
activate TCPRepoSpringData
TCPRepoSpringData ->
TCPRepoSpringData <--
TCPRepoSpringData --> TCPRepo: TCPDataModel
deactivate TCPRepoSpringData
|||
ref over TCPRepo
\t\t\t\t\t\t\t**CreateTeacherCareerProgressionFromDataModel:** \t
    \t\t\t\t\t\t\tCreate Teacher Career Progression Domain Object\t
    \t\tfrom Data Model (tcp1)

end ref
TCPRepo --> service: tcp1
deactivate TCPRepo
service --> Controller: True
deactivate service
Controller --> UI : true
deactivate Controller
UI --> HRC : Success!
deactivate UI
deactivate HRC

@enduml
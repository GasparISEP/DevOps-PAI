@startuml
skinparam sequenceMessageAlign center
skinparam sequenceLifeLineBackgroundColor #lightblue
autonumber
title: As a HRC, I want to update the teacherâ€™s category in the system.

actor HRC
participant ":UI" as UI #white
participant "ctrl:UpdateTeachersCategoryController" as Controller #lightgreen
participant "teacherRepo:TeacherRepository" as teacherRepo #Silver
participant "teacherList :List<Teacher>" as teacherList #Yellow/Silver
participant ":Teacher" as Teacher #lightyellow
participant "categoryRepo:TeacherCategoryRepository" as teacherCategoryRepo #Silver
participant "tcList :List<TeacherCategories>" as tcList #Yellow/Silver
participant ":TeacherCategory" as TeacherCategory #lightyellow
participant "teacherIDVO :TeacherIDVO" as teacherIDVO #lightblue
participant "newDateVO :DateVO" as newDateVO #lightblue
participant "newTeacherCategoryIDVO :TeacherCategoryIDVO" as tcVO #lightblue
participant "tcpRepo: TeacherCareerProgressionRepository" as TCPRepo #Silver
participant "tcpList :List<TeacherCareerProgressions>" as tcpList #Yellow/Silver
participant "lastTCP:TeacherCareerProgression" as TCP #lightyellow
participant "tcpFactory :tcpFactory" as tcpFactory #burlywood
participant "newTCP :TeacherCareerProgression" as newTCP #lightyellow

HRC -> UI : I want to update the Teacher's Category

activate HRC

activate UI
UI -> Controller : findAllTeachers()

activate Controller
Controller -> teacherRepo : findAll()

activate teacherRepo
teacherRepo --> Controller : teachersList
deactivate teacherRepo

Controller --> UI : teachersList
deactivate Controller

UI --> HRC : Which Teacher?
deactivate UI

HRC -> UI : Teacher's Acronym

activate UI
UI -> Controller : findAllTeacherCategories()

activate Controller
Controller -> teacherCategoryRepo : findAll()

activate teacherCategoryRepo
teacherCategoryRepo --> Controller : categoryList
deactivate teacherCategoryRepo

Controller --> UI : categoryList
deactivate Controller

UI --> HRC : Which Category?
deactivate UI

HRC -> UI : Teacher Category

activate UI
UI --> HRC : What date?
deactivate UI

HRC -> UI : Date

activate UI
UI -> Controller : updateTeacherCategoryInTeacherCareerProgression \n (teacherAcronym, date, teacherCategory)

activate Controller
Controller -> teacherIDVO** : createTeacherIDVO(teacherAcronym)

activate teacherIDVO
teacherIDVO -> teacherIDVO : isTeacherAcronymValid()
teacherIDVO --> Controller : teacherIDVO
deactivate teacherIDVO

Controller -> newDateVO** : createDateVO(date)

activate newDateVO
newDateVO -> newDateVO : validate and format date
newDateVO --> Controller : newDateVO
deactivate newDateVO

Controller -> tcVO** : createTeacherCategoryIDVO(teacherCategory)

activate tcVO
tcVO -> tcVO : isTeacherCategoryValid()
tcVO --> Controller : newTeacherCategoryIDVO
deactivate tcVO

Controller -> teacherRepo: containsOfIdentity(teacherIDVO)

activate teacherRepo
loop
    teacherRepo -> Teacher : teacher.identity().equals(teacherIdVO1)
    activate Teacher

    Teacher --> teacherRepo : True
    deactivate Teacher
end
teacherRepo -> Controller: True
deactivate teacherRepo

Controller -> teacherCategoryRepo: containsOfIdentity(newTeacherCategoryIDVO)

activate teacherCategoryRepo
loop
    teacherCategoryRepo -> TeacherCategory : teacherCategory.identity().equals(newTeacherCategoryIDVO)
    activate TeacherCategory

    TeacherCategory --> teacherCategoryRepo : True
    deactivate TeacherCategory
end
teacherCategoryRepo -> Controller: True
deactivate teacherCategoryRepo

Controller -> TCPRepo : updateTeacherCategoryInTeacherCareerProgression \n(teacherIDVO, newDateVO, newTeacherCategoryIDVO)

activate TCPRepo
TCPRepo -> TCPRepo : optionalTCP = findLastTCPFromTeacherID(teacherIDVO)
TCPRepo -> TCPRepo : lastTCP = optionalTCP.get()
TCPRepo -> TCP : lastTCP.isLastDateEqualOrBeforeNewDate(newDateVO)

activate TCP
TCP --> TCPRepo: True
deactivate TCP

TCPRepo -> TCP : lastTCP.getWorkingPercentage()

activate TCP
TCP --> TCPRepo : lastWorkingPercentageVO
deactivate TCP

TCPRepo -> TCP : lastTCP.getTeacherCategoryID()

activate TCP
TCP --> TCPRepo : lastTeacherCategoryIDVO
deactivate TCP

TCPRepo -> TCPRepo : validate if lastTeacherCategoryIDVO \nis different from newTeacherCategoryIDVO

TCPRepo -> tcpFactory : createTeacherCareerProgression \n(newDateVO, lastWorkingPercentageVO, newTeacherCategoryIDVO, teacherIDVO)

activate tcpFactory
tcpFactory -> newTCP** : createTeacherCareerProgression \n(newDateVO, lastWorkingPercentageVO, newTeacherCategoryIDVO, teacherIDVO)

activate newTCP
newTCP --> tcpFactory : newTCP
deactivate newTCP

tcpFactory --> TCPRepo : newTCP
deactivate tcpFactory

TCPRepo -> TCPRepo :isTeacherCareerProgressionDuplicated(newTCP)
TCPRepo -> TCPRepo: save(newTCP)
TCPRepo --> Controller : True
deactivate TCPRepo

Controller --> UI : True
deactivate Controller

UI --> HRC : Success
deactivate UI

deactivate HRC

@enduml
@startuml
skinparam sequenceMessageAlign center
autonumber


title As an HRC I want to Update a Teacher's Category in the System\n(Scenario - View Level 4 - Backend)


participant ":Router" as router
participant ":TeacherRestController" as Controller
participant ":ITeacherRegistrationService" as TService
participant ":ITeacherRepository" as TRepository
participant ":ITeacherRepositorySpringData" as TRepositorySpringData
participant ":TeacherCategoryRestController" as TCController
participant ":ITeacherCategoryService" as TCService
participant ":ICreateTeacherCareerProgressionService" as service
participant ":ITeacherCategoryRepository" as TCRepository
participant ":ITeacherCategoryRepositorySpringData" as TCRepositorySpringData
participant ":ITeacherCareerProgressionRepository" as TCPRepo
participant "lastTCP:TeacherCareerProgression" as TCP
participant ":ITeacherCareerProgressionFactory" as factory
participant ":ITeacherCareerProgressionRepositorySpringData" as TCPRepoSpringData

' getAllTeachers () method

[o-> router: **GET** /teachers
activate router #E1F5FE

router -> Controller: getAllTeachers ()
activate Controller #E1F5FE

Controller -> TService: getAllTeachers ()
activate TService #E1F5FE

TService -> TRepository: getAllTeachers ()
activate TRepository #E1F5FE

TRepository -> TRepositorySpringData: findAll ()
activate TRepositorySpringData #E1F5FE

TRepositorySpringData --> TRepository: teachersDataModel: Iterable<TeacherDataModel>
deactivate TRepositorySpringData

ref over TRepository
   SD Convert Iterable<TeacherDataModel> to Domain
end

TRepository --> TService: teachers: Iterable<Teacher>
deactivate TRepository

TService --> Controller: teachers: Iterable<Teacher>
deactivate TService

ref over Controller
   SD Convert Iterable<Teacher> to ResponseDTO
end

Controller --> router: 200 + body {teachersResponseDTO: CollectionModel<EntityModel<TeacherResponseDTO>>}
deactivate Controller

[o<-- router: 200 + body {teachersResponseDTO: CollectionModel<EntityModel<TeacherResponseDTO>>}
deactivate router

' getAllTeacherCategories() method

[o-> router: **GET** /teacher-categories
activate router #E1F5FE

router -> TCController: getAllTeacherCategories ()
activate TCController #E1F5FE

TCController -> TCService: getAllTeacherCategories ()
activate TCService #E1F5FE

TCService -> TCRepository: getAllTeacherCategories ()
activate TCRepository #E1F5FE

TCRepository -> TCRepositorySpringData: findAll ()
activate TCRepositorySpringData #E1F5FE

TCRepositorySpringData --> TCRepository: teacherCategoriesDataModel: Iterable<TeacherCategoryDataModel>
deactivate TCRepositorySpringData

ref over TCRepository
   SD Convert Iterable<TeacherCategoryDataModel> to Domain
end

TCRepository --> TCService: teacherCategories: Iterable<TeacherCategory>
deactivate TCRepository

TCService --> TCController: teacherCategories: Iterable<TeacherCategory>
deactivate TCService

ref over TCController
   SD Convert Iterable<TeacherCategory> to ResponseDTO
end

TCController --> router: 200 + body {teacherCategoriesResponseDTO: Iterable<TeacherCategoryResponseDTO>}
deactivate TCController

[o<-- router: 200 + body {teacherCategoriesResponseDTO: Iterable<TeacherCategoryResponseDTO>}
deactivate router

' updateTeacherCategory() method

[o-> router: **POST** /teachers/{teacherId}/careerprogressions/category + \n body {...}
activate router #E1F5FE

note over router #E0E0E0
  body:
    { "date": "2025-06-01" ,
    "teacherCategoryID": "05ab8bc8-33c2-46af-8988-d933e0256b89" }
end note

router -> Controller: updateTeacherCategory (teacherID, updateTeacherCategoryRequestDTO)
activate Controller #E1F5FE

ref over Controller
   SD Convert input to updateTeacherCategoryCommand
end

Controller -> service : updateTeacherCategory (updateTeacherCategoryCommand)
activate service #E1F5FE

service -> TCRepository :  containsOfIdentity \n (updateTeacherCategoryCommand.teacherCategoryID())
activate TCRepository #E1F5FE

ref over TCRepository
   SD Convert TeacherCategoryID to DataModel
end

TCRepository -> TCRepositorySpringData: existsById (teacherCategoryIDDataModel)
activate TCRepositorySpringData #E1F5FE

TCRepositorySpringData --> TCRepository: True
deactivate TCRepositorySpringData

TCRepository --> service: True
deactivate

service -> TCPRepo : findLastTCPFromTeacherID (updateTeacherCategoryCommand.teacherID())
activate TCPRepo #E1F5FE

TCPRepo -> TCPRepoSpringData: findTopByTeacherIdOrderByDateDesc (teacherID: String)
activate TCPRepoSpringData #E1F5FE

TCPRepoSpringData --> TCPRepo: Optional<lastTCPDataModel>
deactivate TCPRepoSpringData

ref over TCPRepo
    SD Convert tcpDataModel to Domain
end

TCPRepo --> service : lastTCP
deactivate TCPRepo

service -> TCP : isLastDateEqualOrBeforeNewDate (updateTeacherCategoryCommand.date())
activate TCP #E1F5FE
TCP -> service : False
deactivate TCP

service -> TCP : getWorkingPercentage()
activate TCP #E1F5FE
TCP --> service : workingPercentage
deactivate TCP

service -> TCP : hasSameTeacherCategoryID (updateTeacherCategoryCommand.teacherCategoryID())
activate TCP #E1F5FE
TCP --> service : False
deactivate TCP

service -> factory : createTeacherCareerProgression (dateVO, workingPercentageVO, teacherCategoryIDVO, teacherIDVO)
activate factory #E1F5FE

create "tcp: TeacherCareerProgression"
factory -> "tcp: TeacherCareerProgression": create (dateVO, workingPercentageVO, teacherCategoryIDVO, teacherIDVO)

factory --> service : tcp
deactivate factory

service -> TCPRepo: save (tcp)
activate TCPRepo #E1F5FE

ref over TCPRepo
    SD Convert tcp to DataModel
end

TCPRepo -> TCPRepoSpringData: save (tcpDataModel)
activate TCPRepoSpringData #E1F5FE

TCPRepoSpringData -->o]: **INSERT INTO** Teacher_Career_Progression \n (id, teacherId, teacherCategoryId, date, workingPercentage) VALUES (...)

TCPRepoSpringData <--o] : teacherCareerProgressionSavedDataModel


TCPRepoSpringData --> TCPRepo: tcpSavedDataModel
deactivate TCPRepoSpringData

ref over TCPRepo
    SD Convert tcpDataModel to Domain
end

TCPRepo --> service: tcpSaved
deactivate TCPRepo

ref over service
    SD Convert tcpSaved to DTO
end

service --> Controller: tcpSavedDTO
deactivate service

ref over Controller
    SD Convert tcpSavedDTO to tcpSavedResponseDTO
end

participant ":ITeacherCareerProgressionHateoasAssembler" as hateoasAssembler
Controller -> hateoasAssembler: toModel (tcpSavedResponseDTO)
activate hateoasAssembler #E1F5FE

participant ":ITeacherCareerProgressionRestController" as tcpRestController
hateoasAssembler -> tcpRestController: getTeacherCareerProgressionByID (id: UpdateTeacherCategoryResponseDTO)
activate tcpRestController #E1F5FE

tcpRestController --> hateoasAssembler: href:"/teacher-career-progressions/{id}"
deactivate tcpRestController

hateoasAssembler -> tcpRestController: getAllTeacherCareerProgressions ()
activate tcpRestController #E1F5FE

tcpRestController --> hateoasAssembler: href:"/teacher-career-progressions"
deactivate tcpRestController

hateoasAssembler --> Controller: updateTeacherCategoryResponseDTO: EntityModel<UpdateTeacherCategoryResponseDTO>
deactivate hateoasAssembler

Controller --> router: 201 + body { updateTeacherCategoryResponseDTO: EntityModel<UpdateTeacherCategoryResponseDTO>}
deactivate Controller

[o<-- router: 201 + body { updateTeacherCategoryResponseDTO: EntityModel<UpdateTeacherCategoryResponseDTO>}
deactivate router


@enduml
@startuml

title US14: As an HRC, I want to update the teacher's category in the system \n (Process View - Level 3 - Backend)

skinparam defaultTextAlignment center
skinparam shadowing true

autonumber

participant ":Router" as router <<Component>>
participant ":Controller" as controller <<Component>>
participant ":Service" as service <<Component>>
participant ":Domain" as domain <<Component>>
participant ":Repository" as repository <<Component>>
participant ":Drivers" as drivers <<Component>>

' getAllTeachers method '

[o-> router: **GET** /teachers
activate router #E1F5FE

router -> controller: getAllTeachers ()
activate controller #E1F5FE

controller -> service: getAllTeachers ()
activate service #E1F5FE

service -> repository: findAll ()
activate repository #E1F5FE

repository -> drivers: findAll ()
activate drivers #E1F5FE

drivers ->o]: SELECT * FROM teacher

drivers <--o]: Iterable<TeacherDataModel>

drivers --> repository: Iterable<TeacherDataModel>
deactivate drivers

repository --> service: Iterable<Teacher>
deactivate repository

service --> controller: Iterable<Teacher>
deactivate service

controller --> router: 200 + body {Iterable<TeacherResponseDTO> + hypermedia}
deactivate controller

[o<-- router: 200 + body {Iterable<TeacherResponseDTO> + hypermedia}
deactivate router

' getAllTeacherCategories method '

[o-> router: **GET** /teacher-categories
activate router #E1F5FE

router -> controller: getAllTeacherCategories ()
activate controller #E1F5FE

controller -> service: getAllTeacherCategories ()
activate service #E1F5FE

service -> repository: findAll ()
activate repository #E1F5FE

repository -> drivers: findAll ()
activate drivers #E1F5FE

drivers ->o]: SELECT * FROM teacherCategory

drivers <--o]: Iterable<TeacherCategoryDataModel>

drivers --> repository: Iterable<TeacherCategoryDataModel>
deactivate drivers

repository --> service: Iterable<TeacherCategory>
deactivate repository

service --> controller: Iterable<TeacherCategory>
deactivate service

controller --> router: 200 + body {Iterable<TeacherCategoryResponseDTO> + hypermedia}
deactivate controller

[o<-- router: 200 + body {Iterable<TeacherCategoryResponseDTO> + hypermedia}
deactivate router

' updateTeacherCategory method '

[o-> router: **POST** /teachers/{teacherId}/careerprogressions/category + \n body {...}
activate router #E1F5FE

note over router #E0E0E0
  body:
    {"teacherId": "AAA",
     "teacherCategoryID": "05ab8bc8-33c2-46af-8988-d933e0256b89",
     "date": "2025-06-01"
    }
end note

router -> controller: updateTeacherCategory (teacherId, requestDTO)
activate controller #E1F5FE

controller -> service: updateTeacherCategory (command)
activate service #E1F5FE

service -> repository: containsOfIdentity (command.teacherCategoryID())
activate repository #E1F5FE

repository -> drivers: existsById (teacherCategoryID)
activate drivers #E1F5FE

drivers -->o]: SELECT EXISTS (SELECT 1 FROM teacherCategory \n WHERE id = '05ab8bc8-33c2-46af-8988-d933e0256b89');

drivers <--o] : True

drivers --> repository: True
deactivate drivers

repository --> service: True
deactivate repository

service -> repository: findLastTCPFromTeacherID (command.teacherID())
activate repository #E1F5FE

repository -> drivers: findTopByTeacherIdOrderByDateDesc (String teacherID)
activate drivers #E1F5FE

drivers -->o]: SELECT * FROM teacher_career_progression \n WHERE teacher_id = 'AAA' ORDER BY date DESC LIMIT 1;

drivers <--o] : lastTcpDataModel

drivers --> repository: lastTCP
deactivate drivers

repository --> service: lastTCP
deactivate repository

service -> domain : lastTCP.isLastDateEqualOrBeforeNewDate \n (command.date())
activate domain #E1F5FE

domain --> service : False
deactivate domain

service -> domain : lastTCP.getWorkingPercentage()
activate domain #E1F5FE

domain --> service : workingPercentage
deactivate domain

service -> domain : lastTCP.hasSameTeacherCategoryID \n (command.teacherCategoryID())
activate domain #E1F5FE

domain --> service : False
deactivate domain

service -> domain: createTeacherCareerProgression \n (date, teacherCategoryID, workingPercentage, teacherID)
activate domain #E1F5FE

domain --> service: teacherCareerProgression
deactivate domain

service -> repository: save (teacherCareerProgression)
activate repository #E1F5FE

repository -> drivers: save (teacherCareerProgressionDataModel)
activate drivers #E1F5FE

drivers -->o]: INSERT INTO Teacher_Career_Progression \n (id, teacherId, teacherCategoryId, date) VALUES (...)

drivers <--o] : teacherCareerProgressionSavedDataModel

drivers --> repository: teacherCareerProgressionSavedDataModel
deactivate drivers

repository --> service: teacherCareerProgressionSaved
deactivate repository

service --> controller: teacherCareerProgressionSavedDTO
deactivate service

controller --> router: 201 + \n body {updateTeacherCategoryResponseDTO + hypermedia}
deactivate controller

[o<-- router: 201 + \n body {updateTeacherCategoryResponseDTO + hypermedia}
deactivate router

@enduml
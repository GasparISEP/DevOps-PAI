@startuml
title US11: I want to register a programme in the system

class ProgrammeRestController {
    +US11_RegisterProgrammeInTheSystemController(programmeService: IProgrammeService, programmeAssembler: IProgrammeDTOMapper)
    +registerProgramme(name: NameWithNumbersAndSpecialChars, acronym: Acronym, quantityOfEcts: QuantEcts,
    quantityOfSemesters: QuantSemesters, degreeTypeID: DegreeTypeID, departmentID: DepartmentID , programmeDirectorID: TeacherID)
}

interface IProgrammeDTOMapper {
    +fromDomainToDTO(Programme)
    +fromDTOtoDomain(nameVO, acronymVO, quantECTSVO, quantSemestersVO, degreeTypeIDVO, departmentIDVO, teacherIDVO)
}

class ProgrammeDTOMapperImpl {
    +fromDomainToDTO(Programme)
    +fromDTOtoDomain(nameVO, acronymVO, quantECTSVO, quantSemestersVO,
    degreeTypeIDVO, departmentIDVO, teacherIDVO)
}

class ProgrammeRequestDTO {
    -_name: String
    -_acronym: String
    -_quantityOfEcts: Integer
    -_quantityOfSemesters: Integer
    -_degreeTypeID: String
    -_departmentID: String
    -_programmeDirectorID: String
    +ProgrammeRequestDTO(name: String, acronym: String, quantityOfEcts: Integer, quantityOfSemesters: Integer,
    degreeTypeID: String, departmentID: String, programmeDirectorID: String)
}

class ProgrammeVOsDTO {
    -_name: Name
    -_acronym: Acronym
    -_quantityOfEcts: QuantECTS
    -_quantityOfSemesters: QuantSemesters
    -_degreeTypeID: DegreeTypeID
    -_departmentID: DepartmentID
    -_programmeDirectorID: TeacherID
    +ProgrammeVOsDTO(name: Name, acronym: Acronym, quantityOfEcts: QuantECTS, quantityOfSemesters: QuantSemesters,
    degreeTypeID: DegreeTypeID, departmentID: DepartmentID, programmeDirectorID: TeacherID)
}

class ProgrammeResponseDTO {
    -_programmeID: String
    -_name: String
    -_acronym: String
    -_quantityOfEcts: Integer
    -_quantityOfSemesters: Integer
    -_degreeTypeName: String
    -_departmentName: String
    -_programmeDirectorName: String
    +ProgrammeResponseDTO(programmeID: String, name: String, acronym: String, quantityOfEcts: Integer, quantityOfSemesters: Integer,
    degreeTypeName: String, departmentName: String, programmeDirectorName: String)
}

interface IDegreeTypeService {
    +getAllDegreeTypes()
}

class DegreeTypeServiceImpl {
    +getAllDegreeTypes()
}

interface IDegreeTypeDTOMapper {
    +fromDomainToDTO(degreeTypeName: Name)
}

class DegreeTypeDTOMapper {
    +fromDomainToDTO(degreeTypeName: Name)
}

interface IDepartmentService {
    +getAllDepartments()
}

class DepartmentServiceImpl {
    +getAllDepartments()
}

interface IDepartmentDTOMapper {
    +fromDomainToDTO(departmentName: Name)
}

class DepartmentDTOMapper {
    +fromDomainToDTO(departmentName: Name)
}

interface ITeacherService {
    +getAllTeachers()
}

class TeacherServiceImpl {
    +getAllTeachers()
}

interface ITeacherDTOMapper {
    +fromDomainToDTO(programmeDirectorName: Name)
}

class TeacherDTOMapper {
    +fromDomainToDTO(programmeDirectorName: Name)
}

interface IProgrammeService {
    +registerProgramme (name: NameWithNumbersAndSpecialChars, acronym: Acronym, quantityOfEcts: QuantEcts,
    quantityOfSemesters: QuantSemesters, degreeTypeID: DegreeTypeID, departmentID: DepartmentID, programmeDirectorID: TeacherID)
}

class ProgrammeServiceImpl {
    +ProgrammeServiceImpl(programmeRepository: IProgrammeRepository)
    +registerProgramme (name: NameWithNumbersAndSpecialChars, acronym: Acronym, quantityOfEcts: QuantEcts,
    quantityOfSemesters: QuantSemesters, degreeTypeID: DegreeTypeID, departmentID: DepartmentID, programmeDirectorID: TeacherID)
}

interface IProgrammeFactory {
    +createProgramme(name: NameWithNumbersAndSpecialChars, acronym: Acronym, \nquantityOfEcts: QuantEcts, quantityOfSemesters: QuantSemesters, degreeTypeID: DegreeTypeID, \ndepartmentID: DepartmentID, programmeDirectorID: TeacherID)
}

class ProgrammeFactoryImpl {
    +createProgramme(name: NameWithNumbersAndSpecialChars, acronym: Acronym, \nquantityOfEcts: QuantEcts, quantityOfSemesters: QuantSemesters, degreeTypeID: DegreeTypeID, \ndepartmentID: DepartmentID, programmeDirectorID: TeacherID)
}

interface IProgrammeRepository {
    +save(programme: Programme)
    +containsOfIdentity (programmeID: ProgrammeID))
}

interface IProgrammeRepositorySpringData {
}

class ProgrammeRepositorySpringData {
     -_I_programmeFactory: IProgrammeDDDFactory
     -_programmeRepo: List<Programme>
     -_programmeRepoListFactory: IProgrammeDDDRepositoryListFactory
     +ProgrammeRepositorySpringDataImpl(IProgrammeMapper iProgMapper, IProgrammeRepositorySpringData iProgRepo, IProgrammeIDMapper iProgIDMapper)
     +save(programme: Programme)
     +containsOfIdentity (programmeID: ProgrammeID))
}

interface IProgrammeMapper {
    +toDataModel(programme: Programme)
    +toDomain(programmeDataModel: ProgrammeDataModel)
}

class ProgrammeMapperImpl {
    +toDataModel(programme: Programme)
    +toDomain(programmeDataModel: ProgrammeDataModel)
}

interface IProgrammeIDMapper {
    +toDataModel(programmeID: ProgrammeID)
    +toDomain(programmeIDDataModel: ProgrammeIDDataModel)
}

interface IDegreeTypeIDMapper {}

interface IDepartmentIDMapper {}

interface ITeacherIDMapper {}

interface IProgrammeFactory {}

class ProgrammeIDMapperImpl {
    +toDataModel(programmeID: ProgrammeID)
    +toDomain(programmeIDDataModel: ProgrammeIDDataModel)
}

package "Programme Aggregate" {
    class "<<root>>\nProgramme" {
        +Programme(name: NameWithNumbersAndSpecialChars, acronym: Acronym, \nquantityOfEcts: QuantEcts, quantityOfSemesters: QuantSemesters, degreeTypeID: DegreeTypeID, \ndepartmentID: DepartmentID, programmeDirectorID: TeacherID)
        +getProgrammeID()
        +getQuantEcts()
        +getQuantSemesters()
        +getAcronym()
        +getProgrammeName()
        +getDegreeTypeID()
        +getDepartment()
        +getProgrammeDirectorID()
    }
}

class ProgrammeID <<ValueObject>> {
    -_progID: String
    +ProgrammeID()
    +getProgrammeID(): String
    +equals(Object o): boolean
}

class DepartmentID <<ValueObject>> {}

class Acronym <<ValueObject>> {}

class NameWithNumbersAndSpecialChars <<ValueObject>> {}

class quantEcts <<ValueObject>> {}

class QuantSemesters <<ValueObject>> {}

class DegreeTypeID <<ValueObject>> {}

class TeacherID <<ValueObject>> {}

class ProgrammeDataModel {
    -_name: String
    -_acronym: String
    -_quantSemesters: Integer
    -_quantEcts: Integer
    +ProgrammeDataModel()
    +ProgrammeDataModel(programmeID: ProgrammeIDDataModel, name: String, acronym: String, quantSemesters: Integer, quantEcts: Integer,
    degreeTypeID: DegreeTypeIDDataModel, departmentID: DepartmentIDDataModel, progDirectorID: TeacherIDDataModel)
    +getName()
    +getAcronym()
    +getQuantSemesters()
    +getQuantEcts()
    +getDegreeTypeID()
    +getDepartmentID()
    +getProgrammeDirectorID()
    +getProgID()
}

class ProgrammeIDDataModel {
    -_programmeName: String
    -_programmeAcronym: String
    +TeacherIDDataModel()
    +TeacherIDDataModel(teacherAcronym: String)
    +getTeacherAcronym()
}

class DegreeTypeIDDataModel {
    -_degreeTypeID: String
    +DegreeTypeIDDataModel()
    +DegreeTypeIDDataModel(degreeTypeID: String)
    +getDegreeTypeID()
}

class DepartmentIDDataModel {
    -_departmentTypeID: String
    +DepartmentIDDataModel()
    +DepartmentIDDataModel(departmentID: String)
    +getDepartmentID()
}

class TeacherIDDataModel {
    -_teacherAcronym: String
    +TeacherIDDataModel()
    +TeacherIDDataModel(teacherAcronym: String)
    +getTeacherAcronym()
}

ProgrammeRestController "*" ---> "_DegreeTypeService\n1" IDegreeTypeService
ProgrammeRestController "*" ---> "_departmentService\n1" IDepartmentService
ProgrammeRestController "*" ---> "_teacherService\n1" ITeacherService
ProgrammeRestController "*" -u--> "_programmeService\n1" IProgrammeService
ProgrammeRestController "*" ---> "_programmeDTOMapper\n1" IProgrammeDTOMapper
ProgrammeRestController "*" ---> "_degreeTypeDTOMapper\n1" IDegreeTypeDTOMapper
ProgrammeRestController "*" ---> "_departmentDTOMapper\n1" IDepartmentDTOMapper
ProgrammeRestController "*" ---> "_teacherDTOMapper\n1" ITeacherDTOMapper

IDegreeTypeDTOMapper <|.. DegreeTypeDTOMapper
IDepartmentDTOMapper <|.. DepartmentDTOMapper
ITeacherDTOMapper <|.. TeacherDTOMapper

IProgrammeDTOMapper <|.. ProgrammeDTOMapperImpl
IProgrammeDTOMapper "1" ..> "*" ProgrammeRequestDTO
IProgrammeDTOMapper "1" ..> "*" ProgrammeVOsDTO
IProgrammeDTOMapper "1" ..> "*" ProgrammeResponseDTO

IDegreeTypeService <|.- DegreeTypeServiceImpl
IDepartmentService <|.- DepartmentServiceImpl
ITeacherService <|.- TeacherServiceImpl
IProgrammeService <|.- ProgrammeServiceImpl

IProgrammeService "*" ---> "1" IProgrammeRepository

IProgrammeFactory <|.d. ProgrammeFactoryImpl
IProgrammeFactory "1" ..> "*" "<<root>>\nProgramme" : "<<creates>>"

IProgrammeRepository <|.u- ProgrammeRepositorySpringData
IProgrammeRepository "*" ---> "_programmeMapper\n1" IProgrammeMapper
IProgrammeRepository "*" ---> "_programmeIDMapper\n1" IProgrammeIDMapper
IProgrammeRepository "*" ---> "_programmeRepositorySpringData\n1" IProgrammeRepositorySpringData
IProgrammeRepository "1" ..> "*" "<<root>>\nProgramme"
IProgrammeRepository "1" ..> "*" ProgrammeDataModel

IProgrammeMapper <|.u. ProgrammeMapperImpl
IProgrammeMapper "1" ..> "*" "<<root>>\nProgramme"
IProgrammeMapper "1" ..> "*" ProgrammeDataModel
IProgrammeMapper "*" -u-> "_programmeIDMapper\n1" IProgrammeIDMapper
IProgrammeMapper "*" -u-> "_degreeTypeIDMapper\n1" IDegreeTypeIDMapper
IProgrammeMapper "*" -u-> "_departmentIDMapper\n1" IDepartmentIDMapper
IProgrammeMapper "*" -u-> "_teacherIDMapper\n1" ITeacherIDMapper
IProgrammeMapper "*" -u-> "_programmeFactory\n1" IProgrammeFactory

IProgrammeIDMapper <|.. ProgrammeIDMapperImpl
IProgrammeIDMapper "1" ..> "*" "<<root>>\nProgramme"
IProgrammeIDMapper "1" ..> "*" ProgrammeIDDataModel

"<<root>>\nProgramme" "*" ---> "1" TeacherID
"<<root>>\nProgramme" "*" ---> "1" DegreeTypeID
"<<root>>\nProgramme" "*" ---> "1" DepartmentID
"<<root>>\nProgramme" "*" ---> "1" QuantSemesters
"<<root>>\nProgramme" "*" ---> "1" quantEcts
"<<root>>\nProgramme" "1" ---> "1" Acronym
"<<root>>\nProgramme" "1" ---> "1" NameWithNumbersAndSpecialChars
"<<root>>\nProgramme" "1" ---> "1" ProgrammeID

ProgrammeDataModel "*" ---> "_teacherID\n1" TeacherIDDataModel
ProgrammeDataModel "*" ---> "_teacherID\n1" DegreeTypeIDDataModel
ProgrammeDataModel "*" ---> "_degreeTypeID\n1" DepartmentIDDataModel
ProgrammeDataModel "1" ---> "_programmeID\n1" ProgrammeIDDataModel
@enduml
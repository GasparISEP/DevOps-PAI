@startuml
!pragma layout smetana

class US11_RegisterAProgrammeInTheSystem {
    -_programmeRepository: ProgrammeRepository
    +US11_RegisterProgrammeInTheSystem(ProgrammeRepository programmeRepo)
    +registerProgrammeInTheSystem(String name, String acronym, int quantityOfEcts, int quantityOfSemesters, \nDegreeType degreeType, Department department, Teacher programmeDirector, ProgrammeCourseListFactoryImpl programmeCourseListFactoryImpl1, \nCourseInStudyPlanFactory courseInStudyPlanFactory, StudyPlanListFactory studyPlanListFactory, StudyPlanFactory studyPlanFactory, CourseFactory CourseFactory): boolean
}

class "List<Programme>" {}
class "List<Course>" {}
class "List<CourseInStudyPlan>" {}

class Department {
    -_acronym:String
    -_name:String
    -_director:Teacher
}

class Programme {
     -_name: string
     -_acronym: string
     -_quantityOfEcts: int
     -_quantityOfSemesters: int
     -_degreeType: DegreeType
     -_department: Department
     -_programmeDirector: Teacher
     -_courseList: List<Course>
     -_programmeCourseListFactory: ProgrammeCourseListFactory
     -_studyPlan: StudyPlan

     +Programme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType, department: Department, \nprogrammeDirector: Teacher, programmeCourseListFactory: ProgrammeCourseListFactory, courseInStudyPlanFactory: CourseInStudyPlanFactory,
     studyPlanListFactory: StudyPlanListFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory)
     + isNameInvalid(name: String): boolean
     + isAcronymInvalid(acronym: String): boolean
     + isQuantityOfEctsInvalid(quantityOfEcts: int)
     + isQuantityOfSemestersInvalid(quantityOfSemesters: int)
     + equals(o: Object): boolean
     + isEquals(programme: Programme): boolean
     + addCourseToAProgramme(course: Course): boolean
     + isInDepartment(department: Department): boolean
     + getCourseList(): List<Course>
     + getQuantityOfSemester(): int
     + getQuantityOfEcts(): int
     + getStudyPlan(): StudyPlan
     + calculateNumberOfYears(quantityOfSemesters: int): int
     + hasThisProgrammeName(name: String): boolean
 }

class ProgrammeRepository {
     -_programmeFactory: ProgrammeFactory
     -_programmeRepository: List<Programme>
     -_programmeRepositoryListFactory: ProgrammeRepositoryListFactory
     +ProgrammeRepository(programmeFactory: ProgrammeFactory)
     +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType; department : Department,programmeDirector: Teacher, programmeCourseListFactory: ProgrammeCourseListFactory,
     courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory): boolean
}

class DegreeType {
    -_name: String
    -_maxEcts: int
}

class Teacher {
     -_acronym:String
     -_name:String
     -_email:String
     -_nif:String
     -_phoneNumber:String
     -_academicBackground:String
     -_address: Address
     -_addressFactory: AddressFactory
     -_department: Department
     -_teacherCareerProgressionList: List<TeacherCareerProgression>
     -_teacherCareerProgressionFactory: TeacherCareerProgressionFactory
}


class StudyPlan {
    -_courseInStudyPlanFactory: CourseInStudyPlanFactory
    -_courseFactory: CourseFactory
    -_studyPlanListFactory: List<CourseInStudyPlan>
    + StudyPlan(courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory, courseFactory: CourseFactory)
    + addCourseToStudyPlan(semester: int, curricularYear: int, course: Course, programme: Programme): boolean
    + isCourseOrProgrammeInvalid(course: Course, programme: Programme): boolean
    + isCourseInStudyPlan(course: Course): boolean
    + addAnnualCourse(semester: int, curricularYear: int, course: Course, programme: Programme): boolean
    + isEctsLimitExceeded(curricularYear: int, semester: int, courseInStudyPlan: CourseInStudyPlan): boolean
}

class ProgrammeCourseListFactoryImpl {
    +createCourseList(): List<Course>
}

interface ProgrammeCourseListFactory {
    +createCourseList(): List<Course>
}

interface StudyPlanListFactory {
    +newList(): List<CourseInStudyPlan>
}

class StudyPlanListFactoryImpl {
    +newList(): List<CourseInStudyPlan>
}

class StudyPlanFactoryImpl {
    +newStudyPlan(courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory,
    courseFactory: CourseFactory): StudyPlan
}

interface StudyPlanFactory {
    +newStudyPlan(courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory,
    courseFactory: CourseFactory): StudyPlan
}

interface ProgrammeRepositoryListFactory {
    +newProgrammeArrayList(): ArrayList<Programme>
    +copyProgrammeArrayList(): List<Programme>
}

class ProgrammeRepositoryListFactoryImpl {
    +newProgrammeArrayList: ArrayList<Programme>
}

interface ProgrammeFactory {
    +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType, department: Department, programmeDirector: Teacher, programmeCourseListFactory: ProgrammeCourseListFactory,
    courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory)
}

class ProgrammeFactoryImpl {
    +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, degreeType: DegreeType, department: Department, programmeDirector: Teacher, programmeCourseListFactory: ProgrammeCourseListFactory,
    courseInStudyPlanFactory: CourseInStudyPlanFactory, studyPlanListFactory: StudyPlanListFactory, studyPlanFactory: StudyPlanFactory, courseFactory: CourseFactory)
}

US27_RegisterAProgrammeInTheSystemIncludingStudyPlan ..> ProgrammeRepository
ProgrammeRepository ..> ProgrammeRepositoryListFactory
ProgrammeRepositoryListFactory <|.. ProgrammeRepositoryListFactoryImpl
ProgrammeRepository --> "List<Programme>"

Programme --> DegreeType
Programme --> Department
Programme --> Teacher

Programme ..> ProgrammeCourseListFactory
ProgrammeCourseListFactory <|.. ProgrammeCourseListFactoryImpl


Programme ..> StudyPlanFactory
StudyPlanFactoryImpl ..|> StudyPlanFactory
StudyPlanFactory ..> StudyPlan : "<<creates>>"
Programme --> StudyPlan

StudyPlan --> "List<CourseInStudyPlan>"



Programme --> "List<Course>"


StudyPlan ..> StudyPlanListFactory
StudyPlanListFactory <|.. StudyPlanListFactoryImpl

ProgrammeRepository ..> ProgrammeFactory
ProgrammeFactory <|.. ProgrammeFactoryImpl
ProgrammeFactory ..> Programme : "<<creates>>"



"List<Programme>" --> Programme
ProgrammeRepositoryListFactory ..> "List<Programme>" : <<creates>>

ProgrammeCourseListFactory ..> "List<Course>" : <<creates>>

StudyPlanListFactory ..> "List<CourseInStudyPlan>" : <<creates>>


ProgrammeRepository ..> Programme
@enduml
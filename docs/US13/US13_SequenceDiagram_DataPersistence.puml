@startuml

title US13 : I want to register a Teacher and all relevant data
skinparam sequenceMessageAlign center
autonumber

actor HRC as HRC #application
participant UI as UI #business
participant ":US13_Controller" as controller #implementation
'Ref#1 : get Teacher Category's list.
'Ref#2 : get Department's list.
participant ":ITeacherService" as IteacherService #technology
participant ":ITeacherFactory" as IteacherFactory #application
participant "addr:Address" as addr #business
participant "t1:Teacher" as t #implementation
participant "t1ID:TeacherID" as tID #strategy
'Ref#3 : create Teacher Career Progression tcp1.
participant ":ITeacherRepositoryJPA" as IteacherRepoJPA #implementation
participant ":Teacher" as teacher
participant ":TeacherMapper" as tMapper #motivation
participant ":TeacherID" as teacherID
participant ":TeacherDataModel" as teacherDM #physical



HRC -> UI : I want to register a Teacher in the System \n Including All Relevant Data
activate UI
UI --> HRC : What are the Teacher's attributes?
deactivate UI
HRC -> UI : acronym, name, email, NIF, phoneNumber, academicBackground, street, postalCode, location, country
activate UI
UI -> controller : getCategoriesList()

activate controller
ref over controller : Ref#1 \n\n  \t\t\t gets Teacher Category's List
controller --> UI : Which Category?
deactivate controller
deactivate UI



UI -> controller : getDepartmentList()
activate UI
activate controller

ref over controller : \t Ref#2 : \n\n  \t\t\t gets Department's list

controller --> UI : Which Department?
deactivate controller
deactivate UI



UI -> controller : registerTeacher (teacherAcronym, name, email, nif, phoneNumber, \n academicBackground, street, postalCode, location, country, departmentID)

ref over controller : \t\t Ref#3 : \n\n  \t\t\t convert DTO to VO
activate UI
activate controller
controller -> IteacherService : registerTeacher (teacherAcronym, name, email, nif, phoneNumber, \n academicBackground, street, postalCode, location, country, departmentID)
activate IteacherService
IteacherService -> IteacherFactory : createTeacher(teacherAcronym, name, email, nif, phoneNumber, \n academicBackground, street, postalCode, location, country, departmentID)
activate IteacherFactory
IteacherFactory -> addr** : createAddress(street, postalCode, location, country)
activate addr
addr --> IteacherFactory : addr
deactivate addr
IteacherFactory -> t** : new Teacher (teacherAcronym, name, email, nif, phoneNumber, \n academicBackground, addr, departmentID)
activate t
t -> tID** : new TeacherID (teacherAcronym, NIF)
activate tID
tID --> t : t1ID
deactivate tID
t --> IteacherFactory : t1
deactivate t
IteacherFactory -> IteacherFactory : t1ID = t1.identity()
IteacherFactory -> IteacherRepoJPA : containsOfIdentity(t1ID)
activate IteacherRepoJPA

loop for each Teacher in TeacherRepositoryJPA
    IteacherRepoJPA -> teacher : identity()
    activate teacher
    teacher -> teacherID : equals()
    activate teacherID
    teacherID --> teacher : false
    deactivate teacherID
end
    teacher --> IteacherRepoJPA : False
    deactivate teacher
IteacherRepoJPA --> IteacherFactory : false
deactivate IteacherRepoJPA


IteacherFactory --> IteacherService : t1

ref over IteacherService : Ref#4 \n\n  \t\t\tcreate Teacher Career Progression tcp1(t1ID, tcID, workingPercentage, date)


deactivate IteacherFactory
deactivate IteacherService


deactivate IteacherService
IteacherService -> IteacherRepoJPA : save(t1)
activate IteacherService
activate IteacherRepoJPA
IteacherRepoJPA -> tMapper : toDataModel(t1)
activate tMapper
tMapper -> teacherDM** : new Teacher Data Model
activate teacherDM
teacherDM --> tMapper : teacherDataModel
deactivate teacherDM
tMapper --> IteacherRepoJPA : teacherDataModel
deactivate tMapper
IteacherRepoJPA ->  : insert(teacherDataModel)
IteacherRepoJPA <-- : teacherDataModel
IteacherRepoJPA --> IteacherService : teacherDataModel
deactivate IteacherRepoJPA
IteacherService --> controller : true
deactivate IteacherService
controller --> UI : true
deactivate controller
UI --> HRC : Success!
deactivate UI

@enduml
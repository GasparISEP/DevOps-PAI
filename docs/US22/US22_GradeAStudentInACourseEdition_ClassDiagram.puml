@startuml
title US22: I want to grade a student in a CourseEdition
'left to right direction

class US22_IWantToGradeAStudentInACourseEdition {
    +US22_IWantToGradeAStudentInACourseEdition(gradeStudentRepository : GradeStudentRepository, courseEditionEnrolmentRepository : CourseEditionEnrolmentRepository)
    +isStudentEnrolledInCourseEdition(courseEdition : CourseEdition, student : Student): boolean
    +iWantToGradeAStudent(grade : int, date : String student : Student, courseEdition : CourseEdition): GradeStudent

}

class CourseEditionEnrolmentRepository {
    +CourseEditionEnrolmentRepository (courseEditionEnrolmentFactory: CourseEditionEnrolmentFactory, courseEditionEnrolmentListFactory: CourseEditionEnrolmentListFactory)
    +enrolStudentInACourseEdition (student: Student, courseEdition: CourseEdition): boolean
    +isStudentEnrolledInCourseEdition (student: Student, courseEdition: CourseEdition): boolean
    +findByStudentAndEdition (student: Student, courseEdition: CourseEdition): CourseEditionEnrolment
    +numberOfStudentsEnrolledInCourseEdition (CourseEdition : CourseEdition): int
    +removeEnrolment (student : Student): boolean
    +enrolStudentInProgrammeCourseEdition(student : Student, List<CourseEdition> courseEdition)
}


 class CourseEditionEnrolmentId <<ValueObject>> {

        }
package "CourseEditionEnrolment" {
entity "<<root>>\nCourseEditionEnrolment"  {
         +CourseEditionEnrolment(student:Student, courseEdition: CourseEdition)
         +equals (obj: Object): boolean
         +knowStudent(): Student
         +knowCourseEdition(): CourseEdition
         +deactivateEnrollment()

    }
    class Localdate <<ValueObject>> {
                    -LocalDate : String
                }
    }


class List<GradeStudent> {

}

package "StudentGrade" {
entity "<<root>>\nGradeStudent"  {
    +hasThisCourseEdition(CourseEdition : CourseEdition)
    +knowCourseEdition()
    +get_student()
    +get_courseEdition()
    +equals (objectToCompare: Object)

    }
    class Grade <<ValueObject>> {
        -grade: double
        +knowGrade()
    }
    class LocalDate <<ValueObject>> {
            -date: String
            +isDateValid(String date)
            +get_date()
        }
}

 class StudentGradeId <<ValueObject>> {
    id: Long
        }

class GradeStudentRepository {
    -gradeStudentList: List<GradeStudent>
    - _gradeStudentFactory: GradeStudentFactory
    +addGradeToStudent()
    +knowAverageGrade()
    +knowApprovalRate()
}

Interface GradeStudentRepositoryInterface {
    +addGradeToStudent()
    +knowAverageGrade()
    +knowApprovalRate()
}

interface GradeStudentFactory {
    +newGradeStudent()
}

interface GradeStudentListFactory {
    +newArrayList()
}

class GradeStudentListFactoryImpl {
    +newArrayList()
}

class GradeStudentFactoryImpl {
    +newGradeStudent()
}



class StudentId <<ValueObject>> {

            }

package "Student" {
entity "<<root>>\nStudent"  {
        +Student(uniqueNumber: String, name: String, NIF: String, phone: String, email: String, address: Address)
         +isStudentRepeated(students: List<Student>)
         +hasSameUniqueNumber(Student student)
         +hasSameNIF (Student student)
         +getUniqueNumber(): String
         +hasThisUniqueNumber(String uniqueNumber)

    }
    class Name <<ValueObject>> {
                -Name : String
            }
    class NIF <<ValueObject>> {
                 -NIF : String
            }
    class Phone <<ValueObject>> {
                     -Phone : String
                }
    class Email <<ValueObject>> {
                     -Phone : String
                    }
     class Address <<ValueObject>> {
                     -Adress : String
                        }
    }
    
class CourseEditionId <<ValueObject>> {

            }


package "CourseEdition" {
entity "<<root>>\nCourseEdition"  {
        +Equals(objectToCompare: Object)
      +setRuc(Teacher: ruc)
      +whatProgrammeEditionBelongsThisCourseEdition ()
      +getCourse()

    }
    }

"<<root>>\nCourseEditionEnrolment" --> "1" Localdate
"<<root>>\nStudent" "*" --> "1" Name
"<<root>>\nStudent" "*" --> "1" NIF
"<<root>>\nStudent" "*" --> "1" Email
"<<root>>\nStudent" "*" --> "1" Phone
"<<root>>\nStudent" "*" --> "1" Address
"<<root>>\nGradeStudent" "*" --> "1" Grade
"<<root>>\nGradeStudent" "*" --> "1" LocalDate
"<<root>>\nGradeStudent" --> "1" StudentId: belongs
"<<root>>\nGradeStudent" --> "1" CourseEditionId : refers to
GradeStudentRepositoryInterface "1" ....> GradeStudentFactory
GradeStudentFactory "1" ....> "Creates" "<<root>>\nGradeStudent"
GradeStudentRepositoryInterface "1" ....>  GradeStudentListFactory
GradeStudentListFactoryImpl ..|>  GradeStudentListFactory
GradeStudentFactory  <|..  GradeStudentFactoryImpl
GradeStudentRepository <|.. GradeStudentRepositoryInterface
GradeStudentListFactory ..|> List
"<<root>>\nGradeStudent" <-- List
List <-- GradeStudentRepositoryInterface
CourseEditionEnrolmentRepository "1" --> "*" CourseEditionEnrolmentId
"<<root>>\nCourseEditionEnrolment" "*" --> "1" StudentId
"<<root>>\nCourseEditionEnrolment" "*" -up-> "1" CourseEditionId
"<<root>>\nGradeStudent" --> "1" StudentGradeId
"<<root>>\nCourseEdition" --> "1" CourseEditionId
"<<root>>\nStudent" --> "1" StudentId
"<<root>>\nCourseEditionEnrolment" --> "1" CourseEditionEnrolmentId



GradeStudentRepositoryInterface "1" ....> "*" "<<root>>\nGradeStudent"


US22_IWantToGradeAStudentInACourseEdition "1" ..left..> "1    " CourseEditionEnrolmentRepository
US22_IWantToGradeAStudentInACourseEdition "1" ..> "1    " GradeStudentRepositoryInterface

@enduml
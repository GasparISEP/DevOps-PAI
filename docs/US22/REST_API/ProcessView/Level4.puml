@startuml

title As a RUC, I want to grade a Student in a Course Edition \n (Process View Level 4)
skinparam sequencemessagealign center
autonumber

actor RUC
participant ":UI" as ui #application
participant ":CourseEditionRESTController" as ctrlrREST #business
participant ":StudentGradeAssemblerImpl" as assembler #implementation
participant ":GradeAStudentServiceImpl" as service #motivation
participant ":CourseEditionEnrolmentRepositorySpringData" as ceer #physical
participant ":CourseEditionEnrolmentMapperImpl" as ceemp #strategy
participant ":StudentGradeFactoryImpl" as sgf #technology
participant "sg1:StudentGrade" as gs #skyblue
participant ":CourseEditionRepositorySpringData" as courseEditionRepo #lightsteelblue
participant ":ICourseEditionRepositorySpringData" as icourseEditionRepo #wheat
participant ":StudentGradeRepositorySpringData" as sgr #lightcoral
participant ":StudentGradeMapper" as sgmp #mistyrose
participant ":IStudentGradeRepositorySpringData" as IStudentGradeRepoSpringData #khaki


RUC -> ui : I want to **grade a Student** in a Course Edition
activate ui
ui -> ctrlrREST : (GET) \n Retrieve all CourseEditions
activate ctrlrREST
ctrlrREST -> service : findAll()
activate service
service -> courseEditionRepo : findAll()
activate courseEditionRepo
courseEditionRepo -> icourseEditionRepo : findAll()
activate icourseEditionRepo
icourseEditionRepo ->  : findAll()
icourseEditionRepo <--  : all CourseEditions
icourseEditionRepo -> courseEditionRepo : all CourseEditions
deactivate icourseEditionRepo
courseEditionRepo --> service : all CourseEditions
deactivate courseEditionRepo
service --> ctrlrREST : all CourseEditions
deactivate service
ctrlrREST --> ui : all CourseEditions
deactivate ctrlrREST

ui --> RUC : Which CourseEdition?
RUC -> ui : This CourseEdition!

ui --> RUC : Grade, Date, CourseEditionID, StudentID?
RUC -> ui : grade, date, courseEditionID, studentID!
ui -> ctrlrREST : gradeAStudent (grade, date, studentID, courseEditionID)
activate ctrlrREST
ctrlrREST -> assembler : toDomain(studentGradeRequestDTO)
activate assembler
ref over assembler : \t \t \t \t  Convert StudentGradeRequestDTO \n \t \t \t  into GradeAStudentCommand
assembler --> ctrlrREST : gradeAStudentCommand
deactivate assembler


ctrlrREST -> service : gradeAStudent (grade, date, studentID, courseEditionID)
activate service
service -> ceer : isStudentEnrolledInCourseEdition (studentID, courseEditionID)
activate ceer

ceer -> ceer: findAll()
ceer -> ceemp :  DataModel CEE
activate ceemp
ceemp --> ceer : List <CEE>
deactivate ceemp
ceer --> service : true
deactivate ceer

service -> service : isDateGradeInRangeWithSchoolYear()
service -> service : hasStudentAlreadyGradeAtThisCourseEdition()

service -> sgf : newGradeStudent (Grade,Date, StudentID, CourseEditionID)
activate sgf
create gs
sgf -> gs : <Create> (Grade,Date, StudentID, CourseEditionID)
activate gs
gs --> sgf : sg1
deactivate gs
sgf --> service : sg1
deactivate sgf
service -> sgr : save(sg1)
activate sgr
sgr -> sgmp : toData(sg1)
activate sgmp
sgmp --> sgr : studentGradeDataModel
deactivate sgmp
sgr -> IStudentGradeRepoSpringData : save(studentGradeDataModel)
activate IStudentGradeRepoSpringData
IStudentGradeRepoSpringData ->  : save In Database
IStudentGradeRepoSpringData <--  : studentGradeDataModel
IStudentGradeRepoSpringData --> sgr : sg1
deactivate IStudentGradeRepoSpringData
sgr -> sgmp : toDomain(studentGradeDataModel)
activate sgmp
sgmp --> sgr : sg1
deactivate sgmp
sgr --> service -- : sg1
service --> ctrlrREST -- : Status Code 200 (OK!)
ctrlrREST --> ui -- : Status Code 200 (OK!)
ui --> RUC : Success!
deactivate ui

@enduml
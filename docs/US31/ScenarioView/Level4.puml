@startuml
autonumber

title As an ASC, I want to register a programme in the system.


participant ":Router" as R #lightyellow
participant "dtCtrl:DegreeTypeRestController" as dtC #lightblue
participant "dCtrl:DepartmentRestController" as dC #lightpink
participant "tCtrl:TeacherRestController" as tC #lightyellow
participant "pCtrl:ProgrammeRestController" as C #implementation
participant "pService:ProgrammeService" as PS #physical
participant "pFactory:ProgrammeFactory" as PF #strategy

participant "tService:TeacherService" as TS #lightgreen
participant "PID1:ProgrammeId" as PID #lightgrey
participant "P1:Programme" as P #lightpink

participant "teacherRepo:TeacherRepository" as TR #lightcyan
participant "pRepo:ProgrammeRepository" as PR #lightcyan

[o-> R ++: **GET** /degreeTypes

R -> dtC ++: getAllDegreeTypes()

ref over dtC
          Get DegreeTypes List
end ref

dtC --> R --: List<DegreeTypeDTO>
[o<-- R --: List<DegreeTypeDTO>

[o-> R ++: **GET** /departments
R -> dC ++: getAllDepartments()

ref over dC
          Get Departments List
end ref

dC --> R --: List<DepartmentDTO>
[o<-- R --: List<DepartmentDTO>

[o-> R ++: **GET** /departments
R -> tC ++: getAllTeachers()

ref over tC
          Get Teachers List
end ref

tC --> R --: List<TeacherDTO>
[o<-- R --: List<TeacherDTO>

[o-> R ++: **POST** /programmes

R -> C ++: registerAProgrammeInTheSystem \n(programmeDTO)

ref over C
    Convert ProgrammeDTO
    to ProgrammeVOsDTO
end ref

C -> PS ++: registerProgramme(programmeVOsDTO)

ref over PS
    Verify if Department exists
end ref

ref over PS
    Verify if Teacher exists
end ref

PS -> DS ++: containsOfIdentity(departmentID)
DS -> DR ++: containsOfIdentity(departmentID)
DR -> Drivers ++: containsOfIdentity(departmentID)
Drivers ->o] : containsOfIdentity(departmentID)
Drivers <--o] : True
Drivers --> DR --: True
DR --> DS --: True
DS --> PS --: True

PS -> TS ++: containsOfIdentity(teacherID)
TS -> TR ++: containsOfIdentity(teacherID)
TR -> Drivers ++: containsOfIdentity(teacherID)
Drivers ->o] : containsOfIdentity(teacherID)
Drivers <--o] : True
Drivers --> TR --: True
TR --> TS --: True
TS --> PS --: True

ref over PS
    Verify if the Quantity of Semesters and the Degree Type are aligned
end ref

PS -> PF ++: registerProgramme(nameVO, acronymVO, \nmaxEctsVO, quantitySemestersVO, \ndegreeTypeIDVO, departmentIDVO, teacherIDVO)

PF -> PID **: newProgrammeID(acronymVO)
activate PID
PID --> PF --: \t PIDVO1
PF -> P **: newProgramme(nameVO, acronymVO, \nmaxEctsVO, quantitySemestersVO, \ndegreeTypeIDVO, departmentIDVO, teacherIDVO, PIDVO1)
activate P

P --> PF --: P1
PF --> PS --: P1

PS -> PR++ :containsOfIdentity (programme.identity())
PR ->o] : existsById (programmeID)
PR <--o] : False
PR --> PS-- : False

PS -> PR ++: saveProgramme(P1)

ref over PR
    Save in Database
    Convert domain object to DataModel and persist using JPA
end ref

PR --> PS --: P1

PS --> C --: P1

ref over C
    Convert P1 to EntityModel<ProgrammeDTO>
end ref

C --> R --: (201, Created) + body {programmeIDDTO + hypermedia}

[o<-- R--: (201, Created) + body {programmeIDDTO + hypermedia}

@enduml
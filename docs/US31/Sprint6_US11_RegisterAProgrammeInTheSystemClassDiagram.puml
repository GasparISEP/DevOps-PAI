@startuml
title US11: I want to register a programme in the system

class ProgrammeRestController {
    +ProgrammeRestController(programmeService: IProgrammeService, programmeAssembler: IProgrammeAssembler, studyPlanService: IStudyPlanService,\nstudyPlanAssembler: IStudyPlanAssembler, teacherService: ITeacherService, programmeDirectorAssembler: IProgrammeDirectorAssembler)
    +registerProgramme(programmeRequestDTO: ProgrammeRequestDTO)
}

interface IProgrammeAssembler {
    +fromDomainToDTO(programmeDomain: Programme)
    +fromDTOtoDomain(programmeRequestDTO: ProgrammeRequestDTO))
}

class ProgrammeAssemblerImpl {
    +fromDomainToDTO(programmeDomain:Programme)
    +fromDTOtoDomain(programmeRequestDTO: ProgrammeRequestDTO)
}

class ProgrammeDTO {
    -_name: String
    -_acronym: String
    -_maxOfEcts: Integer
    -_quantityOfSemesters: Integer
    -_degreeTypeID: String
    -_departmentID: String
    -_programmeDirectorID: String
    +ProgrammeDTO(name: String, acronym: String, maxOfEcts: Integer, quantityOfSemesters: Integer,
    degreeTypeID: String, departmentID: String, programmeDirectorID: String)
}

class ProgrammeVOsDTO {
    -_name: Name
    -_acronym: Acronym
    -_maxOfEcts: MaxECTS
    -_quantityOfSemesters: QuantSemesters
    -_degreeTypeID: DegreeTypeID
    -_departmentID: DepartmentID
    -_programmeDirectorID: TeacherID
    +ProgrammeVOsDTO(name: Name, acronym: Acronym, maxOfEcts: QuantECTS, quantityOfSemesters: QuantSemesters,
    degreeTypeID: DegreeTypeID, departmentID: DepartmentID, programmeDirectorID: TeacherID)
}

interface IProgrammeService {
    +registerProgramme (programmeVOsDTO: ProgrammeVOsDTO)
}

class ProgrammeServiceImpl {
    -_programmeAssembler
    +ProgrammeServiceImpl(programmeFactory: IProgrammeFactory, programmeRepository: IProgrammeRepository,\nprogrammeAssembler: IProgrammeAssembler, degreeTypeService: IDegreeTypeService)
    +registerProgramme (programmeVOsDTO: ProgrammeVOsDTO)
}

interface IDegreeTypeService {
    +getDegreeTypeByID (degreeTypeID: DegreeTypeID)
}

class DegreeTypeService {
    -_degreeTypeFactory
    -_degreeTypeRepository
    +getDegreeTypeByID (degreeTypeID: DegreeTypeID)
}

interface IProgrammeFactory {
    +createProgramme(name: NameWithNumbersAndSpecialChars, acronym: Acronym, \nquantityOfEcts: QuantEcts, quantityOfSemesters: QuantSemesters, degreeTypeID: DegreeTypeID, \ndepartmentID: DepartmentID, programmeDirectorID: TeacherID)
}

class ProgrammeFactoryImpl {
    +createProgramme(name: NameWithNumbersAndSpecialChars, acronym: Acronym, \nquantityOfEcts: QuantEcts, quantityOfSemesters: QuantSemesters, degreeTypeID: DegreeTypeID, \ndepartmentID: DepartmentID, programmeDirectorID: TeacherID)
}

interface IProgrammeRepository {
    +save(programme: Programme)
    +containsOfIdentity (programmeID: ProgrammeID))
}

interface IDegreeTypeRepository {
    +ofIdentity (programmeID: ProgrammeID)
}

interface IProgrammeRepositorySpringData {
    +save(programme: Programme)
    +containsOfIdentity (programmeID: ProgrammeID))
}

interface IDegreeTypeRepositorySpringData {
    +ofIdentity (programmeID: ProgrammeID)
}

class ProgrammeRepositorySpringData {
     +ProgrammeRepositorySpringDataImpl(programmeMapper: IProgrammeMapper, programmeRepository, IProgrammeRepositorySpringData, programmeIDMapper: IProgrammeIDMapper)
     +save(programme: Programme)
     +containsOfIdentity (programmeID: ProgrammeID))
}

class DegreeTypeRepositorySpringData {
     +ofIdentity (programmeID: ProgrammeID)
}

interface IProgrammeMapper {
    +toDataModel(programme: Programme)
    +toDomain(programmeDataModel: ProgrammeDataModel)
}

class ProgrammeMapperImpl {
    +toDataModel(programme: Programme)
    +toDomain(programmeDataModel: ProgrammeDataModel)
}

interface IDegreeTypeMapper {
    +toDataModel(degreeType: DegreeType)
    +toDomain(degreeTypeDataModel: DegreeTypeDataModel)
}

class DegreeTypeMapperImpl {
    +toDataModel(degreeType: DegreeType)
    +toDomain(degreeTypeDataModel: DegreeTypeDataModel)
}

interface IProgrammeIDMapper {
    +toDataModel(programmeID: ProgrammeID)
    +toDomain(programmeIDDataModel: ProgrammeIDDataModel)
}

interface IDegreeTypeIDMapper {
    +toDataModel(degreeTypeID: DegreeTypeID)
    +toDomain(degreeTypeIDDataModel: DegreeTypeIDDataModel)
}

interface IDepartmentIDMapper {}

interface ITeacherIDMapper {}

interface IProgrammeFactory {}

class ProgrammeIDMapperImpl {
    +toDataModel(programmeID: ProgrammeID)
    +toDomain(programmeIDDataModel: ProgrammeIDDataModel)
}

class DegreeTypeIDMapper {
    +toDataModel(degreeTypeID: DegreeTypeID)
    +toDomain(degreeTypeIDDataModel: DegreeTypeIDDataModel)
}

package "Programme Aggregate" {
    class "<<root>>\nProgramme" {
        +Programme(name: NameWithNumbersAndSpecialChars, acronym: Acronym, \nmaxOfEcts: MaxEcts, quantityOfSemesters: QuantSemesters, degreeTypeID: DegreeTypeID, \ndepartmentID: DepartmentID, programmeDirectorID: TeacherID)
        +getProgrammeID()
        +getMaxEcts()
        +getQuantSemesters()
        +getAcronym()
        +getProgrammeName()
        +getDegreeTypeID()
        +getDepartment()
        +getProgrammeDirectorID()
    }
}

class ProgrammeID <<ValueObject>> {
    -_progID: String
    +ProgrammeID()
    +getProgrammeID()
    +equals(programmeID: Object)
}

class DepartmentID <<ValueObject>> {}

class Acronym <<ValueObject>> {}

class NameWithNumbersAndSpecialChars <<ValueObject>> {}

class MaxEcts <<ValueObject>> {}

class QuantSemesters <<ValueObject>> {}

class DegreeTypeID <<ValueObject>> {}

class TeacherID <<ValueObject>> {}

class ProgrammeDataModel {
    -_name: String
    -_acronym: String
    -_quantSemesters: Integer
    -_maxEcts: Integer
    +ProgrammeDataModel()
    +ProgrammeDataModel(programmeID: ProgrammeIDDataModel, name: String, acronym: String, quantSemesters: Integer, maxEcts: Integer,
    degreeTypeID: DegreeTypeIDDataModel, departmentID: DepartmentIDDataModel, progDirectorID: TeacherIDDataModel)
    +getName()
    +getAcronym()
    +getQuantSemesters()
    +getMaxEcts()
    +getDegreeTypeID()
    +getDepartmentID()
    +getProgrammeDirectorID()
    +getProgID()
}

class ProgrammeIDDataModel {
    -_programmeName: String
    -_programmeAcronym: String
    +TeacherIDDataModel()
    +TeacherIDDataModel(teacherAcronym: String)
    +getTeacherAcronym()
}

class DegreeTypeIDDataModel {
    -_degreeTypeID: String
    +DegreeTypeIDDataModel()
    +DegreeTypeIDDataModel(degreeTypeID: String)
    +getDegreeTypeID()
}

class DepartmentIDDataModel {
    -_departmentTypeID: String
    +DepartmentIDDataModel()
    +DepartmentIDDataModel(departmentID: String)
    +getDepartmentID()
}

class TeacherIDDataModel {
    -_teacherAcronym: String
    +TeacherIDDataModel()
    +TeacherIDDataModel(teacherAcronym: String)
    +getTeacherAcronym()
}

ProgrammeRestController "*" -u--> "_programmeService\n1" IProgrammeService
ProgrammeRestController "*" ---> "_programmeDTOMapper\n1" IProgrammeAssembler
ProgrammeRestController "1" ..> "*" ProgrammeDTO
ProgrammeRestController "1" ..> "*" ProgrammeVOsDTO
ProgrammeRestController "1" ..> "*" "<<root>>\nProgramme"

IProgrammeAssembler <|.. ProgrammeAssemblerImpl
IProgrammeAssembler "1" .u.> "*" ProgrammeDTO
IProgrammeAssembler "1" .u.> "*" ProgrammeVOsDTO

IProgrammeService <|.- ProgrammeServiceImpl
IProgrammeService "1" ..> "*" ProgrammeVOsDTO

IProgrammeService "*" -r--> "_programmeRepository\n1" IProgrammeRepository
IProgrammeService "*" -r--> "_programmeFactory\n1" IProgrammeFactory
IProgrammeService "*" -u--> "_degreeTypeService\n1" IDegreeTypeService

IDegreeTypeService "*" --l-> "_degreeTypeService\n1" IDegreeTypeRepository
IDegreeTypeService <|.r. DegreeTypeService

IDegreeTypeRepository <|.d. DegreeTypeRepositorySpringData
IDegreeTypeRepository "*" ---> "_degreeTypeRepositorySpringData\n1" IDegreeTypeRepositorySpringData
IDegreeTypeRepository "*" ---> "_degreeTypeMapper\n1" IDegreeTypeMapper
IDegreeTypeRepository "*" ---> "_degreeTypeIDMapper\n1" IDegreeTypeIDMapper

IDegreeTypeIDMapper "1" ..> "*" DegreeTypeID
IDegreeTypeIDMapper "1" ..> "*" DegreeTypeIDDataModel

IDegreeTypeMapper "1" ..> "*" DegreeType
IDegreeTypeMapper "1" ..> "*" DegreeTypeDataModel

IProgrammeFactory <|.d. ProgrammeFactoryImpl
IProgrammeFactory "1" ..> "*" "<<root>>\nProgramme" : "<<creates>>"

IProgrammeRepository <|.u- ProgrammeRepositorySpringData
IProgrammeRepository "*" ---> "_programmeMapper\n1" IProgrammeMapper
IProgrammeRepository "*" ---> "_programmeIDMapper\n1" IProgrammeIDMapper
IProgrammeRepository "*" ---> "_programmeRepositorySpringData\n1" IProgrammeRepositorySpringData
IProgrammeRepository "1" ..> "*" "<<root>>\nProgramme"
IProgrammeRepository "1" ..> "*" ProgrammeDataModel

IProgrammeMapper <|.u. ProgrammeMapperImpl
IProgrammeMapper "1" ..> "*" "<<root>>\nProgramme"
IProgrammeMapper "1" ..> "*" ProgrammeDataModel
IProgrammeMapper "*" -u-> "_programmeIDMapper\n1" IProgrammeIDMapper
IProgrammeMapper "*" -u-> "_degreeTypeIDMapper\n1" IDegreeTypeIDMapper
IProgrammeMapper "*" -u-> "_departmentIDMapper\n1" IDepartmentIDMapper
IProgrammeMapper "*" -u-> "_teacherIDMapper\n1" ITeacherIDMapper
IProgrammeMapper "*" -u-> "_programmeFactory\n1" IProgrammeFactory

IProgrammeIDMapper <|.. ProgrammeIDMapperImpl
IProgrammeIDMapper "1" ..> "*" "<<root>>\nProgramme"
IProgrammeIDMapper "1" ..> "*" ProgrammeIDDataModel

"<<root>>\nProgramme" "*" ---> "1" TeacherID
"<<root>>\nProgramme" "*" ---> "1" DegreeTypeID
"<<root>>\nProgramme" "*" ---> "1" DepartmentID
"<<root>>\nProgramme" "*" ---> "1" QuantSemesters
"<<root>>\nProgramme" "*" ---> "1" MaxEcts
"<<root>>\nProgramme" "1" ---> "1" Acronym
"<<root>>\nProgramme" "1" ---> "1" NameWithNumbersAndSpecialChars
"<<root>>\nProgramme" "1" ---> "1" ProgrammeID

ProgrammeDataModel "*" ---> "_teacherID\n1" TeacherIDDataModel
ProgrammeDataModel "*" ---> "_teacherID\n1" DegreeTypeIDDataModel
ProgrammeDataModel "*" ---> "_degreeTypeID\n1" DepartmentIDDataModel
ProgrammeDataModel "1" ---> "_programmeID\n1" ProgrammeIDDataModel
@enduml